-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cascadeClassifier_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    II_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    II_ce0 : OUT STD_LOGIC;
    II_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    II_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    II_ce1 : OUT STD_LOGIC;
    II_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    SII_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    SII_ce0 : OUT STD_LOGIC;
    SII_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    SII_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    SII_ce1 : OUT STD_LOGIC;
    SII_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of cascadeClassifier_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (36 downto 0) := "0000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (36 downto 0) := "0000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (36 downto 0) := "0000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (36 downto 0) := "0000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (36 downto 0) := "0000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (36 downto 0) := "0000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (36 downto 0) := "0001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (36 downto 0) := "0010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (36 downto 0) := "0100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (36 downto 0) := "1000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv64_258 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001001011000";
    constant ap_const_lv64_270 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001001110000";
    constant ap_const_lv64_3FD999999999999A : STD_LOGIC_VECTOR (63 downto 0) := "0011111111011001100110011001100110011001100110011001100110011010";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv10_19 : STD_LOGIC_VECTOR (9 downto 0) := "0000011001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv11_19 : STD_LOGIC_VECTOR (10 downto 0) := "00000011001";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal stages_array_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal stages_array_1_ce0 : STD_LOGIC;
    signal stages_array_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rectangles_array0_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array0_1_ce0 : STD_LOGIC;
    signal rectangles_array0_1_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array2_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array2_1_ce0 : STD_LOGIC;
    signal rectangles_array2_1_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array1_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array1_1_ce0 : STD_LOGIC;
    signal rectangles_array1_1_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array3_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array3_1_ce0 : STD_LOGIC;
    signal rectangles_array3_1_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array4_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array4_1_ce0 : STD_LOGIC;
    signal rectangles_array4_1_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array6_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array6_1_ce0 : STD_LOGIC;
    signal rectangles_array6_1_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array5_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array5_1_ce0 : STD_LOGIC;
    signal rectangles_array5_1_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array7_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array7_1_ce0 : STD_LOGIC;
    signal rectangles_array7_1_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array8_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array8_1_ce0 : STD_LOGIC;
    signal rectangles_array8_1_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array10_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array10_1_ce0 : STD_LOGIC;
    signal rectangles_array10_1_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal rectangles_array9_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array9_1_ce0 : STD_LOGIC;
    signal rectangles_array9_1_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array11_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array11_1_ce0 : STD_LOGIC;
    signal rectangles_array11_1_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal coord_V_8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    signal coord_V_9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    signal coord_V_10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    signal tree_thresh_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal tree_thresh_array_ce0 : STD_LOGIC;
    signal tree_thresh_array_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal weights_array0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_array0_ce0 : STD_LOGIC;
    signal weights_array0_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal weights_array1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_array1_ce0 : STD_LOGIC;
    signal weights_array1_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal weights_array2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_array2_ce0 : STD_LOGIC;
    signal weights_array2_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal alpha1_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal alpha1_array_ce0 : STD_LOGIC;
    signal alpha1_array_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal alpha2_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal alpha2_array_ce0 : STD_LOGIC;
    signal alpha2_array_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal stages_thresh_array_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal stages_thresh_array_1_ce0 : STD_LOGIC;
    signal stages_thresh_array_1_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_679_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_686 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_s_fu_692_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1606 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_112_fu_698_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_112_reg_1611 : STD_LOGIC_VECTOR (31 downto 0);
    signal stddev_fu_709_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal stddev_reg_1616 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal mean_fu_720_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mean_reg_1622 : STD_LOGIC_VECTOR (31 downto 0);
    signal stddev_3_fu_736_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal stddev_3_reg_1628 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_114_fu_742_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_114_reg_1634 : STD_LOGIC_VECTOR (31 downto 0);
    signal stddev_4_fu_746_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal stddev_4_reg_1640 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_115_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_115_reg_1645 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_int_sqrt_fu_665_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal stddev_6_reg_1649 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_int_sqrt_fu_665_ap_ready : STD_LOGIC;
    signal grp_int_sqrt_fu_665_ap_done : STD_LOGIC;
    signal stddev_assign_cast_fu_755_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal stddev_assign_cast_reg_1661 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_116_fu_764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_116_reg_1666 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_5_fu_770_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_5_reg_1670 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_117_fu_776_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_117_reg_1675 : STD_LOGIC_VECTOR (63 downto 0);
    signal stages_array_1_load_reg_1685 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal haar_counter_2_fu_785_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal haar_counter_2_reg_1690 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_4_fu_796_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_4_reg_1698 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_119_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_119_reg_1703 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_120_fu_808_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_120_reg_1708 : STD_LOGIC_VECTOR (63 downto 0);
    signal tr0_x_reg_1751 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tr0_width_reg_1758 : STD_LOGIC_VECTOR (4 downto 0);
    signal tr0_y_reg_1763 : STD_LOGIC_VECTOR (4 downto 0);
    signal tr0_height_reg_1768 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_180_fu_820_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_180_reg_1773 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_124_fu_851_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_124_reg_1804 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1539_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_183_reg_1814 : STD_LOGIC_VECTOR (10 downto 0);
    signal tr1_x_reg_1820 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tr1_width_reg_1827 : STD_LOGIC_VECTOR (4 downto 0);
    signal tr1_y_reg_1832 : STD_LOGIC_VECTOR (4 downto 0);
    signal tr1_height_reg_1837 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_321_fu_874_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_321_reg_1842 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_322_fu_881_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_322_reg_1847 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_186_fu_909_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_186_reg_1862 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_323_fu_927_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_323_reg_1868 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_324_fu_931_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_324_reg_1873 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_134_fu_948_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_134_reg_1883 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1547_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_189_reg_1893 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_325_fu_971_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_325_reg_1919 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_326_fu_978_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_326_reg_1924 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_stage_sum_1_fu_1002_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_stage_sum_1_reg_1939 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tr2_x_reg_1944 : STD_LOGIC_VECTOR (4 downto 0);
    signal tr2_y_cast6_fu_1017_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tr2_y_cast6_reg_1950 : STD_LOGIC_VECTOR (5 downto 0);
    signal tr2_height_cast5_fu_1021_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tr2_height_cast5_reg_1955 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_327_fu_1025_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_327_reg_1960 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_328_fu_1029_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_328_reg_1965 : STD_LOGIC_VECTOR (24 downto 0);
    signal or_cond2_fu_1115_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_reg_1970 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_192_fu_1125_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_192_reg_1974 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_154_fu_1131_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_154_reg_1980 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_1555_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_195_reg_1996 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_336_fu_1237_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ret_V_10_fu_1269_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal ret_V_10_reg_2022 : STD_LOGIC_VECTOR (26 downto 0);
    signal ret_V_13_fu_1303_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal ret_V_13_reg_2032 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_167_fu_1309_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_167_reg_2057 : STD_LOGIC_VECTOR (12 downto 0);
    signal tree_thresh_array_lo_reg_2062 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal weights_array0_load_reg_2067 : STD_LOGIC_VECTOR (12 downto 0);
    signal weights_array1_load_reg_2072 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_16_fu_1359_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal ret_V_16_reg_2077 : STD_LOGIC_VECTOR (26 downto 0);
    signal weights_array2_load_reg_2082 : STD_LOGIC_VECTOR (13 downto 0);
    signal return_value_reg_2087 : STD_LOGIC_VECTOR (13 downto 0);
    signal return_value_4_reg_2092 : STD_LOGIC_VECTOR (13 downto 0);
    signal t_fu_1561_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal t_reg_2097 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal sum0_fu_1374_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum0_reg_2102 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum1_fu_1386_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum1_reg_2107 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum2_fu_1398_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum2_reg_2112 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_166_fu_1416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_166_reg_2117 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal stages_thresh_array_2_reg_2122 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_179_fu_1441_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_fu_670_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_149_reg_2137 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_int_sqrt_fu_665_ap_start : STD_LOGIC;
    signal grp_int_sqrt_fu_665_ap_idle : STD_LOGIC;
    signal ap_phi_mux_stddev_assign_phi_fu_590_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal stddev_assign_reg_586 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_597 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal tmp_178_fu_1522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal haar_counter_reg_609 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_reg_621 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal haar_counter_assign_reg_632 : STD_LOGIC_VECTOR (12 downto 0);
    signal storemerge_reg_643 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_161_fu_1532_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_p_s_phi_fu_658_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_s_reg_654 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_int_sqrt_fu_665_ap_start_reg : STD_LOGIC := '0';
    signal tmp_221_cast_fu_846_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_222_cast_fu_866_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_224_cast_fu_890_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_225_cast_fu_900_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_227_cast_fu_943_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_228_cast_fu_963_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_230_cast_fu_987_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_231_cast_fu_997_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_233_cast_fu_1163_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_234_cast_fu_1176_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_236_cast_fu_1212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_237_cast_fu_1222_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_333_fu_1184_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_334_fu_1197_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_335_fu_1227_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal stage_sum_fu_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal stage_sum_2_fu_1431_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_679_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_111_fu_704_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_113_fu_715_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_317_fu_726_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_318_fu_731_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal stages_array_1_load_s_fu_781_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_180_fu_820_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_121_cast_fu_838_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_181_fu_841_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tr0_x_cast_fu_826_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tr0_width_cast_fu_829_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_125_cast_fu_857_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_182_fu_861_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_121_cast7_fu_871_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_184_fu_885_p2 : STD_LOGIC_VECTOR (10 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_184_fu_885_p2 : signal is "no";
    signal tmp_125_cast6_fu_878_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_185_fu_895_p2 : STD_LOGIC_VECTOR (10 downto 0);
    attribute use_dsp48 of tmp_185_fu_895_p2 : signal is "no";
    signal tmp_186_fu_909_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_131_cast_fu_935_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_187_fu_938_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tr1_x_cast_fu_915_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tr1_width_cast_fu_918_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_135_cast_fu_954_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_188_fu_958_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_131_cast5_fu_968_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_190_fu_982_p2 : STD_LOGIC_VECTOR (10 downto 0);
    attribute use_dsp48 of tmp_190_fu_982_p2 : signal is "no";
    signal tmp_135_cast4_fu_975_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_191_fu_992_p2 : STD_LOGIC_VECTOR (10 downto 0);
    attribute use_dsp48 of tmp_191_fu_992_p2 : signal is "no";
    signal tmp_329_fu_1033_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_330_fu_1043_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_142_fu_1037_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_331_fu_1059_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_332_fu_1069_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_168_fu_1063_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp2_fu_1077_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp1_fu_1051_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_143_fu_1085_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_145_fu_1097_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_146_fu_1103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_1109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_144_fu_1091_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_192_fu_1125_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tr2_width_cast7_fu_1013_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tr2_x_cast8_fu_1009_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_151_cast_fu_1155_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_193_fu_1158_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_155_cast_fu_1168_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_194_fu_1171_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_151_cast3_fu_1181_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_196_fu_1207_p2 : STD_LOGIC_VECTOR (10 downto 0);
    attribute use_dsp48 of tmp_196_fu_1207_p2 : signal is "no";
    signal tmp_155_cast2_fu_1194_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_197_fu_1217_p2 : STD_LOGIC_VECTOR (10 downto 0);
    attribute use_dsp48 of tmp_197_fu_1217_p2 : signal is "no";
    signal lhs_V_fu_1241_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal rhs_V_fu_1244_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_fu_1247_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal lhs_V_6_fu_1253_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal rhs_V_6_fu_1257_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal ret_V_9_fu_1260_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal rhs_V_10_cast_fu_1266_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal lhs_V_7_fu_1275_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal rhs_V_7_fu_1278_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_11_fu_1281_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal lhs_V_8_fu_1287_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal rhs_V_8_fu_1291_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal ret_V_12_fu_1294_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal rhs_V_13_cast_fu_1300_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal lhs_V_9_fu_1319_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal rhs_V_9_fu_1327_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_14_fu_1331_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal lhs_V_10_fu_1337_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal rhs_V_10_fu_1345_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal ret_V_15_fu_1349_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal rhs_V_16_cast_fu_1355_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sum0_fu_1374_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal sum0_fu_1374_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sum1_fu_1386_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum1_fu_1386_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sum2_fu_1398_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum2_fu_1398_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp4_fu_1407_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal final_sum_fu_1411_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_cast_fu_1404_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal return_value_6_fu_1422_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal s_cast_fu_1427_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_147_to_int_fu_1445_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_149_to_int_fu_1463_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_170_fu_1449_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_319_fu_1459_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs_fu_1486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_1480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_172_fu_1466_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_320_fu_1476_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs2_fu_1504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_1498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_174_fu_1492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_175_fu_1510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_176_fu_1516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_177_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_cast_le_fu_1528_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1539_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1539_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1539_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1547_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1547_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1547_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1555_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1555_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1555_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_fu_1561_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (36 downto 0);
    signal grp_fu_1539_p00 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1539_p10 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1547_p00 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1547_p10 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum1_fu_1386_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum2_fu_1398_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_180_fu_820_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_186_fu_909_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_192_fu_1125_p10 : STD_LOGIC_VECTOR (9 downto 0);

    component int_sqrt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        value_r : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component detectFaces_dmul_Aem IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component detectFaces_dcmp_Bew IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component detectFaces_sitodCeG IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component detectFaces_am_adDeQ IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component detectFaces_am_adEe0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component detectFaces_mul_mFfa IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component cascadeClassifierg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component cascadeClassifierhbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component cascadeClassifieribs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component cascadeClassifierjbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component cascadeClassifierkbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component cascadeClassifierlbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component cascadeClassifiermb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component cascadeClassifierncg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component cascadeClassifierocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component cascadeClassifierpcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component cascadeClassifierqcK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component cascadeClassifierrcU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component cascadeClassifiersc4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component cascadeClassifiertde IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component cascadeClassifierudo IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component cascadeClassifiervdy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cascadeClassifierwdI IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cascadeClassifierxdS IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cascadeClassifieryd2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cascadeClassifierzec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    stages_array_1_U : component cascadeClassifierg8j
    generic map (
        DataWidth => 8,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => stages_array_1_address0,
        ce0 => stages_array_1_ce0,
        q0 => stages_array_1_q0);

    rectangles_array0_1_U : component cascadeClassifierhbi
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array0_1_address0,
        ce0 => rectangles_array0_1_ce0,
        q0 => rectangles_array0_1_q0);

    rectangles_array2_1_U : component cascadeClassifieribs
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array2_1_address0,
        ce0 => rectangles_array2_1_ce0,
        q0 => rectangles_array2_1_q0);

    rectangles_array1_1_U : component cascadeClassifierjbC
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array1_1_address0,
        ce0 => rectangles_array1_1_ce0,
        q0 => rectangles_array1_1_q0);

    rectangles_array3_1_U : component cascadeClassifierkbM
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array3_1_address0,
        ce0 => rectangles_array3_1_ce0,
        q0 => rectangles_array3_1_q0);

    rectangles_array4_1_U : component cascadeClassifierlbW
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array4_1_address0,
        ce0 => rectangles_array4_1_ce0,
        q0 => rectangles_array4_1_q0);

    rectangles_array6_1_U : component cascadeClassifiermb6
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array6_1_address0,
        ce0 => rectangles_array6_1_ce0,
        q0 => rectangles_array6_1_q0);

    rectangles_array5_1_U : component cascadeClassifierncg
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array5_1_address0,
        ce0 => rectangles_array5_1_ce0,
        q0 => rectangles_array5_1_q0);

    rectangles_array7_1_U : component cascadeClassifierocq
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array7_1_address0,
        ce0 => rectangles_array7_1_ce0,
        q0 => rectangles_array7_1_q0);

    rectangles_array8_1_U : component cascadeClassifierpcA
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array8_1_address0,
        ce0 => rectangles_array8_1_ce0,
        q0 => rectangles_array8_1_q0);

    rectangles_array10_1_U : component cascadeClassifierqcK
    generic map (
        DataWidth => 4,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array10_1_address0,
        ce0 => rectangles_array10_1_ce0,
        q0 => rectangles_array10_1_q0);

    rectangles_array9_1_U : component cascadeClassifierrcU
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array9_1_address0,
        ce0 => rectangles_array9_1_ce0,
        q0 => rectangles_array9_1_q0);

    rectangles_array11_1_U : component cascadeClassifiersc4
    generic map (
        DataWidth => 4,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array11_1_address0,
        ce0 => rectangles_array11_1_ce0,
        q0 => rectangles_array11_1_q0);

    tree_thresh_array_U : component cascadeClassifiertde
    generic map (
        DataWidth => 13,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tree_thresh_array_address0,
        ce0 => tree_thresh_array_ce0,
        q0 => tree_thresh_array_q0);

    weights_array0_U : component cascadeClassifierudo
    generic map (
        DataWidth => 13,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_array0_address0,
        ce0 => weights_array0_ce0,
        q0 => weights_array0_q0);

    weights_array1_U : component cascadeClassifiervdy
    generic map (
        DataWidth => 14,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_array1_address0,
        ce0 => weights_array1_ce0,
        q0 => weights_array1_q0);

    weights_array2_U : component cascadeClassifierwdI
    generic map (
        DataWidth => 14,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_array2_address0,
        ce0 => weights_array2_ce0,
        q0 => weights_array2_q0);

    alpha1_array_U : component cascadeClassifierxdS
    generic map (
        DataWidth => 14,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => alpha1_array_address0,
        ce0 => alpha1_array_ce0,
        q0 => alpha1_array_q0);

    alpha2_array_U : component cascadeClassifieryd2
    generic map (
        DataWidth => 14,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => alpha2_array_address0,
        ce0 => alpha2_array_ce0,
        q0 => alpha2_array_q0);

    stages_thresh_array_1_U : component cascadeClassifierzec
    generic map (
        DataWidth => 12,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => stages_thresh_array_1_address0,
        ce0 => stages_thresh_array_1_ce0,
        q0 => stages_thresh_array_1_q0);

    grp_int_sqrt_fu_665 : component int_sqrt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_int_sqrt_fu_665_ap_start,
        ap_done => grp_int_sqrt_fu_665_ap_done,
        ap_idle => grp_int_sqrt_fu_665_ap_idle,
        ap_ready => grp_int_sqrt_fu_665_ap_ready,
        value_r => stddev_4_reg_1640,
        ap_return => grp_int_sqrt_fu_665_ap_return);

    detectFaces_dmul_Aem_U25 : component detectFaces_dmul_Aem
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_686,
        din1 => ap_const_lv64_3FD999999999999A,
        ce => ap_const_logic_1,
        dout => grp_fu_670_p2);

    detectFaces_dcmp_Bew_U26 : component detectFaces_dcmp_Bew
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        din0 => reg_686,
        din1 => tmp_149_reg_2137,
        opcode => ap_const_lv5_4,
        dout => tmp_177_fu_675_p2);

    detectFaces_sitodCeG_U27 : component detectFaces_sitodCeG
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_679_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_679_p1);

    detectFaces_am_adDeQ_U28 : component detectFaces_am_adDeQ
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        din2_WIDTH => 6,
        dout_WIDTH => 11)
    port map (
        din0 => grp_fu_1539_p0,
        din1 => grp_fu_1539_p1,
        din2 => grp_fu_1539_p2,
        dout => grp_fu_1539_p3);

    detectFaces_am_adDeQ_U29 : component detectFaces_am_adDeQ
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        din2_WIDTH => 6,
        dout_WIDTH => 11)
    port map (
        din0 => grp_fu_1547_p0,
        din1 => grp_fu_1547_p1,
        din2 => grp_fu_1547_p2,
        dout => grp_fu_1547_p3);

    detectFaces_am_adEe0_U30 : component detectFaces_am_adEe0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        din2_WIDTH => 6,
        dout_WIDTH => 11)
    port map (
        din0 => grp_fu_1555_p0,
        din1 => grp_fu_1555_p1,
        din2 => grp_fu_1555_p2,
        dout => grp_fu_1555_p3);

    detectFaces_mul_mFfa_U31 : component detectFaces_mul_mFfa
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => tree_thresh_array_lo_reg_2062,
        din1 => t_fu_1561_p1,
        dout => t_fu_1561_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv6_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state37) and ((tmp_178_fu_1522_p2 = ap_const_lv1_1) or (tmp_116_reg_1666 = ap_const_lv1_0)))) then 
                    ap_return_preg <= ap_phi_mux_p_s_phi_fu_658_p4;
                end if; 
            end if;
        end if;
    end process;


    grp_int_sqrt_fu_665_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_int_sqrt_fu_665_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_115_fu_751_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_int_sqrt_fu_665_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_int_sqrt_fu_665_ap_ready = ap_const_logic_1)) then 
                    grp_int_sqrt_fu_665_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    coord_V_10_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond2_reg_1970 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                coord_V_10 <= tmp_335_fu_1227_p1;
            elsif (((or_cond2_fu_1115_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                coord_V_10 <= ap_const_lv25_0;
            end if; 
        end if;
    end process;

    coord_V_8_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                coord_V_8 <= tmp_333_fu_1184_p1;
            elsif (((or_cond2_fu_1115_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                coord_V_8 <= ap_const_lv25_0;
            end if; 
        end if;
    end process;

    coord_V_9_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                coord_V_9 <= tmp_334_fu_1197_p1;
            elsif (((or_cond2_fu_1115_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                coord_V_9 <= ap_const_lv25_0;
            end if; 
        end if;
    end process;

    haar_counter_assign_reg_632_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                haar_counter_assign_reg_632 <= tmp_167_reg_2057;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                haar_counter_assign_reg_632 <= haar_counter_reg_609;
            end if; 
        end if;
    end process;

    haar_counter_reg_609_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_178_fu_1522_p2 = ap_const_lv1_0) and (tmp_116_reg_1666 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                haar_counter_reg_609 <= haar_counter_2_reg_1690;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                haar_counter_reg_609 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    i_reg_597_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_178_fu_1522_p2 = ap_const_lv1_0) and (tmp_116_reg_1666 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                i_reg_597 <= i_5_reg_1670;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_reg_597 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_reg_621_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                j_reg_621 <= j_4_reg_1698;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j_reg_621 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    p_s_reg_654_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_116_fu_764_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                p_s_reg_654 <= ap_const_lv6_1;
            elsif (((tmp_178_fu_1522_p2 = ap_const_lv1_1) and (tmp_116_reg_1666 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                p_s_reg_654 <= tmp_161_fu_1532_p2;
            end if; 
        end if;
    end process;

    stage_sum_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                stage_sum_fu_136 <= stage_sum_2_fu_1431_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                stage_sum_fu_136 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    stddev_assign_reg_586_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_115_fu_751_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                stddev_assign_reg_586 <= ap_const_lv16_1;
            elsif (((tmp_115_reg_1645 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                stddev_assign_reg_586 <= stddev_6_reg_1649;
            end if; 
        end if;
    end process;

    storemerge_reg_643_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond2_reg_1970 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                storemerge_reg_643 <= tmp_336_fu_1237_p1;
            elsif (((or_cond2_fu_1115_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                storemerge_reg_643 <= ap_const_lv25_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                haar_counter_2_reg_1690 <= haar_counter_2_fu_785_p2;
                stages_array_1_load_reg_1685 <= stages_array_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_5_reg_1670 <= i_5_fu_770_p2;
                tmp_116_reg_1666 <= tmp_116_fu_764_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                j_4_reg_1698 <= j_4_fu_796_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                mean_reg_1622 <= mean_fu_720_p2;
                stddev_reg_1616 <= stddev_fu_709_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                or_cond2_reg_1970 <= or_cond2_fu_1115_p2;
                p_stage_sum_1_reg_1939 <= p_stage_sum_1_fu_1002_p3;
                tmp_327_reg_1960 <= tmp_327_fu_1025_p1;
                tmp_328_reg_1965 <= tmp_328_fu_1029_p1;
                    tr2_height_cast5_reg_1955(3 downto 0) <= tr2_height_cast5_fu_1021_p1(3 downto 0);
                tr2_x_reg_1944 <= rectangles_array8_1_q0;
                    tr2_y_cast6_reg_1950(4 downto 0) <= tr2_y_cast6_fu_1017_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30))) then
                reg_686 <= grp_fu_679_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                ret_V_10_reg_2022 <= ret_V_10_fu_1269_p2;
                ret_V_13_reg_2032 <= ret_V_13_fu_1303_p2;
                tmp_167_reg_2057 <= tmp_167_fu_1309_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                ret_V_16_reg_2077 <= ret_V_16_fu_1359_p2;
                return_value_4_reg_2092 <= alpha2_array_q0;
                return_value_reg_2087 <= alpha1_array_q0;
                tree_thresh_array_lo_reg_2062 <= tree_thresh_array_q0;
                weights_array0_load_reg_2067 <= weights_array0_q0;
                weights_array1_load_reg_2072 <= weights_array1_q0;
                weights_array2_load_reg_2082 <= weights_array2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                stages_thresh_array_2_reg_2122 <= stages_thresh_array_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    stddev_3_reg_1628(31 downto 6) <= stddev_3_fu_736_p2(31 downto 6);
                tmp_114_reg_1634 <= tmp_114_fu_742_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                stddev_4_reg_1640 <= stddev_4_fu_746_p2;
                tmp_115_reg_1645 <= tmp_115_fu_751_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_int_sqrt_fu_665_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                stddev_6_reg_1649 <= grp_int_sqrt_fu_665_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    stddev_assign_cast_reg_1661(15 downto 0) <= stddev_assign_cast_fu_755_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                sum0_reg_2102 <= sum0_fu_1374_p2;
                sum1_reg_2107 <= sum1_fu_1386_p2;
                sum2_reg_2112 <= sum2_fu_1398_p2;
                t_reg_2097 <= t_fu_1561_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_112_reg_1611 <= tmp_112_fu_698_p2;
                tmp_s_reg_1606 <= tmp_s_fu_692_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_116_fu_764_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    tmp_117_reg_1675(4 downto 0) <= tmp_117_fu_776_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_791_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                tmp_119_reg_1703 <= tmp_119_fu_802_p2;
                    tmp_120_reg_1708(12 downto 0) <= tmp_120_fu_808_p1(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_124_reg_1804 <= tmp_124_fu_851_p2;
                tmp_183_reg_1814 <= grp_fu_1539_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_134_reg_1883 <= tmp_134_fu_948_p2;
                tmp_189_reg_1893 <= grp_fu_1547_p3;
                tmp_323_reg_1868 <= tmp_323_fu_927_p1;
                tmp_324_reg_1873 <= tmp_324_fu_931_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                tmp_149_reg_2137 <= grp_fu_670_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond2_fu_1115_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                tmp_154_reg_1980 <= tmp_154_fu_1131_p2;
                tmp_192_reg_1974 <= tmp_192_fu_1125_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                tmp_166_reg_2117 <= tmp_166_fu_1416_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_180_reg_1773 <= tmp_180_fu_820_p2;
                tr0_height_reg_1768 <= rectangles_array3_1_q0;
                tr0_width_reg_1758 <= rectangles_array2_1_q0;
                tr0_x_reg_1751 <= rectangles_array0_1_q0;
                tr0_y_reg_1763 <= rectangles_array1_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_186_reg_1862 <= tmp_186_fu_909_p2;
                tmp_321_reg_1842 <= tmp_321_fu_874_p1;
                tmp_322_reg_1847 <= tmp_322_fu_881_p1;
                tr1_height_reg_1837 <= rectangles_array7_1_q0;
                tr1_width_reg_1827 <= rectangles_array6_1_q0;
                tr1_x_reg_1820 <= rectangles_array4_1_q0;
                tr1_y_reg_1832 <= rectangles_array5_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp_195_reg_1996 <= grp_fu_1555_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_325_reg_1919 <= tmp_325_fu_971_p1;
                tmp_326_reg_1924 <= tmp_326_fu_978_p1;
            end if;
        end if;
    end process;
    stddev_3_reg_1628(5 downto 0) <= "000000";
    stddev_assign_cast_reg_1661(28 downto 16) <= "0000000000000";
    tmp_117_reg_1675(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_120_reg_1708(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    tr2_y_cast6_reg_1950(5) <= '0';
    tr2_height_cast5_reg_1955(5 downto 4) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, tmp_115_fu_751_p2, ap_CS_fsm_state6, grp_int_sqrt_fu_665_ap_done, tmp_116_fu_764_p2, tmp_116_reg_1666, ap_CS_fsm_state8, ap_CS_fsm_state10, exitcond_fu_791_p2, ap_CS_fsm_state16, or_cond2_fu_1115_p2, ap_CS_fsm_state37, tmp_178_fu_1522_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((tmp_115_fu_751_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((grp_int_sqrt_fu_665_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((tmp_116_fu_764_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((exitcond_fu_791_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((or_cond2_fu_1115_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state37) and ((tmp_178_fu_1522_p2 = ap_const_lv1_1) or (tmp_116_reg_1666 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    II_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state18, tmp_221_cast_fu_846_p1, tmp_224_cast_fu_890_p1, tmp_227_cast_fu_943_p1, tmp_230_cast_fu_987_p1, tmp_233_cast_fu_1163_p1, tmp_236_cast_fu_1212_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            II_address0 <= tmp_236_cast_fu_1212_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            II_address0 <= tmp_233_cast_fu_1163_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            II_address0 <= tmp_230_cast_fu_987_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            II_address0 <= tmp_227_cast_fu_943_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            II_address0 <= tmp_224_cast_fu_890_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            II_address0 <= tmp_221_cast_fu_846_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            II_address0 <= ap_const_lv64_258(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            II_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        else 
            II_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    II_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state18, tmp_222_cast_fu_866_p1, tmp_225_cast_fu_900_p1, tmp_228_cast_fu_963_p1, tmp_231_cast_fu_997_p1, tmp_234_cast_fu_1176_p1, tmp_237_cast_fu_1222_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            II_address1 <= tmp_237_cast_fu_1222_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            II_address1 <= tmp_234_cast_fu_1176_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            II_address1 <= tmp_231_cast_fu_997_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            II_address1 <= tmp_228_cast_fu_963_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            II_address1 <= tmp_225_cast_fu_900_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            II_address1 <= tmp_222_cast_fu_866_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            II_address1 <= ap_const_lv64_270(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            II_address1 <= ap_const_lv64_18(10 - 1 downto 0);
        else 
            II_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    II_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            II_ce0 <= ap_const_logic_1;
        else 
            II_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    II_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            II_ce1 <= ap_const_logic_1;
        else 
            II_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    SII_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SII_address0 <= ap_const_lv64_258(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            SII_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        else 
            SII_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    SII_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SII_address1 <= ap_const_lv64_270(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            SII_address1 <= ap_const_lv64_18(10 - 1 downto 0);
        else 
            SII_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    SII_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            SII_ce0 <= ap_const_logic_1;
        else 
            SII_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SII_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            SII_ce1 <= ap_const_logic_1;
        else 
            SII_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    alpha1_array_address0 <= tmp_120_reg_1708(12 - 1 downto 0);

    alpha1_array_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            alpha1_array_ce0 <= ap_const_logic_1;
        else 
            alpha1_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    alpha2_array_address0 <= tmp_120_reg_1708(12 - 1 downto 0);

    alpha2_array_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            alpha2_array_ce0 <= ap_const_logic_1;
        else 
            alpha2_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_116_reg_1666, ap_CS_fsm_state37, tmp_178_fu_1522_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state37) and ((tmp_178_fu_1522_p2 = ap_const_lv1_1) or (tmp_116_reg_1666 = ap_const_lv1_0))) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_s_phi_fu_658_p4_assign_proc : process(tmp_116_reg_1666, ap_CS_fsm_state37, tmp_178_fu_1522_p2, tmp_161_fu_1532_p2, p_s_reg_654)
    begin
        if (((tmp_178_fu_1522_p2 = ap_const_lv1_1) and (tmp_116_reg_1666 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            ap_phi_mux_p_s_phi_fu_658_p4 <= tmp_161_fu_1532_p2;
        else 
            ap_phi_mux_p_s_phi_fu_658_p4 <= p_s_reg_654;
        end if; 
    end process;


    ap_phi_mux_stddev_assign_phi_fu_590_p4_assign_proc : process(tmp_115_reg_1645, stddev_6_reg_1649, ap_CS_fsm_state7, stddev_assign_reg_586)
    begin
        if (((tmp_115_reg_1645 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_phi_mux_stddev_assign_phi_fu_590_p4 <= stddev_6_reg_1649;
        else 
            ap_phi_mux_stddev_assign_phi_fu_590_p4 <= stddev_assign_reg_586;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_116_reg_1666, ap_CS_fsm_state37, tmp_178_fu_1522_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) and ((tmp_178_fu_1522_p2 = ap_const_lv1_1) or (tmp_116_reg_1666 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(tmp_116_reg_1666, ap_CS_fsm_state37, tmp_178_fu_1522_p2, ap_phi_mux_p_s_phi_fu_658_p4, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) and ((tmp_178_fu_1522_p2 = ap_const_lv1_1) or (tmp_116_reg_1666 = ap_const_lv1_0)))) then 
            ap_return <= ap_phi_mux_p_s_phi_fu_658_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    exitcond_fu_791_p2 <= "1" when (j_reg_621 = stages_array_1_load_reg_1685) else "0";
    final_sum_fu_1411_p2 <= std_logic_vector(unsigned(tmp4_fu_1407_p2) + unsigned(sum1_reg_2107));
    grp_fu_1539_p0 <= grp_fu_1539_p00(5 - 1 downto 0);
    grp_fu_1539_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tr0_y_reg_1763),6));
    grp_fu_1539_p1 <= grp_fu_1539_p10(5 - 1 downto 0);
    grp_fu_1539_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tr0_height_reg_1768),6));
    grp_fu_1539_p2 <= ap_const_lv11_19(6 - 1 downto 0);
    grp_fu_1547_p0 <= grp_fu_1547_p00(5 - 1 downto 0);
    grp_fu_1547_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tr1_y_reg_1832),6));
    grp_fu_1547_p1 <= grp_fu_1547_p10(5 - 1 downto 0);
    grp_fu_1547_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tr1_height_reg_1837),6));
    grp_fu_1547_p2 <= ap_const_lv11_19(6 - 1 downto 0);
    grp_fu_1555_p0 <= tr2_height_cast5_reg_1955(4 - 1 downto 0);
    grp_fu_1555_p1 <= tr2_y_cast6_reg_1950(5 - 1 downto 0);
    grp_fu_1555_p2 <= ap_const_lv11_19(6 - 1 downto 0);

    grp_fu_679_p0_assign_proc : process(tmp_179_fu_1441_p1, ap_CS_fsm_state25, ap_CS_fsm_state31, stage_sum_fu_136)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_679_p0 <= stage_sum_fu_136;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_679_p0 <= tmp_179_fu_1441_p1;
        else 
            grp_fu_679_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_int_sqrt_fu_665_ap_start <= grp_int_sqrt_fu_665_ap_start_reg;
    haar_counter_2_fu_785_p2 <= std_logic_vector(unsigned(stages_array_1_load_s_fu_781_p1) + unsigned(haar_counter_reg_609));
    i_5_fu_770_p2 <= std_logic_vector(unsigned(i_reg_597) + unsigned(ap_const_lv5_1));
    i_cast_le_fu_1528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_597),6));
    j_4_fu_796_p2 <= std_logic_vector(unsigned(j_reg_621) + unsigned(ap_const_lv8_1));
        lhs_V_10_fu_1337_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_14_fu_1331_p2),27));

        lhs_V_6_fu_1253_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_fu_1247_p2),27));

    lhs_V_7_fu_1275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_325_reg_1919),26));
        lhs_V_8_fu_1287_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_11_fu_1281_p2),27));

    lhs_V_9_fu_1319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(coord_V_8),26));
    lhs_V_fu_1241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_321_reg_1842),26));
    mean_fu_720_p2 <= std_logic_vector(unsigned(II_q1) + unsigned(tmp_113_fu_715_p2));
    notlhs1_fu_1498_p2 <= "0" when (tmp_172_fu_1466_p4 = ap_const_lv11_7FF) else "1";
    notlhs_fu_1480_p2 <= "0" when (tmp_170_fu_1449_p4 = ap_const_lv11_7FF) else "1";
    notrhs2_fu_1504_p2 <= "1" when (tmp_320_fu_1476_p1 = ap_const_lv52_0) else "0";
    notrhs_fu_1486_p2 <= "1" when (tmp_319_fu_1459_p1 = ap_const_lv52_0) else "0";
    or_cond2_fu_1115_p2 <= (tmp_144_fu_1091_p2 or tmp3_fu_1109_p2);
    p_stage_sum_1_fu_1002_p3 <= 
        ap_const_lv32_0 when (tmp_119_reg_1703(0) = '1') else 
        stage_sum_fu_136;
    rectangles_array0_1_address0 <= tmp_120_fu_808_p1(12 - 1 downto 0);

    rectangles_array0_1_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            rectangles_array0_1_ce0 <= ap_const_logic_1;
        else 
            rectangles_array0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array10_1_address0 <= tmp_120_reg_1708(12 - 1 downto 0);

    rectangles_array10_1_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            rectangles_array10_1_ce0 <= ap_const_logic_1;
        else 
            rectangles_array10_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array11_1_address0 <= tmp_120_reg_1708(12 - 1 downto 0);

    rectangles_array11_1_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            rectangles_array11_1_ce0 <= ap_const_logic_1;
        else 
            rectangles_array11_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array1_1_address0 <= tmp_120_fu_808_p1(12 - 1 downto 0);

    rectangles_array1_1_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            rectangles_array1_1_ce0 <= ap_const_logic_1;
        else 
            rectangles_array1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array2_1_address0 <= tmp_120_fu_808_p1(12 - 1 downto 0);

    rectangles_array2_1_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            rectangles_array2_1_ce0 <= ap_const_logic_1;
        else 
            rectangles_array2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array3_1_address0 <= tmp_120_fu_808_p1(12 - 1 downto 0);

    rectangles_array3_1_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            rectangles_array3_1_ce0 <= ap_const_logic_1;
        else 
            rectangles_array3_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array4_1_address0 <= tmp_120_reg_1708(12 - 1 downto 0);

    rectangles_array4_1_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            rectangles_array4_1_ce0 <= ap_const_logic_1;
        else 
            rectangles_array4_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array5_1_address0 <= tmp_120_reg_1708(12 - 1 downto 0);

    rectangles_array5_1_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            rectangles_array5_1_ce0 <= ap_const_logic_1;
        else 
            rectangles_array5_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array6_1_address0 <= tmp_120_reg_1708(12 - 1 downto 0);

    rectangles_array6_1_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            rectangles_array6_1_ce0 <= ap_const_logic_1;
        else 
            rectangles_array6_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array7_1_address0 <= tmp_120_reg_1708(12 - 1 downto 0);

    rectangles_array7_1_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            rectangles_array7_1_ce0 <= ap_const_logic_1;
        else 
            rectangles_array7_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array8_1_address0 <= tmp_120_reg_1708(12 - 1 downto 0);

    rectangles_array8_1_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            rectangles_array8_1_ce0 <= ap_const_logic_1;
        else 
            rectangles_array8_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array9_1_address0 <= tmp_120_reg_1708(12 - 1 downto 0);

    rectangles_array9_1_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            rectangles_array9_1_ce0 <= ap_const_logic_1;
        else 
            rectangles_array9_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_10_fu_1269_p2 <= std_logic_vector(unsigned(ret_V_9_fu_1260_p2) + unsigned(rhs_V_10_cast_fu_1266_p1));
    ret_V_11_fu_1281_p2 <= std_logic_vector(unsigned(lhs_V_7_fu_1275_p1) - unsigned(rhs_V_7_fu_1278_p1));
    ret_V_12_fu_1294_p2 <= std_logic_vector(signed(lhs_V_8_fu_1287_p1) - signed(rhs_V_8_fu_1291_p1));
    ret_V_13_fu_1303_p2 <= std_logic_vector(unsigned(ret_V_12_fu_1294_p2) + unsigned(rhs_V_13_cast_fu_1300_p1));
    ret_V_14_fu_1331_p2 <= std_logic_vector(unsigned(lhs_V_9_fu_1319_p1) - unsigned(rhs_V_9_fu_1327_p1));
    ret_V_15_fu_1349_p2 <= std_logic_vector(signed(lhs_V_10_fu_1337_p1) - signed(rhs_V_10_fu_1345_p1));
    ret_V_16_fu_1359_p2 <= std_logic_vector(unsigned(ret_V_15_fu_1349_p2) + unsigned(rhs_V_16_cast_fu_1355_p1));
    ret_V_9_fu_1260_p2 <= std_logic_vector(signed(lhs_V_6_fu_1253_p1) - signed(rhs_V_6_fu_1257_p1));
    ret_V_fu_1247_p2 <= std_logic_vector(unsigned(lhs_V_fu_1241_p1) - unsigned(rhs_V_fu_1244_p1));
    return_value_6_fu_1422_p3 <= 
        return_value_reg_2087 when (tmp_166_reg_2117(0) = '1') else 
        return_value_4_reg_2092;
    rhs_V_10_cast_fu_1266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_324_reg_1873),27));
    rhs_V_10_fu_1345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(coord_V_10),27));
    rhs_V_13_cast_fu_1300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_328_reg_1965),27));
    rhs_V_16_cast_fu_1355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(storemerge_reg_643),27));
    rhs_V_6_fu_1257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_323_reg_1868),27));
    rhs_V_7_fu_1278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_326_reg_1924),26));
    rhs_V_8_fu_1291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_327_reg_1960),27));
    rhs_V_9_fu_1327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(coord_V_9),26));
    rhs_V_fu_1244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_322_reg_1847),26));
        s_cast_fu_1427_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(return_value_6_fu_1422_p3),32));

    stage_sum_2_fu_1431_p2 <= std_logic_vector(signed(s_cast_fu_1427_p1) + signed(p_stage_sum_1_reg_1939));
    stages_array_1_address0 <= tmp_117_fu_776_p1(5 - 1 downto 0);

    stages_array_1_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            stages_array_1_ce0 <= ap_const_logic_1;
        else 
            stages_array_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    stages_array_1_load_s_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stages_array_1_q0),13));
    stages_thresh_array_1_address0 <= tmp_117_reg_1675(5 - 1 downto 0);

    stages_thresh_array_1_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stages_thresh_array_1_ce0 <= ap_const_logic_1;
        else 
            stages_thresh_array_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    stddev_3_fu_736_p2 <= std_logic_vector(unsigned(tmp_317_fu_726_p2) + unsigned(tmp_318_fu_731_p2));
    stddev_4_fu_746_p2 <= std_logic_vector(unsigned(stddev_3_reg_1628) - unsigned(tmp_114_reg_1634));
    stddev_assign_cast_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_stddev_assign_phi_fu_590_p4),29));
    stddev_fu_709_p2 <= std_logic_vector(unsigned(SII_q1) + unsigned(tmp_111_fu_704_p2));
    sum0_fu_1374_p0 <= weights_array0_load_reg_2067;
    sum0_fu_1374_p1 <= ret_V_10_reg_2022;
    sum0_fu_1374_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(sum0_fu_1374_p0) * signed(sum0_fu_1374_p1))), 32));
    sum1_fu_1386_p0 <= sum1_fu_1386_p00(14 - 1 downto 0);
    sum1_fu_1386_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_array1_load_reg_2072),32));
    sum1_fu_1386_p1 <= ret_V_13_reg_2032;
    sum1_fu_1386_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &sum1_fu_1386_p0) * signed(sum1_fu_1386_p1))), 32));
    sum2_fu_1398_p0 <= sum2_fu_1398_p00(14 - 1 downto 0);
    sum2_fu_1398_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_array2_load_reg_2082),32));
    sum2_fu_1398_p1 <= ret_V_16_reg_2077;
    sum2_fu_1398_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &sum2_fu_1398_p0) * signed(sum2_fu_1398_p1))), 32));
        t_cast_fu_1404_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t_reg_2097),32));

    t_fu_1561_p1 <= stddev_assign_cast_reg_1661(16 - 1 downto 0);
    tmp1_fu_1051_p3 <= (tmp_330_fu_1043_p3 & tmp_142_fu_1037_p2);
    tmp2_fu_1077_p3 <= (tmp_332_fu_1069_p3 & tmp_168_fu_1063_p2);
    tmp3_fu_1109_p2 <= (tmp_146_fu_1103_p2 or tmp_145_fu_1097_p2);
    tmp4_fu_1407_p2 <= std_logic_vector(unsigned(sum0_reg_2102) + unsigned(sum2_reg_2112));
    tmp_111_fu_704_p2 <= std_logic_vector(unsigned(tmp_s_reg_1606) - unsigned(SII_q0));
    tmp_112_fu_698_p2 <= std_logic_vector(unsigned(II_q0) - unsigned(II_q1));
    tmp_113_fu_715_p2 <= std_logic_vector(unsigned(tmp_112_reg_1611) - unsigned(II_q0));
    tmp_114_fu_742_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mean_reg_1622) * signed(mean_reg_1622))), 32));
    tmp_115_fu_751_p2 <= "1" when (stddev_3_reg_1628 = tmp_114_reg_1634) else "0";
    tmp_116_fu_764_p2 <= "1" when (unsigned(i_reg_597) < unsigned(ap_const_lv5_19)) else "0";
    tmp_117_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_597),64));
    tmp_119_fu_802_p2 <= "1" when (j_reg_621 = ap_const_lv8_0) else "0";
    tmp_120_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(haar_counter_assign_reg_632),64));
    tmp_121_cast7_fu_871_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tr0_x_reg_1751),11));
    tmp_121_cast_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tr0_x_reg_1751),10));
    tmp_124_fu_851_p2 <= std_logic_vector(unsigned(tr0_x_cast_fu_826_p1) + unsigned(tr0_width_cast_fu_829_p1));
    tmp_125_cast6_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_124_reg_1804),11));
    tmp_125_cast_fu_857_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_124_fu_851_p2),10));
    tmp_131_cast5_fu_968_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tr1_x_reg_1820),11));
    tmp_131_cast_fu_935_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tr1_x_reg_1820),10));
    tmp_134_fu_948_p2 <= std_logic_vector(unsigned(tr1_x_cast_fu_915_p1) + unsigned(tr1_width_cast_fu_918_p1));
    tmp_135_cast4_fu_975_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_134_reg_1883),11));
    tmp_135_cast_fu_954_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_134_fu_948_p2),10));
    tmp_142_fu_1037_p2 <= (tmp_329_fu_1033_p1 or rectangles_array10_1_q0);
    tmp_143_fu_1085_p2 <= (tmp2_fu_1077_p3 or tmp1_fu_1051_p3);
    tmp_144_fu_1091_p2 <= "1" when (tmp_143_fu_1085_p2 = ap_const_lv5_0) else "0";
    tmp_145_fu_1097_p2 <= "1" when (rectangles_array10_1_q0 = ap_const_lv4_0) else "0";
    tmp_146_fu_1103_p2 <= "1" when (rectangles_array11_1_q0 = ap_const_lv4_0) else "0";
    tmp_147_to_int_fu_1445_p1 <= reg_686;
    tmp_149_to_int_fu_1463_p1 <= tmp_149_reg_2137;
    tmp_151_cast3_fu_1181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tr2_x_reg_1944),11));
    tmp_151_cast_fu_1155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tr2_x_reg_1944),10));
    tmp_154_fu_1131_p2 <= std_logic_vector(unsigned(tr2_width_cast7_fu_1013_p1) + unsigned(tr2_x_cast8_fu_1009_p1));
    tmp_155_cast2_fu_1194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_154_reg_1980),11));
    tmp_155_cast_fu_1168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_154_reg_1980),10));
    tmp_161_fu_1532_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(i_cast_le_fu_1528_p1));
    tmp_166_fu_1416_p2 <= "1" when (signed(final_sum_fu_1411_p2) < signed(t_cast_fu_1404_p1)) else "0";
    tmp_167_fu_1309_p2 <= std_logic_vector(unsigned(haar_counter_assign_reg_632) + unsigned(ap_const_lv13_1));
    tmp_168_fu_1063_p2 <= (tmp_331_fu_1059_p1 or rectangles_array11_1_q0);
    tmp_170_fu_1449_p4 <= tmp_147_to_int_fu_1445_p1(62 downto 52);
    tmp_172_fu_1466_p4 <= tmp_149_to_int_fu_1463_p1(62 downto 52);
    tmp_174_fu_1492_p2 <= (notrhs_fu_1486_p2 or notlhs_fu_1480_p2);
    tmp_175_fu_1510_p2 <= (notrhs2_fu_1504_p2 or notlhs1_fu_1498_p2);
    tmp_176_fu_1516_p2 <= (tmp_175_fu_1510_p2 and tmp_174_fu_1492_p2);
    tmp_178_fu_1522_p2 <= (tmp_177_fu_675_p2 and tmp_176_fu_1516_p2);
        tmp_179_fu_1441_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(stages_thresh_array_2_reg_2122),32));

    tmp_180_fu_820_p1 <= tmp_180_fu_820_p10(5 - 1 downto 0);
    tmp_180_fu_820_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rectangles_array1_1_q0),10));
    tmp_180_fu_820_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv10_19) * unsigned(tmp_180_fu_820_p1), 10));
    tmp_181_fu_841_p2 <= std_logic_vector(unsigned(tmp_180_reg_1773) + unsigned(tmp_121_cast_fu_838_p1));
    tmp_182_fu_861_p2 <= std_logic_vector(unsigned(tmp_180_reg_1773) + unsigned(tmp_125_cast_fu_857_p1));
    tmp_184_fu_885_p2 <= std_logic_vector(unsigned(tmp_183_reg_1814) + unsigned(tmp_121_cast7_fu_871_p1));
    tmp_185_fu_895_p2 <= std_logic_vector(unsigned(tmp_183_reg_1814) + unsigned(tmp_125_cast6_fu_878_p1));
    tmp_186_fu_909_p1 <= tmp_186_fu_909_p10(5 - 1 downto 0);
    tmp_186_fu_909_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rectangles_array5_1_q0),10));
    tmp_186_fu_909_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv10_19) * unsigned(tmp_186_fu_909_p1), 10));
    tmp_187_fu_938_p2 <= std_logic_vector(unsigned(tmp_186_reg_1862) + unsigned(tmp_131_cast_fu_935_p1));
    tmp_188_fu_958_p2 <= std_logic_vector(unsigned(tmp_186_reg_1862) + unsigned(tmp_135_cast_fu_954_p1));
    tmp_190_fu_982_p2 <= std_logic_vector(unsigned(tmp_189_reg_1893) + unsigned(tmp_131_cast5_fu_968_p1));
    tmp_191_fu_992_p2 <= std_logic_vector(unsigned(tmp_189_reg_1893) + unsigned(tmp_135_cast4_fu_975_p1));
    tmp_192_fu_1125_p1 <= tmp_192_fu_1125_p10(5 - 1 downto 0);
    tmp_192_fu_1125_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rectangles_array9_1_q0),10));
    tmp_192_fu_1125_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv10_19) * unsigned(tmp_192_fu_1125_p1), 10));
    tmp_193_fu_1158_p2 <= std_logic_vector(unsigned(tmp_192_reg_1974) + unsigned(tmp_151_cast_fu_1155_p1));
    tmp_194_fu_1171_p2 <= std_logic_vector(unsigned(tmp_192_reg_1974) + unsigned(tmp_155_cast_fu_1168_p1));
    tmp_196_fu_1207_p2 <= std_logic_vector(unsigned(tmp_195_reg_1996) + unsigned(tmp_151_cast3_fu_1181_p1));
    tmp_197_fu_1217_p2 <= std_logic_vector(unsigned(tmp_195_reg_1996) + unsigned(tmp_155_cast2_fu_1194_p1));
    tmp_221_cast_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_181_fu_841_p2),64));
    tmp_222_cast_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_182_fu_861_p2),64));
        tmp_224_cast_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_184_fu_885_p2),64));

        tmp_225_cast_fu_900_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_185_fu_895_p2),64));

    tmp_227_cast_fu_943_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_187_fu_938_p2),64));
    tmp_228_cast_fu_963_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_188_fu_958_p2),64));
        tmp_230_cast_fu_987_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_190_fu_982_p2),64));

        tmp_231_cast_fu_997_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_191_fu_992_p2),64));

    tmp_233_cast_fu_1163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_193_fu_1158_p2),64));
    tmp_234_cast_fu_1176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_194_fu_1171_p2),64));
        tmp_236_cast_fu_1212_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_196_fu_1207_p2),64));

        tmp_237_cast_fu_1222_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_197_fu_1217_p2),64));

    tmp_317_fu_726_p2 <= std_logic_vector(shift_left(unsigned(stddev_reg_1616),to_integer(unsigned('0' & ap_const_lv32_9(31-1 downto 0)))));
    tmp_318_fu_731_p2 <= std_logic_vector(shift_left(unsigned(stddev_reg_1616),to_integer(unsigned('0' & ap_const_lv32_6(31-1 downto 0)))));
    tmp_319_fu_1459_p1 <= tmp_147_to_int_fu_1445_p1(52 - 1 downto 0);
    tmp_320_fu_1476_p1 <= tmp_149_to_int_fu_1463_p1(52 - 1 downto 0);
    tmp_321_fu_874_p1 <= II_q0(25 - 1 downto 0);
    tmp_322_fu_881_p1 <= II_q1(25 - 1 downto 0);
    tmp_323_fu_927_p1 <= II_q0(25 - 1 downto 0);
    tmp_324_fu_931_p1 <= II_q1(25 - 1 downto 0);
    tmp_325_fu_971_p1 <= II_q0(25 - 1 downto 0);
    tmp_326_fu_978_p1 <= II_q1(25 - 1 downto 0);
    tmp_327_fu_1025_p1 <= II_q0(25 - 1 downto 0);
    tmp_328_fu_1029_p1 <= II_q1(25 - 1 downto 0);
    tmp_329_fu_1033_p1 <= rectangles_array8_1_q0(4 - 1 downto 0);
    tmp_330_fu_1043_p3 <= rectangles_array8_1_q0(4 downto 4);
    tmp_331_fu_1059_p1 <= rectangles_array9_1_q0(4 - 1 downto 0);
    tmp_332_fu_1069_p3 <= rectangles_array9_1_q0(4 downto 4);
    tmp_333_fu_1184_p1 <= II_q0(25 - 1 downto 0);
    tmp_334_fu_1197_p1 <= II_q1(25 - 1 downto 0);
    tmp_335_fu_1227_p1 <= II_q0(25 - 1 downto 0);
    tmp_336_fu_1237_p1 <= II_q1(25 - 1 downto 0);
    tmp_s_fu_692_p2 <= std_logic_vector(unsigned(SII_q0) - unsigned(SII_q1));
    tr0_width_cast_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tr0_width_reg_1758),6));
    tr0_x_cast_fu_826_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tr0_x_reg_1751),6));
    tr1_width_cast_fu_918_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tr1_width_reg_1827),6));
    tr1_x_cast_fu_915_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tr1_x_reg_1820),6));
    tr2_height_cast5_fu_1021_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rectangles_array11_1_q0),6));
    tr2_width_cast7_fu_1013_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rectangles_array10_1_q0),6));
    tr2_x_cast8_fu_1009_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rectangles_array8_1_q0),6));
    tr2_y_cast6_fu_1017_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rectangles_array9_1_q0),6));
    tree_thresh_array_address0 <= tmp_120_reg_1708(12 - 1 downto 0);

    tree_thresh_array_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            tree_thresh_array_ce0 <= ap_const_logic_1;
        else 
            tree_thresh_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_array0_address0 <= tmp_120_reg_1708(12 - 1 downto 0);

    weights_array0_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            weights_array0_ce0 <= ap_const_logic_1;
        else 
            weights_array0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_array1_address0 <= tmp_120_reg_1708(12 - 1 downto 0);

    weights_array1_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            weights_array1_ce0 <= ap_const_logic_1;
        else 
            weights_array1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_array2_address0 <= tmp_120_reg_1708(12 - 1 downto 0);

    weights_array2_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            weights_array2_ce0 <= ap_const_logic_1;
        else 
            weights_array2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
