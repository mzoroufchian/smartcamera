-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity detectFaces is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 12;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of detectFaces is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "detectFaces,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=246,HLS_SYN_DSP=70,HLS_SYN_FF=14594,HLS_SYN_LUT=27857,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (35 downto 0) := "000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (35 downto 0) := "000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (35 downto 0) := "000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (35 downto 0) := "000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (35 downto 0) := "000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (35 downto 0) := "000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (35 downto 0) := "000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (35 downto 0) := "000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (35 downto 0) := "000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (35 downto 0) := "001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (35 downto 0) := "010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (35 downto 0) := "100000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_3F8CCCCD : STD_LOGIC_VECTOR (31 downto 0) := "00111111100011001100110011001101";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_41C00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001110000000000000000000000";
    constant ap_const_lv32_3F99999A : STD_LOGIC_VECTOR (31 downto 0) := "00111111100110011001100110011010";
    constant ap_const_lv32_43A00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000011101000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_43700000 : STD_LOGIC_VECTOR (31 downto 0) := "01000011011100000000000000000000";
    constant ap_const_lv32_41C80000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001110010000000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv9_140 : STD_LOGIC_VECTOR (8 downto 0) := "101000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv64_3FE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_BFE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal inData_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal inData_ce0 : STD_LOGIC;
    signal inData_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_x_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal result_x_ce0 : STD_LOGIC;
    signal result_x_we0 : STD_LOGIC;
    signal result_y_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal result_y_ce0 : STD_LOGIC;
    signal result_y_we0 : STD_LOGIC;
    signal result_w_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal result_w_ce0 : STD_LOGIC;
    signal result_w_we0 : STD_LOGIC;
    signal result_h_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal result_h_ce0 : STD_LOGIC;
    signal result_h_we0 : STD_LOGIC;
    signal result_size_ap_vld : STD_LOGIC;
    signal finished_ap_vld : STD_LOGIC;
    signal counter : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal Data_ce0 : STD_LOGIC;
    signal Data_we0 : STD_LOGIC;
    signal Data_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal counter_load_reg_1275 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1281 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_149_fu_674_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_149_reg_1285 : STD_LOGIC_VECTOR (17 downto 0);
    signal j_2_fu_686_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_2_reg_1293 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_150_fu_701_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_150_reg_1298 : STD_LOGIC_VECTOR (17 downto 0);
    signal exitcond1_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_709_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_fu_720_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_610_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_2_reg_1321 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_fu_616_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_3_reg_1327 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_5_fu_733_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_5_reg_1333 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_V_6_fu_743_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_6_reg_1339 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_7_fu_774_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_7_reg_1344 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_8_fu_784_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_8_reg_1350 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_2_reg_1358 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_reg_1363 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_603_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal value_assign_reg_1368 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_i_fu_622_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_reg_1375 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_21_i_fu_875_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_i_reg_1380 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_636_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_1385 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal p_Val2_28_fu_976_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_28_reg_1390 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_30_fu_1077_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_30_reg_1396 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_1402 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal p_Val2_26_fu_1206_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_26_reg_1407 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_29_fu_1219_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_29_reg_1413 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_31_fu_1231_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_31_reg_1419 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_27_fu_1243_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_27_reg_1425 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_imageScaler_fu_594_ap_ready : STD_LOGIC;
    signal grp_imageScaler_fu_594_ap_done : STD_LOGIC;
    signal grp_processImage_fu_497_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_processImage_fu_497_ap_ready : STD_LOGIC;
    signal grp_processImage_fu_497_ap_done : STD_LOGIC;
    signal i_3_fu_1255_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_3_reg_1444 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal tmp_53_fu_1261_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_53_reg_1449 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_1249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_x_Scale_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal result_x_Scale_ce0 : STD_LOGIC;
    signal result_x_Scale_we0 : STD_LOGIC;
    signal result_x_Scale_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_y_Scale_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal result_y_Scale_ce0 : STD_LOGIC;
    signal result_y_Scale_we0 : STD_LOGIC;
    signal result_y_Scale_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_w_Scale_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal result_w_Scale_ce0 : STD_LOGIC;
    signal result_w_Scale_we0 : STD_LOGIC;
    signal result_w_Scale_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_h_Scale_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal result_h_Scale_ce0 : STD_LOGIC;
    signal result_h_Scale_we0 : STD_LOGIC;
    signal result_h_Scale_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal IMG1_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal IMG1_data_ce0 : STD_LOGIC;
    signal IMG1_data_we0 : STD_LOGIC;
    signal IMG1_data_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal IMG1_data_ce1 : STD_LOGIC;
    signal IMG1_data_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_processImage_fu_497_ap_start : STD_LOGIC;
    signal grp_processImage_fu_497_ap_idle : STD_LOGIC;
    signal grp_processImage_fu_497_AllCandidates_x_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_processImage_fu_497_AllCandidates_x_ce0 : STD_LOGIC;
    signal grp_processImage_fu_497_AllCandidates_x_we0 : STD_LOGIC;
    signal grp_processImage_fu_497_AllCandidates_x_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_fu_497_AllCandidates_y_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_processImage_fu_497_AllCandidates_y_ce0 : STD_LOGIC;
    signal grp_processImage_fu_497_AllCandidates_y_we0 : STD_LOGIC;
    signal grp_processImage_fu_497_AllCandidates_y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_fu_497_AllCandidates_w_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_processImage_fu_497_AllCandidates_w_ce0 : STD_LOGIC;
    signal grp_processImage_fu_497_AllCandidates_w_we0 : STD_LOGIC;
    signal grp_processImage_fu_497_AllCandidates_w_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_fu_497_AllCandidates_h_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_processImage_fu_497_AllCandidates_h_ce0 : STD_LOGIC;
    signal grp_processImage_fu_497_AllCandidates_h_we0 : STD_LOGIC;
    signal grp_processImage_fu_497_AllCandidates_h_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_fu_497_IMG1_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_processImage_fu_497_IMG1_data_ce0 : STD_LOGIC;
    signal grp_processImage_fu_497_IMG1_data_address1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_processImage_fu_497_IMG1_data_ce1 : STD_LOGIC;
    signal grp_imageScaler_fu_594_ap_start : STD_LOGIC;
    signal grp_imageScaler_fu_594_ap_idle : STD_LOGIC;
    signal grp_imageScaler_fu_594_Data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_imageScaler_fu_594_Data_ce0 : STD_LOGIC;
    signal grp_imageScaler_fu_594_IMG1_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_imageScaler_fu_594_IMG1_data_ce0 : STD_LOGIC;
    signal grp_imageScaler_fu_594_IMG1_data_we0 : STD_LOGIC;
    signal grp_imageScaler_fu_594_IMG1_data_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_reg_427 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal factor_reg_438 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_size_Scale_reg_450 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_463 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal storemerge_reg_474 : STD_LOGIC_VECTOR (7 downto 0);
    signal counter_new_reg_486 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_fu_497_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_imageScaler_fu_594_ap_start_reg : STD_LOGIC := '0';
    signal tmp_40_fu_692_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_185_cast_fu_726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal grp_fu_603_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_625_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_625_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_281_fu_650_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_282_fu_662_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl_cast_fu_654_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl2_cast_fu_666_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_40_cast_fu_697_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_283_fu_706_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_16_fu_730_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal notrhs_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_fu_759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_21_fu_771_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal notrhs1_fu_794_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_788_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_fu_765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal value_assign_to_int_fu_834_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_fu_837_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_286_fu_847_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs2_fu_857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_851_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_fu_863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_fu_869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mantissa_V_2_fu_883_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_i_i_i_i2_cast4_fu_896_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_8_fu_899_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i_i_i_fu_913_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_2_fu_905_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i_cast_fu_918_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_2_fu_922_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_10_cast_fu_930_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_10_cast_ca_fu_934_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal mantissa_V_6_cast5_fu_892_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_i_i_i_31_fu_938_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_5_fu_942_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_293_fu_954_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_6_fu_948_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_153_fu_962_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_154_fu_966_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal mantissa_V_3_fu_984_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_i_i_i_i3_cast2_fu_997_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_s_fu_1000_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i_i_i1_fu_1014_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_3_fu_1006_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i1_cast_fu_1019_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_3_fu_1023_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_13_cast_fu_1031_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_13_cast_ca_fu_1035_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal mantissa_V_8_cast3_fu_993_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_i_i_i1_32_fu_1039_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_7_fu_1043_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_296_fu_1055_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_8_fu_1049_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_155_fu_1063_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_156_fu_1067_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_1085_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_4_fu_1106_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_V_fu_1110_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_V_fu_1096_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i_i_cast6_fu_1124_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_1128_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_i_i_fu_1142_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_1134_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i_i_cast_fu_1148_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_1152_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_7_cast_fu_1160_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i_i_cast_30_fu_1168_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal mantissa_V_4_cast_fu_1120_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_i_i_i_i_29_fu_1164_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_fu_1172_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_290_fu_1184_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_4_fu_1178_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_151_fu_1192_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_152_fu_1196_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_6_fu_1214_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_8_fu_1226_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_4_fu_1238_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_603_ce : STD_LOGIC;
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_625_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (35 downto 0);

    component processImage IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        factor : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_row : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_col : IN STD_LOGIC_VECTOR (31 downto 0);
        AllCandidates_x_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        AllCandidates_x_ce0 : OUT STD_LOGIC;
        AllCandidates_x_we0 : OUT STD_LOGIC;
        AllCandidates_x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AllCandidates_y_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        AllCandidates_y_ce0 : OUT STD_LOGIC;
        AllCandidates_y_we0 : OUT STD_LOGIC;
        AllCandidates_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AllCandidates_w_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        AllCandidates_w_ce0 : OUT STD_LOGIC;
        AllCandidates_w_we0 : OUT STD_LOGIC;
        AllCandidates_w_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AllCandidates_h_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        AllCandidates_h_ce0 : OUT STD_LOGIC;
        AllCandidates_h_we0 : OUT STD_LOGIC;
        AllCandidates_h_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AllCandidates_size_r : IN STD_LOGIC_VECTOR (31 downto 0);
        IMG1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        IMG1_data_ce0 : OUT STD_LOGIC;
        IMG1_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        IMG1_data_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        IMG1_data_ce1 : OUT STD_LOGIC;
        IMG1_data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        winSize_width : IN STD_LOGIC_VECTOR (31 downto 0);
        winSize_height : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component imageScaler IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        Data_ce0 : OUT STD_LOGIC;
        Data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        dest_height : IN STD_LOGIC_VECTOR (31 downto 0);
        dest_width : IN STD_LOGIC_VECTOR (31 downto 0);
        IMG1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        IMG1_data_ce0 : OUT STD_LOGIC;
        IMG1_data_we0 : OUT STD_LOGIC;
        IMG1_data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component detectFaces_fmul_6jw IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component detectFaces_fdiv_bgk IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component detectFaces_fpext8jQ IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component detectFaces_fcmp_9j0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component detectFaces_dadd_bak IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component detectFaces_Data IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component detectFaces_resulbbk IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component detectFaces_IMG1_bfk IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component detectFaces_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        inData_address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        inData_ce0 : IN STD_LOGIC;
        inData_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        result_x_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        result_x_ce0 : IN STD_LOGIC;
        result_x_we0 : IN STD_LOGIC;
        result_x_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        result_y_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        result_y_ce0 : IN STD_LOGIC;
        result_y_we0 : IN STD_LOGIC;
        result_y_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        result_w_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        result_w_ce0 : IN STD_LOGIC;
        result_w_we0 : IN STD_LOGIC;
        result_w_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        result_h_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        result_h_ce0 : IN STD_LOGIC;
        result_h_we0 : IN STD_LOGIC;
        result_h_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        result_size : IN STD_LOGIC_VECTOR (31 downto 0);
        result_size_ap_vld : IN STD_LOGIC;
        finished : IN STD_LOGIC_VECTOR (7 downto 0);
        finished_ap_vld : IN STD_LOGIC );
    end component;



begin
    Data_U : component detectFaces_Data
    generic map (
        DataWidth => 8,
        AddressRange => 76800,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Data_address0,
        ce0 => Data_ce0,
        we0 => Data_we0,
        d0 => inData_q0,
        q0 => Data_q0);

    detectFaces_CONTROL_BUS_s_axi_U : component detectFaces_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        inData_address0 => inData_address0,
        inData_ce0 => inData_ce0,
        inData_q0 => inData_q0,
        result_x_address0 => result_x_address0,
        result_x_ce0 => result_x_ce0,
        result_x_we0 => result_x_we0,
        result_x_d0 => result_x_Scale_q0,
        result_y_address0 => result_y_address0,
        result_y_ce0 => result_y_ce0,
        result_y_we0 => result_y_we0,
        result_y_d0 => result_y_Scale_q0,
        result_w_address0 => result_w_address0,
        result_w_ce0 => result_w_ce0,
        result_w_we0 => result_w_we0,
        result_w_d0 => result_w_Scale_q0,
        result_h_address0 => result_h_address0,
        result_h_ce0 => result_h_ce0,
        result_h_we0 => result_h_we0,
        result_h_d0 => result_h_Scale_q0,
        result_size => res_size_Scale_reg_450,
        result_size_ap_vld => result_size_ap_vld,
        finished => storemerge_reg_474,
        finished_ap_vld => finished_ap_vld);

    result_x_Scale_U : component detectFaces_resulbbk
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => result_x_Scale_address0,
        ce0 => result_x_Scale_ce0,
        we0 => result_x_Scale_we0,
        d0 => grp_processImage_fu_497_AllCandidates_x_d0,
        q0 => result_x_Scale_q0);

    result_y_Scale_U : component detectFaces_resulbbk
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => result_y_Scale_address0,
        ce0 => result_y_Scale_ce0,
        we0 => result_y_Scale_we0,
        d0 => grp_processImage_fu_497_AllCandidates_y_d0,
        q0 => result_y_Scale_q0);

    result_w_Scale_U : component detectFaces_resulbbk
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => result_w_Scale_address0,
        ce0 => result_w_Scale_ce0,
        we0 => result_w_Scale_we0,
        d0 => grp_processImage_fu_497_AllCandidates_w_d0,
        q0 => result_w_Scale_q0);

    result_h_Scale_U : component detectFaces_resulbbk
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => result_h_Scale_address0,
        ce0 => result_h_Scale_ce0,
        we0 => result_h_Scale_we0,
        d0 => grp_processImage_fu_497_AllCandidates_h_d0,
        q0 => result_h_Scale_q0);

    IMG1_data_U : component detectFaces_IMG1_bfk
    generic map (
        DataWidth => 8,
        AddressRange => 76800,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => IMG1_data_address0,
        ce0 => IMG1_data_ce0,
        we0 => IMG1_data_we0,
        d0 => grp_imageScaler_fu_594_IMG1_data_d0,
        q0 => IMG1_data_q0,
        address1 => grp_processImage_fu_497_IMG1_data_address1,
        ce1 => IMG1_data_ce1,
        q1 => IMG1_data_q1);

    grp_processImage_fu_497 : component processImage
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_processImage_fu_497_ap_start,
        ap_done => grp_processImage_fu_497_ap_done,
        ap_idle => grp_processImage_fu_497_ap_idle,
        ap_ready => grp_processImage_fu_497_ap_ready,
        factor => factor_reg_438,
        sum_row => p_Val2_31_reg_1419,
        sum_col => p_Val2_29_reg_1413,
        AllCandidates_x_address0 => grp_processImage_fu_497_AllCandidates_x_address0,
        AllCandidates_x_ce0 => grp_processImage_fu_497_AllCandidates_x_ce0,
        AllCandidates_x_we0 => grp_processImage_fu_497_AllCandidates_x_we0,
        AllCandidates_x_d0 => grp_processImage_fu_497_AllCandidates_x_d0,
        AllCandidates_y_address0 => grp_processImage_fu_497_AllCandidates_y_address0,
        AllCandidates_y_ce0 => grp_processImage_fu_497_AllCandidates_y_ce0,
        AllCandidates_y_we0 => grp_processImage_fu_497_AllCandidates_y_we0,
        AllCandidates_y_d0 => grp_processImage_fu_497_AllCandidates_y_d0,
        AllCandidates_w_address0 => grp_processImage_fu_497_AllCandidates_w_address0,
        AllCandidates_w_ce0 => grp_processImage_fu_497_AllCandidates_w_ce0,
        AllCandidates_w_we0 => grp_processImage_fu_497_AllCandidates_w_we0,
        AllCandidates_w_d0 => grp_processImage_fu_497_AllCandidates_w_d0,
        AllCandidates_h_address0 => grp_processImage_fu_497_AllCandidates_h_address0,
        AllCandidates_h_ce0 => grp_processImage_fu_497_AllCandidates_h_ce0,
        AllCandidates_h_we0 => grp_processImage_fu_497_AllCandidates_h_we0,
        AllCandidates_h_d0 => grp_processImage_fu_497_AllCandidates_h_d0,
        AllCandidates_size_r => res_size_Scale_reg_450,
        IMG1_data_address0 => grp_processImage_fu_497_IMG1_data_address0,
        IMG1_data_ce0 => grp_processImage_fu_497_IMG1_data_ce0,
        IMG1_data_q0 => IMG1_data_q0,
        IMG1_data_address1 => grp_processImage_fu_497_IMG1_data_address1,
        IMG1_data_ce1 => grp_processImage_fu_497_IMG1_data_ce1,
        IMG1_data_q1 => IMG1_data_q1,
        winSize_width => p_Val2_27_reg_1425,
        winSize_height => p_Val2_27_reg_1425,
        ap_return => grp_processImage_fu_497_ap_return);

    grp_imageScaler_fu_594 : component imageScaler
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_imageScaler_fu_594_ap_start,
        ap_done => grp_imageScaler_fu_594_ap_done,
        ap_idle => grp_imageScaler_fu_594_ap_idle,
        ap_ready => grp_imageScaler_fu_594_ap_ready,
        Data_address0 => grp_imageScaler_fu_594_Data_address0,
        Data_ce0 => grp_imageScaler_fu_594_Data_ce0,
        Data_q0 => Data_q0,
        dest_height => p_Val2_31_reg_1419,
        dest_width => p_Val2_29_reg_1413,
        IMG1_data_address0 => grp_imageScaler_fu_594_IMG1_data_address0,
        IMG1_data_ce0 => grp_imageScaler_fu_594_IMG1_data_ce0,
        IMG1_data_we0 => grp_imageScaler_fu_594_IMG1_data_we0,
        IMG1_data_d0 => grp_imageScaler_fu_594_IMG1_data_d0);

    detectFaces_fmul_6jw_U92 : component detectFaces_fmul_6jw
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => factor_reg_438,
        din1 => grp_fu_603_p1,
        ce => grp_fu_603_ce,
        dout => grp_fu_603_p2);

    detectFaces_fdiv_bgk_U93 : component detectFaces_fdiv_bgk
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv32_43A00000,
        din1 => factor_reg_438,
        ce => ap_const_logic_1,
        dout => grp_fu_610_p2);

    detectFaces_fdiv_bgk_U94 : component detectFaces_fdiv_bgk
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv32_43700000,
        din1 => factor_reg_438,
        ce => ap_const_logic_1,
        dout => grp_fu_616_p2);

    detectFaces_fpext8jQ_U95 : component detectFaces_fpext8jQ
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => value_assign_reg_1368,
        dout => tmp_i_fu_622_p1);

    detectFaces_fcmp_9j0_U96 : component detectFaces_fcmp_9j0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_625_p0,
        din1 => grp_fu_625_p1,
        opcode => grp_fu_625_opcode,
        dout => grp_fu_625_p2);

    detectFaces_fcmp_9j0_U97 : component detectFaces_fcmp_9j0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => x_assign_3_reg_1327,
        din1 => ap_const_lv32_41C80000,
        opcode => ap_const_lv5_2,
        dout => tmp_50_fu_630_p2);

    detectFaces_dadd_bak_U98 : component detectFaces_dadd_bak
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_i_reg_1375,
        din1 => tmp_21_i_reg_1380,
        ce => ap_const_logic_1,
        dout => grp_fu_636_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_imageScaler_fu_594_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_imageScaler_fu_594_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    grp_imageScaler_fu_594_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_imageScaler_fu_594_ap_ready = ap_const_logic_1)) then 
                    grp_imageScaler_fu_594_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_processImage_fu_497_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_processImage_fu_497_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                    grp_processImage_fu_497_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_processImage_fu_497_ap_ready = ap_const_logic_1)) then 
                    grp_processImage_fu_497_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    counter_new_reg_486_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_39_fu_714_p2 = ap_const_lv1_1) and (exitcond1_fu_680_p2 = ap_const_lv1_1) and (tmp_reg_1281 = ap_const_lv1_1))) then 
                counter_new_reg_486 <= tmp_s_fu_709_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state34) and (exitcond_fu_1249_p2 = ap_const_lv1_1))) then 
                counter_new_reg_486 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    factor_reg_438_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_processImage_fu_497_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                factor_reg_438 <= grp_fu_603_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and ((tmp_reg_1281 = ap_const_lv1_0) or ((tmp_39_fu_714_p2 = ap_const_lv1_0) and (exitcond1_fu_680_p2 = ap_const_lv1_1))))) then 
                factor_reg_438 <= ap_const_lv32_3F8CCCCD;
            end if; 
        end if;
    end process;

    i_reg_463_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (or_cond_fu_812_p2 = ap_const_lv1_0))) then 
                i_reg_463 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                i_reg_463 <= i_3_reg_1444;
            end if; 
        end if;
    end process;

    j_reg_427_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_644_p2 = ap_const_lv1_1))) then 
                j_reg_427 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_reg_427 <= j_2_reg_1293;
            end if; 
        end if;
    end process;

    res_size_Scale_reg_450_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_processImage_fu_497_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                res_size_Scale_reg_450 <= grp_processImage_fu_497_ap_return;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and ((tmp_reg_1281 = ap_const_lv1_0) or ((tmp_39_fu_714_p2 = ap_const_lv1_0) and (exitcond1_fu_680_p2 = ap_const_lv1_1))))) then 
                res_size_Scale_reg_450 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    storemerge_reg_474_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_39_fu_714_p2 = ap_const_lv1_1) and (exitcond1_fu_680_p2 = ap_const_lv1_1) and (tmp_reg_1281 = ap_const_lv1_1))) then 
                storemerge_reg_474 <= tmp_41_fu_720_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state34) and (exitcond_fu_1249_p2 = ap_const_lv1_1))) then 
                storemerge_reg_474 <= ap_const_lv8_FF;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                counter <= counter_new_reg_486;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                counter_load_reg_1275 <= counter;
                tmp_reg_1281 <= tmp_fu_644_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                i_3_reg_1444 <= i_3_fu_1255_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_reg_1281 = ap_const_lv1_1))) then
                j_2_reg_1293 <= j_2_fu_686_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (or_cond_fu_812_p2 = ap_const_lv1_1))) then
                p_Result_2_reg_1358 <= p_Val2_16_fu_730_p1(31 downto 31);
                p_Result_3_reg_1363 <= p_Val2_21_fu_771_p1(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                p_Result_s_reg_1402 <= p_Val2_s_fu_1085_p1(63 downto 63);
                p_Val2_26_reg_1407 <= p_Val2_26_fu_1206_p3;
                p_Val2_29_reg_1413 <= p_Val2_29_fu_1219_p3;
                p_Val2_31_reg_1419 <= p_Val2_31_fu_1231_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_imageScaler_fu_594_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                p_Val2_27_reg_1425 <= p_Val2_27_fu_1243_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                p_Val2_28_reg_1390 <= p_Val2_28_fu_976_p3;
                p_Val2_30_reg_1396 <= p_Val2_30_fu_1077_p3;
                x_assign_reg_1385 <= grp_fu_636_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_644_p2 = ap_const_lv1_1))) then
                    tmp_149_reg_1285(17 downto 6) <= tmp_149_fu_674_p2(17 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_680_p2 = ap_const_lv1_0) and (tmp_reg_1281 = ap_const_lv1_1))) then
                tmp_150_reg_1298 <= tmp_150_fu_701_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                    tmp_21_i_reg_1380(63) <= tmp_21_i_fu_875_p3(63);
                tmp_i_reg_1375 <= tmp_i_fu_622_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) and (exitcond_fu_1249_p2 = ap_const_lv1_0))) then
                    tmp_53_reg_1449(6 downto 0) <= tmp_53_fu_1261_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                tmp_V_5_reg_1333 <= p_Val2_16_fu_730_p1(30 downto 23);
                tmp_V_6_reg_1339 <= tmp_V_6_fu_743_p1;
                tmp_V_7_reg_1344 <= p_Val2_21_fu_771_p1(30 downto 23);
                tmp_V_8_reg_1350 <= tmp_V_8_fu_784_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                value_assign_reg_1368 <= grp_fu_603_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                x_assign_2_reg_1321 <= grp_fu_610_p2;
                x_assign_3_reg_1327 <= grp_fu_616_p2;
            end if;
        end if;
    end process;
    tmp_149_reg_1285(5 downto 0) <= "000000";
    tmp_21_i_reg_1380(62 downto 0) <= "011111111100000000000000000000000000000000000000000000000000000";
    tmp_53_reg_1449(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_reg_1281, ap_CS_fsm_state2, exitcond1_fu_680_p2, tmp_39_fu_714_p2, ap_CS_fsm_state20, or_cond_fu_812_p2, ap_CS_fsm_state31, grp_imageScaler_fu_594_ap_done, ap_CS_fsm_state33, grp_processImage_fu_497_ap_done, ap_CS_fsm_state34, exitcond_fu_1249_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_39_fu_714_p2 = ap_const_lv1_1) and (exitcond1_fu_680_p2 = ap_const_lv1_1) and (tmp_reg_1281 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and ((tmp_reg_1281 = ap_const_lv1_0) or ((tmp_39_fu_714_p2 = ap_const_lv1_0) and (exitcond1_fu_680_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (or_cond_fu_812_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (((grp_imageScaler_fu_594_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((grp_processImage_fu_497_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state34) and (exitcond_fu_1249_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    Data_address0_assign_proc : process(ap_CS_fsm_state31, grp_imageScaler_fu_594_Data_address0, ap_CS_fsm_state3, tmp_185_cast_fu_726_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Data_address0 <= tmp_185_cast_fu_726_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            Data_address0 <= grp_imageScaler_fu_594_Data_address0;
        else 
            Data_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Data_ce0_assign_proc : process(ap_CS_fsm_state31, grp_imageScaler_fu_594_Data_ce0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            Data_ce0 <= grp_imageScaler_fu_594_Data_ce0;
        else 
            Data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Data_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Data_we0 <= ap_const_logic_1;
        else 
            Data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    IMG1_data_address0_assign_proc : process(ap_CS_fsm_state31, ap_CS_fsm_state33, grp_processImage_fu_497_IMG1_data_address0, grp_imageScaler_fu_594_IMG1_data_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            IMG1_data_address0 <= grp_imageScaler_fu_594_IMG1_data_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            IMG1_data_address0 <= grp_processImage_fu_497_IMG1_data_address0;
        else 
            IMG1_data_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    IMG1_data_ce0_assign_proc : process(ap_CS_fsm_state31, ap_CS_fsm_state33, grp_processImage_fu_497_IMG1_data_ce0, grp_imageScaler_fu_594_IMG1_data_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            IMG1_data_ce0 <= grp_imageScaler_fu_594_IMG1_data_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            IMG1_data_ce0 <= grp_processImage_fu_497_IMG1_data_ce0;
        else 
            IMG1_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    IMG1_data_ce1_assign_proc : process(ap_CS_fsm_state33, grp_processImage_fu_497_IMG1_data_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            IMG1_data_ce1 <= grp_processImage_fu_497_IMG1_data_ce1;
        else 
            IMG1_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    IMG1_data_we0_assign_proc : process(ap_CS_fsm_state31, grp_imageScaler_fu_594_IMG1_data_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            IMG1_data_we0 <= grp_imageScaler_fu_594_IMG1_data_we0;
        else 
            IMG1_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exitcond1_fu_680_p2 <= "1" when (j_reg_427 = ap_const_lv9_140) else "0";
    exitcond_fu_1249_p2 <= "1" when (i_reg_463 = ap_const_lv7_64) else "0";

    finished_ap_vld_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            finished_ap_vld <= ap_const_logic_1;
        else 
            finished_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_603_ce_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state30, ap_CS_fsm_state31, grp_imageScaler_fu_594_ap_done, ap_CS_fsm_state33, grp_processImage_fu_497_ap_done, ap_CS_fsm_state32, ap_CS_fsm_state21, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or ((grp_processImage_fu_497_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((grp_imageScaler_fu_594_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31)))) then 
            grp_fu_603_ce <= ap_const_logic_1;
        else 
            grp_fu_603_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_603_p1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_603_p1 <= ap_const_lv32_3F99999A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_603_p1 <= ap_const_lv32_41C00000;
        else 
            grp_fu_603_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_625_opcode_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_625_opcode <= ap_const_lv5_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_625_opcode <= ap_const_lv5_2;
        else 
            grp_fu_625_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_625_p0_assign_proc : process(x_assign_2_reg_1321, ap_CS_fsm_state20, value_assign_reg_1368, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_625_p0 <= value_assign_reg_1368;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_625_p0 <= x_assign_2_reg_1321;
        else 
            grp_fu_625_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_625_p1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_625_p1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_625_p1 <= ap_const_lv32_41C80000;
        else 
            grp_fu_625_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_imageScaler_fu_594_ap_start <= grp_imageScaler_fu_594_ap_start_reg;
    grp_processImage_fu_497_ap_start <= grp_processImage_fu_497_ap_start_reg;
    i_3_fu_1255_p2 <= std_logic_vector(unsigned(i_reg_463) + unsigned(ap_const_lv7_1));
    inData_address0 <= tmp_40_fu_692_p1(9 - 1 downto 0);

    inData_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            inData_ce0 <= ap_const_logic_1;
        else 
            inData_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_2_fu_905_p3 <= sh_assign_8_fu_899_p2(8 downto 8);
    isNeg_3_fu_1006_p3 <= sh_assign_s_fu_1000_p2(8 downto 8);
    isNeg_fu_1134_p3 <= sh_assign_fu_1128_p2(11 downto 11);
    j_2_fu_686_p2 <= std_logic_vector(unsigned(j_reg_427) + unsigned(ap_const_lv9_1));
    mantissa_V_2_fu_883_p4 <= ((ap_const_lv1_1 & tmp_V_6_reg_1339) & ap_const_lv1_0);
    mantissa_V_3_fu_984_p4 <= ((ap_const_lv1_1 & tmp_V_8_reg_1350) & ap_const_lv1_0);
    mantissa_V_4_cast_fu_1120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_1110_p4),137));
    mantissa_V_6_cast5_fu_892_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_2_fu_883_p4),79));
    mantissa_V_8_cast3_fu_993_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_3_fu_984_p4),79));
    mantissa_V_fu_1110_p4 <= ((ap_const_lv1_1 & tmp_V_4_fu_1106_p1) & ap_const_lv1_0);
    notlhs1_fu_788_p2 <= "0" when (tmp_V_7_fu_774_p4 = ap_const_lv8_FF) else "1";
    notlhs2_fu_851_p2 <= "0" when (tmp_52_fu_837_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_747_p2 <= "0" when (tmp_V_5_fu_733_p4 = ap_const_lv8_FF) else "1";
    notrhs1_fu_794_p2 <= "1" when (tmp_V_8_fu_784_p1 = ap_const_lv23_0) else "0";
    notrhs2_fu_857_p2 <= "1" when (tmp_286_fu_847_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_753_p2 <= "1" when (tmp_V_6_fu_743_p1 = ap_const_lv23_0) else "0";
    or_cond_fu_812_p2 <= (tmp_51_fu_806_p2 and tmp_46_fu_765_p2);
    p_Val2_16_fu_730_p1 <= x_assign_2_reg_1321;
    p_Val2_21_fu_771_p1 <= x_assign_3_reg_1327;
    p_Val2_26_fu_1206_p3 <= 
        tmp_151_fu_1192_p1 when (isNeg_fu_1134_p3(0) = '1') else 
        tmp_152_fu_1196_p4;
    p_Val2_27_fu_1243_p3 <= 
        result_V_4_fu_1238_p2 when (p_Result_s_reg_1402(0) = '1') else 
        p_Val2_26_reg_1407;
    p_Val2_28_fu_976_p3 <= 
        tmp_153_fu_962_p1 when (isNeg_2_fu_905_p3(0) = '1') else 
        tmp_154_fu_966_p4;
    p_Val2_29_fu_1219_p3 <= 
        result_V_6_fu_1214_p2 when (p_Result_2_reg_1358(0) = '1') else 
        p_Val2_28_reg_1390;
    p_Val2_30_fu_1077_p3 <= 
        tmp_155_fu_1063_p1 when (isNeg_3_fu_1006_p3(0) = '1') else 
        tmp_156_fu_1067_p4;
    p_Val2_31_fu_1231_p3 <= 
        result_V_8_fu_1226_p2 when (p_Result_3_reg_1363(0) = '1') else 
        p_Val2_30_reg_1396;
    p_Val2_s_fu_1085_p1 <= x_assign_reg_1385;
    p_shl2_cast_fu_666_p3 <= (tmp_282_fu_662_p1 & ap_const_lv6_0);
    p_shl_cast_fu_654_p3 <= (tmp_281_fu_650_p1 & ap_const_lv8_0);
    r_V_4_fu_1178_p2 <= std_logic_vector(shift_left(unsigned(mantissa_V_4_cast_fu_1120_p1),to_integer(unsigned('0' & tmp_i_i_i_i_29_fu_1164_p1(31-1 downto 0)))));
    r_V_5_fu_942_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_2_fu_883_p4),to_integer(unsigned('0' & sh_assign_10_cast_ca_fu_934_p1(25-1 downto 0)))));
    r_V_6_fu_948_p2 <= std_logic_vector(shift_left(unsigned(mantissa_V_6_cast5_fu_892_p1),to_integer(unsigned('0' & tmp_i_i_i_31_fu_938_p1(31-1 downto 0)))));
    r_V_7_fu_1043_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_3_fu_984_p4),to_integer(unsigned('0' & sh_assign_13_cast_ca_fu_1035_p1(25-1 downto 0)))));
    r_V_8_fu_1049_p2 <= std_logic_vector(shift_left(unsigned(mantissa_V_8_cast3_fu_993_p1),to_integer(unsigned('0' & tmp_i_i_i1_32_fu_1039_p1(31-1 downto 0)))));
    r_V_fu_1172_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_1110_p4),to_integer(unsigned('0' & tmp_i_i_i_i_cast_30_fu_1168_p1(31-1 downto 0)))));
    result_V_4_fu_1238_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_26_reg_1407));
    result_V_6_fu_1214_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_28_reg_1390));
    result_V_8_fu_1226_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_30_reg_1396));

    result_h_Scale_address0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state34, tmp_53_fu_1261_p1, grp_processImage_fu_497_AllCandidates_h_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            result_h_Scale_address0 <= tmp_53_fu_1261_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            result_h_Scale_address0 <= grp_processImage_fu_497_AllCandidates_h_address0;
        else 
            result_h_Scale_address0 <= "XXXXXXX";
        end if; 
    end process;


    result_h_Scale_ce0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state34, grp_processImage_fu_497_AllCandidates_h_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            result_h_Scale_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            result_h_Scale_ce0 <= grp_processImage_fu_497_AllCandidates_h_ce0;
        else 
            result_h_Scale_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_h_Scale_we0_assign_proc : process(ap_CS_fsm_state33, grp_processImage_fu_497_AllCandidates_h_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            result_h_Scale_we0 <= grp_processImage_fu_497_AllCandidates_h_we0;
        else 
            result_h_Scale_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_h_address0 <= tmp_53_reg_1449(7 - 1 downto 0);

    result_h_ce0_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            result_h_ce0 <= ap_const_logic_1;
        else 
            result_h_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_h_we0_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            result_h_we0 <= ap_const_logic_1;
        else 
            result_h_we0 <= ap_const_logic_0;
        end if; 
    end process;


    result_size_ap_vld_assign_proc : process(ap_CS_fsm_state34, exitcond_fu_1249_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) and (exitcond_fu_1249_p2 = ap_const_lv1_1))) then 
            result_size_ap_vld <= ap_const_logic_1;
        else 
            result_size_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    result_w_Scale_address0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state34, tmp_53_fu_1261_p1, grp_processImage_fu_497_AllCandidates_w_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            result_w_Scale_address0 <= tmp_53_fu_1261_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            result_w_Scale_address0 <= grp_processImage_fu_497_AllCandidates_w_address0;
        else 
            result_w_Scale_address0 <= "XXXXXXX";
        end if; 
    end process;


    result_w_Scale_ce0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state34, grp_processImage_fu_497_AllCandidates_w_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            result_w_Scale_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            result_w_Scale_ce0 <= grp_processImage_fu_497_AllCandidates_w_ce0;
        else 
            result_w_Scale_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_w_Scale_we0_assign_proc : process(ap_CS_fsm_state33, grp_processImage_fu_497_AllCandidates_w_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            result_w_Scale_we0 <= grp_processImage_fu_497_AllCandidates_w_we0;
        else 
            result_w_Scale_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_w_address0 <= tmp_53_reg_1449(7 - 1 downto 0);

    result_w_ce0_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            result_w_ce0 <= ap_const_logic_1;
        else 
            result_w_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_w_we0_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            result_w_we0 <= ap_const_logic_1;
        else 
            result_w_we0 <= ap_const_logic_0;
        end if; 
    end process;


    result_x_Scale_address0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state34, tmp_53_fu_1261_p1, grp_processImage_fu_497_AllCandidates_x_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            result_x_Scale_address0 <= tmp_53_fu_1261_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            result_x_Scale_address0 <= grp_processImage_fu_497_AllCandidates_x_address0;
        else 
            result_x_Scale_address0 <= "XXXXXXX";
        end if; 
    end process;


    result_x_Scale_ce0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state34, grp_processImage_fu_497_AllCandidates_x_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            result_x_Scale_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            result_x_Scale_ce0 <= grp_processImage_fu_497_AllCandidates_x_ce0;
        else 
            result_x_Scale_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_x_Scale_we0_assign_proc : process(ap_CS_fsm_state33, grp_processImage_fu_497_AllCandidates_x_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            result_x_Scale_we0 <= grp_processImage_fu_497_AllCandidates_x_we0;
        else 
            result_x_Scale_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_x_address0 <= tmp_53_reg_1449(7 - 1 downto 0);

    result_x_ce0_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            result_x_ce0 <= ap_const_logic_1;
        else 
            result_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_x_we0_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            result_x_we0 <= ap_const_logic_1;
        else 
            result_x_we0 <= ap_const_logic_0;
        end if; 
    end process;


    result_y_Scale_address0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state34, tmp_53_fu_1261_p1, grp_processImage_fu_497_AllCandidates_y_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            result_y_Scale_address0 <= tmp_53_fu_1261_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            result_y_Scale_address0 <= grp_processImage_fu_497_AllCandidates_y_address0;
        else 
            result_y_Scale_address0 <= "XXXXXXX";
        end if; 
    end process;


    result_y_Scale_ce0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state34, grp_processImage_fu_497_AllCandidates_y_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            result_y_Scale_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            result_y_Scale_ce0 <= grp_processImage_fu_497_AllCandidates_y_ce0;
        else 
            result_y_Scale_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_y_Scale_we0_assign_proc : process(ap_CS_fsm_state33, grp_processImage_fu_497_AllCandidates_y_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            result_y_Scale_we0 <= grp_processImage_fu_497_AllCandidates_y_we0;
        else 
            result_y_Scale_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_y_address0 <= tmp_53_reg_1449(7 - 1 downto 0);

    result_y_ce0_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            result_y_ce0 <= ap_const_logic_1;
        else 
            result_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_y_we0_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            result_y_we0 <= ap_const_logic_1;
        else 
            result_y_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sh_assign_10_cast_ca_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_2_fu_922_p3),25));

        sh_assign_10_cast_fu_930_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_2_fu_922_p3),32));

        sh_assign_13_cast_ca_fu_1035_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_3_fu_1023_p3),25));

        sh_assign_13_cast_fu_1031_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_3_fu_1023_p3),32));

        sh_assign_7_cast_fu_1160_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_1152_p3),32));

    sh_assign_8_fu_899_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i2_cast4_fu_896_p1));
    sh_assign_fu_1128_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i_i_cast6_fu_1124_p1));
    sh_assign_s_fu_1000_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i3_cast2_fu_997_p1));
    tmp_149_fu_674_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_654_p3) + unsigned(p_shl2_cast_fu_666_p3));
    tmp_150_fu_701_p2 <= std_logic_vector(unsigned(tmp_149_reg_1285) + unsigned(tmp_40_cast_fu_697_p1));
    tmp_151_fu_1192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_290_fu_1184_p3),32));
    tmp_152_fu_1196_p4 <= r_V_4_fu_1178_p2(84 downto 53);
    tmp_153_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_293_fu_954_p3),32));
    tmp_154_fu_966_p4 <= r_V_6_fu_948_p2(55 downto 24);
    tmp_155_fu_1063_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_296_fu_1055_p3),32));
    tmp_156_fu_1067_p4 <= r_V_8_fu_1049_p2(55 downto 24);
        tmp_185_cast_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_150_reg_1298),64));

    tmp_21_i_fu_875_p3 <= 
        ap_const_lv64_3FE0000000000000 when (tmp_57_fu_869_p2(0) = '1') else 
        ap_const_lv64_BFE0000000000000;
    tmp_281_fu_650_p1 <= counter(10 - 1 downto 0);
    tmp_282_fu_662_p1 <= counter(12 - 1 downto 0);
    tmp_283_fu_706_p1 <= counter_load_reg_1275(8 - 1 downto 0);
    tmp_286_fu_847_p1 <= value_assign_to_int_fu_834_p1(23 - 1 downto 0);
    tmp_290_fu_1184_p3 <= r_V_fu_1172_p2(53 downto 53);
    tmp_293_fu_954_p3 <= r_V_5_fu_942_p2(24 downto 24);
    tmp_296_fu_1055_p3 <= r_V_7_fu_1043_p2(24 downto 24);
    tmp_39_fu_714_p2 <= "1" when (signed(tmp_s_fu_709_p2) < signed(ap_const_lv32_F0)) else "0";
    tmp_40_cast_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_427),18));
    tmp_40_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_427),64));
    tmp_41_fu_720_p2 <= std_logic_vector(unsigned(tmp_283_fu_706_p1) + unsigned(ap_const_lv8_1));
    tmp_44_fu_759_p2 <= (notrhs_fu_753_p2 or notlhs_fu_747_p2);
    tmp_46_fu_765_p2 <= (tmp_44_fu_759_p2 and grp_fu_625_p2);
    tmp_49_fu_800_p2 <= (notrhs1_fu_794_p2 or notlhs1_fu_788_p2);
    tmp_51_fu_806_p2 <= (tmp_50_fu_630_p2 and tmp_49_fu_800_p2);
    tmp_52_fu_837_p4 <= value_assign_to_int_fu_834_p1(30 downto 23);
    tmp_53_fu_1261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_463),64));
    tmp_55_fu_863_p2 <= (notrhs2_fu_857_p2 or notlhs2_fu_851_p2);
    tmp_57_fu_869_p2 <= (tmp_55_fu_863_p2 and grp_fu_625_p2);
    tmp_V_4_fu_1106_p1 <= p_Val2_s_fu_1085_p1(52 - 1 downto 0);
    tmp_V_5_fu_733_p4 <= p_Val2_16_fu_730_p1(30 downto 23);
    tmp_V_6_fu_743_p1 <= p_Val2_16_fu_730_p1(23 - 1 downto 0);
    tmp_V_7_fu_774_p4 <= p_Val2_21_fu_771_p1(30 downto 23);
    tmp_V_8_fu_784_p1 <= p_Val2_21_fu_771_p1(23 - 1 downto 0);
    tmp_V_fu_1096_p4 <= p_Val2_s_fu_1085_p1(62 downto 52);
    tmp_fu_644_p2 <= "1" when (signed(counter) < signed(ap_const_lv32_F0)) else "0";
    tmp_i_i_i1_32_fu_1039_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_13_cast_fu_1031_p1),79));
        tmp_i_i_i1_cast_fu_1019_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_i_i1_fu_1014_p2),9));

    tmp_i_i_i1_fu_1014_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_7_reg_1344));
    tmp_i_i_i_31_fu_938_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_10_cast_fu_930_p1),79));
        tmp_i_i_i_cast_fu_918_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_i_i_fu_913_p2),9));

    tmp_i_i_i_fu_913_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_5_reg_1333));
    tmp_i_i_i_i2_cast4_fu_896_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_5_reg_1333),9));
    tmp_i_i_i_i3_cast2_fu_997_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_7_reg_1344),9));
    tmp_i_i_i_i_29_fu_1164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_7_cast_fu_1160_p1),137));
    tmp_i_i_i_i_cast_30_fu_1168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_7_cast_fu_1160_p1),54));
        tmp_i_i_i_i_cast_fu_1148_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_i_i_i_fu_1142_p2),12));

    tmp_i_i_i_i_fu_1142_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_V_fu_1096_p4));
    tmp_i_i_i_i_i_cast6_fu_1124_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_1096_p4),12));
    tmp_s_fu_709_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(counter_load_reg_1275));
    ush_2_fu_922_p3 <= 
        tmp_i_i_i_cast_fu_918_p1 when (isNeg_2_fu_905_p3(0) = '1') else 
        sh_assign_8_fu_899_p2;
    ush_3_fu_1023_p3 <= 
        tmp_i_i_i1_cast_fu_1019_p1 when (isNeg_3_fu_1006_p3(0) = '1') else 
        sh_assign_s_fu_1000_p2;
    ush_fu_1152_p3 <= 
        tmp_i_i_i_i_cast_fu_1148_p1 when (isNeg_fu_1134_p3(0) = '1') else 
        sh_assign_fu_1128_p2;
    value_assign_to_int_fu_834_p1 <= value_assign_reg_1368;
end behav;
