-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity processImage is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    factor : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_row : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_col : IN STD_LOGIC_VECTOR (31 downto 0);
    AllCandidates_x_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    AllCandidates_x_ce0 : OUT STD_LOGIC;
    AllCandidates_x_we0 : OUT STD_LOGIC;
    AllCandidates_x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    AllCandidates_y_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    AllCandidates_y_ce0 : OUT STD_LOGIC;
    AllCandidates_y_we0 : OUT STD_LOGIC;
    AllCandidates_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    AllCandidates_w_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    AllCandidates_w_ce0 : OUT STD_LOGIC;
    AllCandidates_w_we0 : OUT STD_LOGIC;
    AllCandidates_w_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    AllCandidates_h_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    AllCandidates_h_ce0 : OUT STD_LOGIC;
    AllCandidates_h_we0 : OUT STD_LOGIC;
    AllCandidates_h_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    AllCandidates_size_r : IN STD_LOGIC_VECTOR (31 downto 0);
    IMG1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    IMG1_data_ce0 : OUT STD_LOGIC;
    IMG1_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    IMG1_data_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    IMG1_data_ce1 : OUT STD_LOGIC;
    IMG1_data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    winSize_width : IN STD_LOGIC_VECTOR (31 downto 0);
    winSize_height : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of processImage is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (47 downto 0) := "000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (47 downto 0) := "000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (47 downto 0) := "000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (47 downto 0) := "000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (47 downto 0) := "000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (47 downto 0) := "000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (47 downto 0) := "000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (47 downto 0) := "000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (47 downto 0) := "000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (47 downto 0) := "001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (47 downto 0) := "010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (47 downto 0) := "100000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv32_FFFFFFEB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv32_FFFFFFEF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv64_3FE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_BFE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv18_5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000101";
    constant ap_const_lv18_2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_const_lv18_6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000110";
    constant ap_const_lv18_3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000011";
    constant ap_const_lv18_7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000111";
    constant ap_const_lv18_4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv18_8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_const_lv18_9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001001";
    constant ap_const_lv18_A : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001010";
    constant ap_const_lv18_B : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001011";
    constant ap_const_lv18_C : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001100";
    constant ap_const_lv18_D : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001101";
    constant ap_const_lv18_E : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001110";
    constant ap_const_lv18_F : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001111";
    constant ap_const_lv18_10 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_const_lv18_11 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010001";
    constant ap_const_lv18_12 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010010";
    constant ap_const_lv18_13 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010011";
    constant ap_const_lv18_14 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010100";
    constant ap_const_lv18_15 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010101";
    constant ap_const_lv18_16 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010110";
    constant ap_const_lv18_17 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010111";
    constant ap_const_lv18_18 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000011000";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv10_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000000101";
    constant ap_const_lv10_6 : STD_LOGIC_VECTOR (9 downto 0) := "0000000110";
    constant ap_const_lv10_7 : STD_LOGIC_VECTOR (9 downto 0) := "0000000111";
    constant ap_const_lv10_8 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_const_lv10_9 : STD_LOGIC_VECTOR (9 downto 0) := "0000001001";
    constant ap_const_lv10_A : STD_LOGIC_VECTOR (9 downto 0) := "0000001010";
    constant ap_const_lv10_B : STD_LOGIC_VECTOR (9 downto 0) := "0000001011";
    constant ap_const_lv10_C : STD_LOGIC_VECTOR (9 downto 0) := "0000001100";
    constant ap_const_lv10_D : STD_LOGIC_VECTOR (9 downto 0) := "0000001101";
    constant ap_const_lv10_E : STD_LOGIC_VECTOR (9 downto 0) := "0000001110";
    constant ap_const_lv10_F : STD_LOGIC_VECTOR (9 downto 0) := "0000001111";
    constant ap_const_lv10_10 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_const_lv10_11 : STD_LOGIC_VECTOR (9 downto 0) := "0000010001";
    constant ap_const_lv10_12 : STD_LOGIC_VECTOR (9 downto 0) := "0000010010";
    constant ap_const_lv10_13 : STD_LOGIC_VECTOR (9 downto 0) := "0000010011";
    constant ap_const_lv10_14 : STD_LOGIC_VECTOR (9 downto 0) := "0000010100";
    constant ap_const_lv10_15 : STD_LOGIC_VECTOR (9 downto 0) := "0000010101";
    constant ap_const_lv10_16 : STD_LOGIC_VECTOR (9 downto 0) := "0000010110";
    constant ap_const_lv10_17 : STD_LOGIC_VECTOR (9 downto 0) := "0000010111";
    constant ap_const_lv10_19 : STD_LOGIC_VECTOR (9 downto 0) := "0000011001";
    constant ap_const_lv10_18 : STD_LOGIC_VECTOR (9 downto 0) := "0000011000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_reg_1268 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1401_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1420 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_state47_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state48_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state50_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state51_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state52_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state53_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state54_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state55_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state56_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state57_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state58_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state59_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state60_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state61_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state62_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state63_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state64_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal tmp_12_reg_4114 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_4114_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1397_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1425 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal tmp_12_reg_4114_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1431 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal tmp_12_reg_4114_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_1436 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal reg_1441 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_1_fu_1453_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_3324 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_1529_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_reg_3329 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_107_fu_1606_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_107_reg_3337 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_22_fu_1542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_i1_fu_1656_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_i1_reg_3342 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_5_fu_1664_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_5_reg_3347 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal p_Result_1_reg_3353 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_110_fu_1676_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_110_reg_3358 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_112_fu_1694_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_112_reg_3366 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_111_fu_1683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_fu_1698_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_113_reg_3371 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_115_fu_1706_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_115_reg_3376 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_117_fu_1716_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_117_reg_3381 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_119_fu_1726_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_119_reg_3386 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_121_fu_1736_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_121_reg_3391 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_123_fu_1746_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_123_reg_3396 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_125_fu_1756_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_125_reg_3401 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_127_fu_1766_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_127_reg_3406 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_129_fu_1776_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_129_reg_3411 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_131_fu_1786_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_131_reg_3416 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_133_fu_1796_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_133_reg_3421 : STD_LOGIC_VECTOR (17 downto 0);
    signal x_fu_1802_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_3426 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_134_fu_1808_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_134_reg_3431 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_136_fu_1816_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_136_reg_3436 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_138_fu_1826_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_138_reg_3441 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_140_fu_1836_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_140_reg_3446 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_142_fu_1846_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_142_reg_3451 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_144_fu_1856_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_144_reg_3456 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_146_fu_1866_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_146_reg_3461 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_148_fu_1876_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_148_reg_3466 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_150_fu_1886_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_150_reg_3471 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_152_fu_1896_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_152_reg_3476 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_154_fu_1906_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_154_reg_3481 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_156_fu_1916_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_156_reg_3486 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_158_fu_1926_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_158_reg_3491 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_160_fu_1936_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_160_reg_3496 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_162_fu_1946_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_162_reg_3501 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_164_fu_1956_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_164_reg_3506 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_166_fu_1966_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_166_reg_3511 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_168_fu_1976_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_168_reg_3516 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_170_fu_1986_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_170_reg_3521 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_172_fu_1996_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_172_reg_3526 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_174_fu_2006_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_174_reg_3531 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_176_fu_2016_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_176_reg_3536 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_178_fu_2026_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_178_reg_3541 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_180_fu_2036_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_180_reg_3546 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_182_fu_2046_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_182_reg_3551 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_184_fu_2056_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_184_reg_3556 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_186_fu_2066_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_186_reg_3561 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_188_fu_2076_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_188_reg_3566 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_190_fu_2086_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_190_reg_3571 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_192_fu_2096_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_192_reg_3576 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_194_fu_2106_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_194_reg_3581 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_196_fu_2116_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_196_reg_3586 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_198_fu_2126_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_198_reg_3591 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_200_fu_2136_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_200_reg_3596 : STD_LOGIC_VECTOR (17 downto 0);
    signal y_fu_2142_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul_cast_fu_2148_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_mul_cast_reg_3606 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal n_1_fu_2162_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal n_1_reg_3615 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_31_fu_2204_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_31_reg_3620 : STD_LOGIC_VECTOR (17 downto 0);
    signal exitcond2_fu_2156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_2209_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_32_reg_3625 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_33_fu_2214_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_33_reg_3630 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_34_fu_2219_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_34_reg_3635 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_35_fu_2224_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_35_reg_3640 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_36_fu_2229_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_36_reg_3645 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_37_fu_2234_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_37_reg_3650 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_38_fu_2239_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_38_reg_3655 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_39_fu_2244_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_39_reg_3660 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_40_fu_2249_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_40_reg_3665 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_41_fu_2254_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_41_reg_3670 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_42_fu_2259_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_42_reg_3675 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_43_fu_2264_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_43_reg_3680 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_44_fu_2269_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_44_reg_3685 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_45_fu_2274_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_45_reg_3690 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_46_fu_2279_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_46_reg_3695 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_47_fu_2284_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_47_reg_3700 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_48_fu_2289_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_48_reg_3705 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_49_fu_2294_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_49_reg_3710 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_50_fu_2299_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_50_reg_3715 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_51_fu_2304_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_51_reg_3720 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_52_fu_2309_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_52_reg_3725 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_53_fu_2314_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_53_reg_3730 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_54_fu_2319_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_54_reg_3735 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_55_fu_2324_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_55_reg_3740 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_56_fu_2329_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_56_reg_3745 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_57_fu_2334_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_57_reg_3750 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_58_fu_2339_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_58_reg_3755 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_59_fu_2344_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_59_reg_3760 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_60_fu_2349_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_60_reg_3765 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_61_fu_2354_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_61_reg_3770 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_62_fu_2359_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_62_reg_3775 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_63_fu_2364_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_63_reg_3780 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_64_fu_2369_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_64_reg_3785 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_65_fu_2374_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_65_reg_3790 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_66_fu_2379_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_66_reg_3795 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_67_fu_2384_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_67_reg_3800 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_68_fu_2389_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_68_reg_3805 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_69_fu_2394_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_69_reg_3810 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_70_fu_2399_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_70_reg_3815 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_71_fu_2404_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_71_reg_3820 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_72_fu_2409_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_72_reg_3825 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_73_fu_2414_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_73_reg_3830 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_74_fu_2419_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_74_reg_3835 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_75_fu_2424_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_75_reg_3840 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_76_fu_2429_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_76_reg_3845 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal IMG1_data_load_6_reg_3890 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_81_cast_fu_2516_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_81_cast_reg_3905 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal next_mul_fu_2893_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal grp_cascadeClassifier_1_fu_1279_ap_return : STD_LOGIC_VECTOR (5 downto 0);
    signal result_02_reg_4095 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal grp_cascadeClassifier_1_fu_1279_ap_ready : STD_LOGIC;
    signal grp_cascadeClassifier_1_fu_1279_ap_done : STD_LOGIC;
    signal grp_cascadeClassifier_2_fu_1331_ap_ready : STD_LOGIC;
    signal grp_cascadeClassifier_2_fu_1331_ap_done : STD_LOGIC;
    signal ap_block_state46_on_subcall_done : BOOLEAN;
    signal grp_cascadeClassifier_2_fu_1331_ap_return : STD_LOGIC_VECTOR (5 downto 0);
    signal result_11_reg_4100 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond_fu_2911_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal i_1_fu_2917_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_12_fu_2933_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_4114_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_4114_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_4114_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_4114_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_4114_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_4114_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_4114_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_4114_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_4114_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_4114_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_4114_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_4114_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_4114_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_2949_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_12_fu_3068_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_12_reg_4123 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_3076_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_reg_4129 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_reg_4129_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_reg_4129_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_reg_4129_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_reg_4129_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_reg_4129_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_reg_4129_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_reg_4129_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_reg_4129_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_reg_4129_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_reg_4129_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_reg_4129_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_reg_4129_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_reg_4129_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_reg_4129_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_reg_4129_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_reg_4129_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_i_fu_3147_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_i_reg_4135 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1413_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_4140 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal p_Result_s_reg_4145 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_10_fu_3276_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_10_reg_4150 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state47 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal SUM1_data_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal SUM1_data_ce0 : STD_LOGIC;
    signal SUM1_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM1_data_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal SUM1_data_ce1 : STD_LOGIC;
    signal SUM1_data_we1 : STD_LOGIC;
    signal SUM1_data_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal SQSUM1_data_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal SQSUM1_data_ce0 : STD_LOGIC;
    signal SQSUM1_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal SQSUM1_data_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal SQSUM1_data_ce1 : STD_LOGIC;
    signal SQSUM1_data_we1 : STD_LOGIC;
    signal SQSUM1_data_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM2_data_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal SUM2_data_ce0 : STD_LOGIC;
    signal SUM2_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM2_data_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal SUM2_data_ce1 : STD_LOGIC;
    signal SUM2_data_we1 : STD_LOGIC;
    signal SUM2_data_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal SQSUM2_data_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal SQSUM2_data_ce0 : STD_LOGIC;
    signal SQSUM2_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal SQSUM2_data_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal SQSUM2_data_ce1 : STD_LOGIC;
    signal SQSUM2_data_we1 : STD_LOGIC;
    signal SQSUM2_data_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal win_data_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal win_data_1_ce0 : STD_LOGIC;
    signal win_data_1_we0 : STD_LOGIC;
    signal win_data_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal win_data_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal win_data_1_ce1 : STD_LOGIC;
    signal win_data_1_we1 : STD_LOGIC;
    signal win_data_1_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal win_data_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal win_data_2_ce0 : STD_LOGIC;
    signal win_data_2_we0 : STD_LOGIC;
    signal win_data_2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal win_data_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal win_data_2_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal win_data_2_ce1 : STD_LOGIC;
    signal win_data_2_we1 : STD_LOGIC;
    signal win_data_2_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_cascadeClassifier_1_fu_1279_ap_start : STD_LOGIC;
    signal grp_cascadeClassifier_1_fu_1279_ap_idle : STD_LOGIC;
    signal grp_cascadeClassifier_1_fu_1279_II_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_cascadeClassifier_1_fu_1279_II_ce0 : STD_LOGIC;
    signal grp_cascadeClassifier_1_fu_1279_II_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_cascadeClassifier_1_fu_1279_II_ce1 : STD_LOGIC;
    signal grp_cascadeClassifier_1_fu_1279_SII_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_cascadeClassifier_1_fu_1279_SII_ce0 : STD_LOGIC;
    signal grp_cascadeClassifier_1_fu_1279_SII_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_cascadeClassifier_1_fu_1279_SII_ce1 : STD_LOGIC;
    signal grp_cascadeClassifier_2_fu_1331_ap_start : STD_LOGIC;
    signal grp_cascadeClassifier_2_fu_1331_ap_idle : STD_LOGIC;
    signal grp_cascadeClassifier_2_fu_1331_II_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_cascadeClassifier_2_fu_1331_II_ce0 : STD_LOGIC;
    signal grp_cascadeClassifier_2_fu_1331_II_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_cascadeClassifier_2_fu_1331_II_ce1 : STD_LOGIC;
    signal grp_cascadeClassifier_2_fu_1331_SII_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_cascadeClassifier_2_fu_1331_SII_ce0 : STD_LOGIC;
    signal grp_cascadeClassifier_2_fu_1331_SII_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_cascadeClassifier_2_fu_1331_SII_ce1 : STD_LOGIC;
    signal grp_integralImages_1_fu_1383_ap_start : STD_LOGIC;
    signal grp_integralImages_1_fu_1383_ap_done : STD_LOGIC;
    signal grp_integralImages_1_fu_1383_ap_idle : STD_LOGIC;
    signal grp_integralImages_1_fu_1383_ap_ready : STD_LOGIC;
    signal grp_integralImages_1_fu_1383_Data_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_integralImages_1_fu_1383_Data_ce0 : STD_LOGIC;
    signal grp_integralImages_1_fu_1383_Sum_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_integralImages_1_fu_1383_Sum_ce0 : STD_LOGIC;
    signal grp_integralImages_1_fu_1383_Sum_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_integralImages_1_fu_1383_Sum_ce1 : STD_LOGIC;
    signal grp_integralImages_1_fu_1383_Sum_we1 : STD_LOGIC;
    signal grp_integralImages_1_fu_1383_Sum_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_integralImages_1_fu_1383_Sqsum_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_integralImages_1_fu_1383_Sqsum_ce0 : STD_LOGIC;
    signal grp_integralImages_1_fu_1383_Sqsum_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_integralImages_1_fu_1383_Sqsum_ce1 : STD_LOGIC;
    signal grp_integralImages_1_fu_1383_Sqsum_we1 : STD_LOGIC;
    signal grp_integralImages_1_fu_1383_Sqsum_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_integralImages_2_fu_1390_ap_start : STD_LOGIC;
    signal grp_integralImages_2_fu_1390_ap_done : STD_LOGIC;
    signal grp_integralImages_2_fu_1390_ap_idle : STD_LOGIC;
    signal grp_integralImages_2_fu_1390_ap_ready : STD_LOGIC;
    signal grp_integralImages_2_fu_1390_Data_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_integralImages_2_fu_1390_Data_ce0 : STD_LOGIC;
    signal grp_integralImages_2_fu_1390_Sum_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_integralImages_2_fu_1390_Sum_ce0 : STD_LOGIC;
    signal grp_integralImages_2_fu_1390_Sum_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_integralImages_2_fu_1390_Sum_ce1 : STD_LOGIC;
    signal grp_integralImages_2_fu_1390_Sum_we1 : STD_LOGIC;
    signal grp_integralImages_2_fu_1390_Sum_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_integralImages_2_fu_1390_Sqsum_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_integralImages_2_fu_1390_Sqsum_ce0 : STD_LOGIC;
    signal grp_integralImages_2_fu_1390_Sqsum_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_integralImages_2_fu_1390_Sqsum_ce1 : STD_LOGIC;
    signal grp_integralImages_2_fu_1390_Sqsum_we1 : STD_LOGIC;
    signal grp_integralImages_2_fu_1390_Sqsum_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_y_reg_1221 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_x_reg_1233 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal n_reg_1245 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_1256 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_cascadeClassifier_1_fu_1279_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_cascadeClassifier_2_fu_1331_ap_start_reg : STD_LOGIC := '0';
    signal grp_integralImages_1_fu_1383_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal grp_integralImages_2_fu_1390_ap_start_reg : STD_LOGIC := '0';
    signal tmp_31_cast_fu_2434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_cast_fu_2438_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_cast_fu_2442_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_cast_fu_2446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_cast_fu_2450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_cast_fu_2454_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_78_cast_fu_2464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_37_cast_fu_2470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_cast_fu_2474_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_79_cast_fu_2484_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_39_cast_fu_2490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_cast_fu_2494_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_80_cast_fu_2504_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_41_cast_fu_2521_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_42_cast_fu_2525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_82_cast_fu_2535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_cast_fu_2541_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_cast_fu_2545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_83_cast_fu_2555_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_cast_fu_2561_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_cast_fu_2565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_84_cast_fu_2575_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_85_cast_fu_2587_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_cast_fu_2593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_48_cast_fu_2597_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_86_cast_fu_2607_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_49_cast_fu_2613_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_cast_fu_2617_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_87_cast_fu_2627_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_51_cast_fu_2633_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_52_cast_fu_2637_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_88_cast_fu_2647_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_53_cast_fu_2653_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_54_cast_fu_2657_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_89_cast_fu_2667_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_55_cast_fu_2673_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_56_cast_fu_2677_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_90_cast_fu_2687_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_57_cast_fu_2693_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_cast_fu_2697_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_91_cast_fu_2707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_cast_fu_2713_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_60_cast_fu_2717_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_92_cast_fu_2727_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_61_cast_fu_2733_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_62_cast_fu_2737_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_93_cast_fu_2747_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_63_cast_fu_2753_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_cast_fu_2757_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_94_cast_fu_2767_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_65_cast_fu_2773_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_cast_fu_2777_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_95_cast_fu_2787_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_67_cast_fu_2793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_68_cast_fu_2797_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_96_cast_fu_2807_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_69_cast_fu_2813_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_70_cast_fu_2817_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_97_cast_fu_2827_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_71_cast_fu_2833_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_72_cast_fu_2837_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_98_cast_fu_2847_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_73_cast_fu_2853_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_74_cast_fu_2857_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_99_cast_fu_2867_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_75_cast_fu_2873_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_76_cast_fu_2877_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_100_cast_fu_2887_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_101_cast_fu_2905_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal AllCandidates_size_fu_354 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_3082_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_1401_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_fu_1447_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_op_op_fu_1467_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_fu_1481_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_fu_1487_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_5_fu_1473_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_fu_1497_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_7_fu_1503_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_2_fu_1459_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_1513_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_14_fu_1521_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_1_op_op_fu_1554_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg1_fu_1567_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr1_fu_1572_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_102_fu_1559_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t1_fu_1582_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_103_fu_1588_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_77_fu_1547_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_106_fu_1598_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal value_assign_1_to_in_fu_1614_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1618_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_fu_1628_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_1638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_1632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_1644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_1650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_1688_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_114_fu_1702_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_116_fu_1712_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_118_fu_1722_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_120_fu_1732_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_122_fu_1742_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_124_fu_1752_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_126_fu_1762_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_128_fu_1772_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_130_fu_1782_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_132_fu_1792_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_135_fu_1812_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_137_fu_1822_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_139_fu_1832_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_141_fu_1842_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_143_fu_1852_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_145_fu_1862_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_147_fu_1872_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_149_fu_1882_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_151_fu_1892_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_153_fu_1902_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_155_fu_1912_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_157_fu_1922_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_159_fu_1932_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_161_fu_1942_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_163_fu_1952_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_165_fu_1962_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_167_fu_1972_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_169_fu_1982_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_171_fu_1992_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_173_fu_2002_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_175_fu_2012_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_177_fu_2022_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_179_fu_2032_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_181_fu_2042_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_183_fu_2052_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_185_fu_2062_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_187_fu_2072_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_189_fu_2082_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_191_fu_2092_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_193_fu_2102_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_195_fu_2112_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_197_fu_2122_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_199_fu_2132_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal n_cast4_fu_2152_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_2168_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_201_fu_2174_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_202_fu_2186_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl_cast_fu_2178_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl3_cast_fu_2190_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_30_fu_2198_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_78_fu_2458_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_79_fu_2478_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_80_fu_2498_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_81_fu_2510_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_82_fu_2529_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_83_fu_2549_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_84_fu_2569_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_85_fu_2581_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_86_fu_2601_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_87_fu_2621_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_88_fu_2641_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_89_fu_2661_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_90_fu_2681_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_91_fu_2701_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_92_fu_2721_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_93_fu_2741_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_94_fu_2761_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_95_fu_2781_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_96_fu_2801_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_97_fu_2821_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_98_fu_2841_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_99_fu_2861_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_100_fu_2881_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_101_fu_2899_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_203_fu_2923_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_load_phi_fu_2927_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_24_fu_2939_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_V_3_fu_2969_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_V_1_fu_2972_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_V_2_fu_2960_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i_i1_cast1_fu_2986_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_3_fu_2990_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_i_i1_fu_3004_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_1_fu_2996_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i_i1_cast_fu_3010_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_1_fu_3014_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_5_cast_fu_3022_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i_i1_cast_15_fu_3030_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal mantissa_V_3_cast_fu_2982_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_i_i_i_i1_14_fu_3026_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_2_fu_3034_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_211_fu_3046_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_3_fu_3040_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_108_fu_3054_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_fu_3058_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_3076_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_3082_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_3_fu_3093_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal value_assign_to_int_fu_3105_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_3109_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_204_fu_3119_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs8_fu_3129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs7_fu_3123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_3135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_3141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_3155_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_1_fu_3176_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_V_fu_3180_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_V_fu_3166_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i_i_cast2_fu_3194_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_3198_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_i_i_fu_3212_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_3204_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i_i_cast_fu_3218_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_3222_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_2_cast_fu_3230_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i_i_cast_13_fu_3238_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal mantissa_V_1_cast_fu_3190_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_i_i_i_i_12_fu_3234_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_fu_3242_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_208_fu_3254_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_3248_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_104_fu_3262_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_105_fu_3266_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_1_fu_3284_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_block_state44_on_subcall_done : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component cascadeClassifier_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        II_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        II_ce0 : OUT STD_LOGIC;
        II_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        II_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        II_ce1 : OUT STD_LOGIC;
        II_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        SII_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        SII_ce0 : OUT STD_LOGIC;
        SII_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        SII_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        SII_ce1 : OUT STD_LOGIC;
        SII_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component cascadeClassifier_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        II_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        II_ce0 : OUT STD_LOGIC;
        II_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        II_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        II_ce1 : OUT STD_LOGIC;
        II_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        SII_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        SII_ce0 : OUT STD_LOGIC;
        SII_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        SII_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        SII_ce1 : OUT STD_LOGIC;
        SII_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component integralImages_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Data_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Data_ce0 : OUT STD_LOGIC;
        Data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        Sum_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Sum_ce0 : OUT STD_LOGIC;
        Sum_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Sum_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Sum_ce1 : OUT STD_LOGIC;
        Sum_we1 : OUT STD_LOGIC;
        Sum_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Sqsum_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Sqsum_ce0 : OUT STD_LOGIC;
        Sqsum_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Sqsum_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Sqsum_ce1 : OUT STD_LOGIC;
        Sqsum_we1 : OUT STD_LOGIC;
        Sqsum_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component integralImages_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Data_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Data_ce0 : OUT STD_LOGIC;
        Data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        Sum_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Sum_ce0 : OUT STD_LOGIC;
        Sum_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Sum_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Sum_ce1 : OUT STD_LOGIC;
        Sum_we1 : OUT STD_LOGIC;
        Sum_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Sqsum_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Sqsum_ce0 : OUT STD_LOGIC;
        Sqsum_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Sqsum_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Sqsum_ce1 : OUT STD_LOGIC;
        Sqsum_we1 : OUT STD_LOGIC;
        Sqsum_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component detectFaces_fmul_6jw IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component detectFaces_sitof7jG IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component detectFaces_fpext8jQ IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component detectFaces_fcmp_9j0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component detectFaces_dadd_bak IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component processImage_SUM10iy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component processImage_win_4jc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    SUM1_data_U : component processImage_SUM10iy
    generic map (
        DataWidth => 32,
        AddressRange => 625,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SUM1_data_address0,
        ce0 => SUM1_data_ce0,
        q0 => SUM1_data_q0,
        address1 => SUM1_data_address1,
        ce1 => SUM1_data_ce1,
        we1 => SUM1_data_we1,
        d1 => grp_integralImages_1_fu_1383_Sum_d1,
        q1 => SUM1_data_q1);

    SQSUM1_data_U : component processImage_SUM10iy
    generic map (
        DataWidth => 32,
        AddressRange => 625,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SQSUM1_data_address0,
        ce0 => SQSUM1_data_ce0,
        q0 => SQSUM1_data_q0,
        address1 => SQSUM1_data_address1,
        ce1 => SQSUM1_data_ce1,
        we1 => SQSUM1_data_we1,
        d1 => grp_integralImages_1_fu_1383_Sqsum_d1,
        q1 => SQSUM1_data_q1);

    SUM2_data_U : component processImage_SUM10iy
    generic map (
        DataWidth => 32,
        AddressRange => 625,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SUM2_data_address0,
        ce0 => SUM2_data_ce0,
        q0 => SUM2_data_q0,
        address1 => SUM2_data_address1,
        ce1 => SUM2_data_ce1,
        we1 => SUM2_data_we1,
        d1 => grp_integralImages_2_fu_1390_Sum_d1,
        q1 => SUM2_data_q1);

    SQSUM2_data_U : component processImage_SUM10iy
    generic map (
        DataWidth => 32,
        AddressRange => 625,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SQSUM2_data_address0,
        ce0 => SQSUM2_data_ce0,
        q0 => SQSUM2_data_q0,
        address1 => SQSUM2_data_address1,
        ce1 => SQSUM2_data_ce1,
        we1 => SQSUM2_data_we1,
        d1 => grp_integralImages_2_fu_1390_Sqsum_d1,
        q1 => SQSUM2_data_q1);

    win_data_1_U : component processImage_win_4jc
    generic map (
        DataWidth => 8,
        AddressRange => 625,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => win_data_1_address0,
        ce0 => win_data_1_ce0,
        we0 => win_data_1_we0,
        d0 => IMG1_data_q0,
        q0 => win_data_1_q0,
        address1 => win_data_1_address1,
        ce1 => win_data_1_ce1,
        we1 => win_data_1_we1,
        d1 => win_data_1_d1);

    win_data_2_U : component processImage_win_4jc
    generic map (
        DataWidth => 8,
        AddressRange => 625,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => win_data_2_address0,
        ce0 => win_data_2_ce0,
        we0 => win_data_2_we0,
        d0 => win_data_2_d0,
        q0 => win_data_2_q0,
        address1 => win_data_2_address1,
        ce1 => win_data_2_ce1,
        we1 => win_data_2_we1,
        d1 => win_data_2_d1);

    grp_cascadeClassifier_1_fu_1279 : component cascadeClassifier_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_cascadeClassifier_1_fu_1279_ap_start,
        ap_done => grp_cascadeClassifier_1_fu_1279_ap_done,
        ap_idle => grp_cascadeClassifier_1_fu_1279_ap_idle,
        ap_ready => grp_cascadeClassifier_1_fu_1279_ap_ready,
        II_address0 => grp_cascadeClassifier_1_fu_1279_II_address0,
        II_ce0 => grp_cascadeClassifier_1_fu_1279_II_ce0,
        II_q0 => SUM1_data_q0,
        II_address1 => grp_cascadeClassifier_1_fu_1279_II_address1,
        II_ce1 => grp_cascadeClassifier_1_fu_1279_II_ce1,
        II_q1 => SUM1_data_q1,
        SII_address0 => grp_cascadeClassifier_1_fu_1279_SII_address0,
        SII_ce0 => grp_cascadeClassifier_1_fu_1279_SII_ce0,
        SII_q0 => SQSUM1_data_q0,
        SII_address1 => grp_cascadeClassifier_1_fu_1279_SII_address1,
        SII_ce1 => grp_cascadeClassifier_1_fu_1279_SII_ce1,
        SII_q1 => SQSUM1_data_q1,
        ap_return => grp_cascadeClassifier_1_fu_1279_ap_return);

    grp_cascadeClassifier_2_fu_1331 : component cascadeClassifier_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_cascadeClassifier_2_fu_1331_ap_start,
        ap_done => grp_cascadeClassifier_2_fu_1331_ap_done,
        ap_idle => grp_cascadeClassifier_2_fu_1331_ap_idle,
        ap_ready => grp_cascadeClassifier_2_fu_1331_ap_ready,
        II_address0 => grp_cascadeClassifier_2_fu_1331_II_address0,
        II_ce0 => grp_cascadeClassifier_2_fu_1331_II_ce0,
        II_q0 => SUM2_data_q0,
        II_address1 => grp_cascadeClassifier_2_fu_1331_II_address1,
        II_ce1 => grp_cascadeClassifier_2_fu_1331_II_ce1,
        II_q1 => SUM2_data_q1,
        SII_address0 => grp_cascadeClassifier_2_fu_1331_SII_address0,
        SII_ce0 => grp_cascadeClassifier_2_fu_1331_SII_ce0,
        SII_q0 => SQSUM2_data_q0,
        SII_address1 => grp_cascadeClassifier_2_fu_1331_SII_address1,
        SII_ce1 => grp_cascadeClassifier_2_fu_1331_SII_ce1,
        SII_q1 => SQSUM2_data_q1,
        ap_return => grp_cascadeClassifier_2_fu_1331_ap_return);

    grp_integralImages_1_fu_1383 : component integralImages_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_integralImages_1_fu_1383_ap_start,
        ap_done => grp_integralImages_1_fu_1383_ap_done,
        ap_idle => grp_integralImages_1_fu_1383_ap_idle,
        ap_ready => grp_integralImages_1_fu_1383_ap_ready,
        Data_address0 => grp_integralImages_1_fu_1383_Data_address0,
        Data_ce0 => grp_integralImages_1_fu_1383_Data_ce0,
        Data_q0 => win_data_1_q0,
        Sum_address0 => grp_integralImages_1_fu_1383_Sum_address0,
        Sum_ce0 => grp_integralImages_1_fu_1383_Sum_ce0,
        Sum_q0 => SUM1_data_q0,
        Sum_address1 => grp_integralImages_1_fu_1383_Sum_address1,
        Sum_ce1 => grp_integralImages_1_fu_1383_Sum_ce1,
        Sum_we1 => grp_integralImages_1_fu_1383_Sum_we1,
        Sum_d1 => grp_integralImages_1_fu_1383_Sum_d1,
        Sqsum_address0 => grp_integralImages_1_fu_1383_Sqsum_address0,
        Sqsum_ce0 => grp_integralImages_1_fu_1383_Sqsum_ce0,
        Sqsum_q0 => SQSUM1_data_q0,
        Sqsum_address1 => grp_integralImages_1_fu_1383_Sqsum_address1,
        Sqsum_ce1 => grp_integralImages_1_fu_1383_Sqsum_ce1,
        Sqsum_we1 => grp_integralImages_1_fu_1383_Sqsum_we1,
        Sqsum_d1 => grp_integralImages_1_fu_1383_Sqsum_d1);

    grp_integralImages_2_fu_1390 : component integralImages_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_integralImages_2_fu_1390_ap_start,
        ap_done => grp_integralImages_2_fu_1390_ap_done,
        ap_idle => grp_integralImages_2_fu_1390_ap_idle,
        ap_ready => grp_integralImages_2_fu_1390_ap_ready,
        Data_address0 => grp_integralImages_2_fu_1390_Data_address0,
        Data_ce0 => grp_integralImages_2_fu_1390_Data_ce0,
        Data_q0 => win_data_2_q0,
        Sum_address0 => grp_integralImages_2_fu_1390_Sum_address0,
        Sum_ce0 => grp_integralImages_2_fu_1390_Sum_ce0,
        Sum_q0 => SUM2_data_q0,
        Sum_address1 => grp_integralImages_2_fu_1390_Sum_address1,
        Sum_ce1 => grp_integralImages_2_fu_1390_Sum_ce1,
        Sum_we1 => grp_integralImages_2_fu_1390_Sum_we1,
        Sum_d1 => grp_integralImages_2_fu_1390_Sum_d1,
        Sqsum_address0 => grp_integralImages_2_fu_1390_Sqsum_address0,
        Sqsum_ce0 => grp_integralImages_2_fu_1390_Sqsum_ce0,
        Sqsum_q0 => SQSUM2_data_q0,
        Sqsum_address1 => grp_integralImages_2_fu_1390_Sqsum_address1,
        Sqsum_ce1 => grp_integralImages_2_fu_1390_Sqsum_ce1,
        Sqsum_we1 => grp_integralImages_2_fu_1390_Sqsum_we1,
        Sqsum_d1 => grp_integralImages_2_fu_1390_Sqsum_d1);

    detectFaces_fmul_6jw_U69 : component detectFaces_fmul_6jw
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_1420,
        din1 => factor,
        ce => ap_const_logic_1,
        dout => grp_fu_1397_p2);

    detectFaces_sitof7jG_U70 : component detectFaces_sitof7jG
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1401_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_1401_p1);

    detectFaces_fpext8jQ_U71 : component detectFaces_fpext8jQ
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => reg_1425,
        dout => grp_fu_1405_p1);

    detectFaces_fcmp_9j0_U72 : component detectFaces_fcmp_9j0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_1425,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_3,
        dout => grp_fu_1408_p2);

    detectFaces_dadd_bak_U73 : component detectFaces_dadd_bak
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_1431,
        din1 => grp_fu_1413_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1413_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state47) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state46_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state47)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state47);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                elsif (((ap_const_boolean_0 = ap_block_state46_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                    ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_cascadeClassifier_1_fu_1279_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_cascadeClassifier_1_fu_1279_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                    grp_cascadeClassifier_1_fu_1279_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_cascadeClassifier_1_fu_1279_ap_ready = ap_const_logic_1)) then 
                    grp_cascadeClassifier_1_fu_1279_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_cascadeClassifier_2_fu_1331_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_cascadeClassifier_2_fu_1331_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                    grp_cascadeClassifier_2_fu_1331_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_cascadeClassifier_2_fu_1331_ap_ready = ap_const_logic_1)) then 
                    grp_cascadeClassifier_2_fu_1331_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_integralImages_1_fu_1383_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_integralImages_1_fu_1383_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (exitcond2_fu_2156_p2 = ap_const_lv1_1))) then 
                    grp_integralImages_1_fu_1383_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_integralImages_1_fu_1383_ap_ready = ap_const_logic_1)) then 
                    grp_integralImages_1_fu_1383_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_integralImages_2_fu_1390_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_integralImages_2_fu_1390_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (exitcond2_fu_2156_p2 = ap_const_lv1_1))) then 
                    grp_integralImages_2_fu_1390_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_integralImages_2_fu_1390_ap_ready = ap_const_logic_1)) then 
                    grp_integralImages_2_fu_1390_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    AllCandidates_size_fu_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_2911_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_12_fu_2933_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                AllCandidates_size_fu_354 <= tmp_20_fu_3082_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                AllCandidates_size_fu_354 <= AllCandidates_size_r;
            end if; 
        end if;
    end process;

    i_reg_1268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_2911_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_1268 <= i_1_fu_2917_p2;
            elsif (((ap_const_boolean_0 = ap_block_state46_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                i_reg_1268 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_1245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                n_reg_1245 <= n_1_reg_3615;
            elsif (((tmp_111_fu_1683_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                n_reg_1245 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_x_reg_1233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
                p_x_reg_1233 <= x_reg_3426;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                p_x_reg_1233 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_y_reg_1221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (tmp_111_fu_1683_p2 = ap_const_lv1_1))) then 
                p_y_reg_1221 <= y_fu_2142_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_y_reg_1221 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_1256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                phi_mul_reg_1256 <= next_mul_fu_2893_p2;
            elsif (((tmp_111_fu_1683_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                phi_mul_reg_1256 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                IMG1_data_load_6_reg_3890 <= IMG1_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                n_1_reg_3615 <= n_1_fu_2162_p2;
                    phi_mul_cast_reg_3606(9 downto 0) <= phi_mul_cast_fu_2148_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                p_Result_1_reg_3353 <= p_Val2_5_fu_1664_p1(63 downto 63);
                p_Val2_5_reg_3347 <= p_Val2_5_fu_1664_p1;
                    tmp_110_reg_3358(31 downto 3) <= tmp_110_fu_1676_p3(31 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_12_reg_4114_pp0_iter15_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Result_s_reg_4145 <= p_Val2_s_fu_3155_p1(63 downto 63);
                p_Val2_10_reg_4150 <= p_Val2_10_fu_3276_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_2911_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_12_fu_2933_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Val2_12_reg_4123 <= p_Val2_12_fu_3068_p3;
                tmp_19_reg_4129 <= tmp_19_fu_3076_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (tmp_12_reg_4114_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_1420 <= grp_fu_1401_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (tmp_12_reg_4114_pp0_iter8_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_1425 <= grp_fu_1397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (tmp_12_reg_4114_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_1431 <= grp_fu_1405_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state21))) then
                reg_1436 <= IMG1_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state22))) then
                reg_1441 <= IMG1_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state46_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                result_02_reg_4095 <= grp_cascadeClassifier_1_fu_1279_ap_return;
                result_11_reg_4100 <= grp_cascadeClassifier_2_fu_1331_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_22_fu_1542_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_107_reg_3337 <= tmp_107_fu_1606_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_111_fu_1683_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                tmp_112_reg_3366 <= tmp_112_fu_1694_p1;
                    tmp_113_reg_3371(1 downto 0) <= tmp_113_fu_1698_p1(1 downto 0);    tmp_113_reg_3371(17 downto 3) <= tmp_113_fu_1698_p1(17 downto 3);
                    tmp_115_reg_3376(17 downto 1) <= tmp_115_fu_1706_p2(17 downto 1);
                    tmp_117_reg_3381(1) <= tmp_117_fu_1716_p2(1);    tmp_117_reg_3381(17 downto 3) <= tmp_117_fu_1716_p2(17 downto 3);
                    tmp_119_reg_3386(0) <= tmp_119_fu_1726_p2(0);    tmp_119_reg_3386(17 downto 2) <= tmp_119_fu_1726_p2(17 downto 2);
                    tmp_121_reg_3391(0) <= tmp_121_fu_1736_p2(0);    tmp_121_reg_3391(17 downto 3) <= tmp_121_fu_1736_p2(17 downto 3);
                    tmp_123_reg_3396(17 downto 2) <= tmp_123_fu_1746_p2(17 downto 2);
                    tmp_125_reg_3401(17 downto 3) <= tmp_125_fu_1756_p2(17 downto 3);
                tmp_127_reg_3406 <= tmp_127_fu_1766_p2;
                tmp_129_reg_3411 <= tmp_129_fu_1776_p2;
                tmp_131_reg_3416 <= tmp_131_fu_1786_p2;
                tmp_133_reg_3421 <= tmp_133_fu_1796_p2;
                tmp_134_reg_3431 <= tmp_134_fu_1808_p1;
                tmp_136_reg_3436 <= tmp_136_fu_1816_p2;
                tmp_138_reg_3441 <= tmp_138_fu_1826_p2;
                tmp_140_reg_3446 <= tmp_140_fu_1836_p2;
                tmp_142_reg_3451 <= tmp_142_fu_1846_p2;
                tmp_144_reg_3456 <= tmp_144_fu_1856_p2;
                tmp_146_reg_3461 <= tmp_146_fu_1866_p2;
                tmp_148_reg_3466 <= tmp_148_fu_1876_p2;
                tmp_150_reg_3471 <= tmp_150_fu_1886_p2;
                tmp_152_reg_3476 <= tmp_152_fu_1896_p2;
                tmp_154_reg_3481 <= tmp_154_fu_1906_p2;
                tmp_156_reg_3486 <= tmp_156_fu_1916_p2;
                tmp_158_reg_3491 <= tmp_158_fu_1926_p2;
                tmp_160_reg_3496 <= tmp_160_fu_1936_p2;
                tmp_162_reg_3501 <= tmp_162_fu_1946_p2;
                tmp_164_reg_3506 <= tmp_164_fu_1956_p2;
                tmp_166_reg_3511 <= tmp_166_fu_1966_p2;
                tmp_168_reg_3516 <= tmp_168_fu_1976_p2;
                tmp_170_reg_3521 <= tmp_170_fu_1986_p2;
                tmp_172_reg_3526 <= tmp_172_fu_1996_p2;
                tmp_174_reg_3531 <= tmp_174_fu_2006_p2;
                tmp_176_reg_3536 <= tmp_176_fu_2016_p2;
                tmp_178_reg_3541 <= tmp_178_fu_2026_p2;
                tmp_180_reg_3546 <= tmp_180_fu_2036_p2;
                tmp_182_reg_3551 <= tmp_182_fu_2046_p2;
                tmp_184_reg_3556 <= tmp_184_fu_2056_p2;
                tmp_186_reg_3561 <= tmp_186_fu_2066_p2;
                tmp_188_reg_3566 <= tmp_188_fu_2076_p2;
                tmp_190_reg_3571 <= tmp_190_fu_2086_p2;
                tmp_192_reg_3576 <= tmp_192_fu_2096_p2;
                tmp_194_reg_3581 <= tmp_194_fu_2106_p2;
                tmp_196_reg_3586 <= tmp_196_fu_2116_p2;
                tmp_198_reg_3591 <= tmp_198_fu_2126_p2;
                tmp_200_reg_3596 <= tmp_200_fu_2136_p2;
                x_reg_3426 <= x_fu_1802_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_2911_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_12_reg_4114 <= tmp_12_fu_2933_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                tmp_12_reg_4114_pp0_iter10_reg <= tmp_12_reg_4114_pp0_iter9_reg;
                tmp_12_reg_4114_pp0_iter11_reg <= tmp_12_reg_4114_pp0_iter10_reg;
                tmp_12_reg_4114_pp0_iter12_reg <= tmp_12_reg_4114_pp0_iter11_reg;
                tmp_12_reg_4114_pp0_iter13_reg <= tmp_12_reg_4114_pp0_iter12_reg;
                tmp_12_reg_4114_pp0_iter14_reg <= tmp_12_reg_4114_pp0_iter13_reg;
                tmp_12_reg_4114_pp0_iter15_reg <= tmp_12_reg_4114_pp0_iter14_reg;
                tmp_12_reg_4114_pp0_iter16_reg <= tmp_12_reg_4114_pp0_iter15_reg;
                tmp_12_reg_4114_pp0_iter2_reg <= tmp_12_reg_4114_pp0_iter1_reg;
                tmp_12_reg_4114_pp0_iter3_reg <= tmp_12_reg_4114_pp0_iter2_reg;
                tmp_12_reg_4114_pp0_iter4_reg <= tmp_12_reg_4114_pp0_iter3_reg;
                tmp_12_reg_4114_pp0_iter5_reg <= tmp_12_reg_4114_pp0_iter4_reg;
                tmp_12_reg_4114_pp0_iter6_reg <= tmp_12_reg_4114_pp0_iter5_reg;
                tmp_12_reg_4114_pp0_iter7_reg <= tmp_12_reg_4114_pp0_iter6_reg;
                tmp_12_reg_4114_pp0_iter8_reg <= tmp_12_reg_4114_pp0_iter7_reg;
                tmp_12_reg_4114_pp0_iter9_reg <= tmp_12_reg_4114_pp0_iter8_reg;
                tmp_19_reg_4129_pp0_iter10_reg <= tmp_19_reg_4129_pp0_iter9_reg;
                tmp_19_reg_4129_pp0_iter11_reg <= tmp_19_reg_4129_pp0_iter10_reg;
                tmp_19_reg_4129_pp0_iter12_reg <= tmp_19_reg_4129_pp0_iter11_reg;
                tmp_19_reg_4129_pp0_iter13_reg <= tmp_19_reg_4129_pp0_iter12_reg;
                tmp_19_reg_4129_pp0_iter14_reg <= tmp_19_reg_4129_pp0_iter13_reg;
                tmp_19_reg_4129_pp0_iter15_reg <= tmp_19_reg_4129_pp0_iter14_reg;
                tmp_19_reg_4129_pp0_iter16_reg <= tmp_19_reg_4129_pp0_iter15_reg;
                tmp_19_reg_4129_pp0_iter2_reg <= tmp_19_reg_4129_pp0_iter1_reg;
                tmp_19_reg_4129_pp0_iter3_reg <= tmp_19_reg_4129_pp0_iter2_reg;
                tmp_19_reg_4129_pp0_iter4_reg <= tmp_19_reg_4129_pp0_iter3_reg;
                tmp_19_reg_4129_pp0_iter5_reg <= tmp_19_reg_4129_pp0_iter4_reg;
                tmp_19_reg_4129_pp0_iter6_reg <= tmp_19_reg_4129_pp0_iter5_reg;
                tmp_19_reg_4129_pp0_iter7_reg <= tmp_19_reg_4129_pp0_iter6_reg;
                tmp_19_reg_4129_pp0_iter8_reg <= tmp_19_reg_4129_pp0_iter7_reg;
                tmp_19_reg_4129_pp0_iter9_reg <= tmp_19_reg_4129_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_12_reg_4114_pp0_iter1_reg <= tmp_12_reg_4114;
                tmp_19_reg_4129_pp0_iter1_reg <= tmp_19_reg_4129;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    tmp_17_reg_3329(31 downto 2) <= tmp_17_fu_1529_p3(31 downto 2);
                tmp_1_reg_3324 <= tmp_1_fu_1453_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                    tmp_21_i1_reg_3342(63) <= tmp_21_i1_fu_1656_p3(63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_12_reg_4114_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    tmp_21_i_reg_4135(63) <= tmp_21_i_fu_3147_p3(63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_2156_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                tmp_31_reg_3620 <= tmp_31_fu_2204_p2;
                tmp_32_reg_3625 <= tmp_32_fu_2209_p2;
                    tmp_33_reg_3630(17 downto 1) <= tmp_33_fu_2214_p2(17 downto 1);
                    tmp_34_reg_3635(17 downto 1) <= tmp_34_fu_2219_p2(17 downto 1);
                tmp_35_reg_3640 <= tmp_35_fu_2224_p2;
                tmp_36_reg_3645 <= tmp_36_fu_2229_p2;
                    tmp_37_reg_3650(17 downto 2) <= tmp_37_fu_2234_p2(17 downto 2);
                    tmp_38_reg_3655(17 downto 3) <= tmp_38_fu_2239_p2(17 downto 3);
                tmp_39_reg_3660 <= tmp_39_fu_2244_p2;
                tmp_40_reg_3665 <= tmp_40_fu_2249_p2;
                tmp_41_reg_3670 <= tmp_41_fu_2254_p2;
                tmp_42_reg_3675 <= tmp_42_fu_2259_p2;
                tmp_43_reg_3680 <= tmp_43_fu_2264_p2;
                tmp_44_reg_3685 <= tmp_44_fu_2269_p2;
                tmp_45_reg_3690 <= tmp_45_fu_2274_p2;
                tmp_46_reg_3695 <= tmp_46_fu_2279_p2;
                tmp_47_reg_3700 <= tmp_47_fu_2284_p2;
                tmp_48_reg_3705 <= tmp_48_fu_2289_p2;
                tmp_49_reg_3710 <= tmp_49_fu_2294_p2;
                tmp_50_reg_3715 <= tmp_50_fu_2299_p2;
                tmp_51_reg_3720 <= tmp_51_fu_2304_p2;
                tmp_52_reg_3725 <= tmp_52_fu_2309_p2;
                tmp_53_reg_3730 <= tmp_53_fu_2314_p2;
                tmp_54_reg_3735 <= tmp_54_fu_2319_p2;
                tmp_55_reg_3740 <= tmp_55_fu_2324_p2;
                tmp_56_reg_3745 <= tmp_56_fu_2329_p2;
                tmp_57_reg_3750 <= tmp_57_fu_2334_p2;
                tmp_58_reg_3755 <= tmp_58_fu_2339_p2;
                tmp_59_reg_3760 <= tmp_59_fu_2344_p2;
                tmp_60_reg_3765 <= tmp_60_fu_2349_p2;
                tmp_61_reg_3770 <= tmp_61_fu_2354_p2;
                tmp_62_reg_3775 <= tmp_62_fu_2359_p2;
                tmp_63_reg_3780 <= tmp_63_fu_2364_p2;
                tmp_64_reg_3785 <= tmp_64_fu_2369_p2;
                tmp_65_reg_3790 <= tmp_65_fu_2374_p2;
                tmp_66_reg_3795 <= tmp_66_fu_2379_p2;
                tmp_67_reg_3800 <= tmp_67_fu_2384_p2;
                tmp_68_reg_3805 <= tmp_68_fu_2389_p2;
                tmp_69_reg_3810 <= tmp_69_fu_2394_p2;
                tmp_70_reg_3815 <= tmp_70_fu_2399_p2;
                tmp_71_reg_3820 <= tmp_71_fu_2404_p2;
                tmp_72_reg_3825 <= tmp_72_fu_2409_p2;
                tmp_73_reg_3830 <= tmp_73_fu_2414_p2;
                tmp_74_reg_3835 <= tmp_74_fu_2419_p2;
                tmp_75_reg_3840 <= tmp_75_fu_2424_p2;
                tmp_76_reg_3845 <= tmp_76_fu_2429_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                    tmp_81_cast_reg_3905(9 downto 0) <= tmp_81_cast_fu_2516_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (tmp_12_reg_4114_pp0_iter14_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                x_assign_reg_4140 <= grp_fu_1413_p2;
            end if;
        end if;
    end process;
    tmp_17_reg_3329(1 downto 0) <= "00";
    tmp_21_i1_reg_3342(62 downto 0) <= "011111111100000000000000000000000000000000000000000000000000000";
    tmp_110_reg_3358(2 downto 0) <= "000";
    tmp_113_reg_3371(2) <= '1';
    tmp_115_reg_3376(0) <= '1';
    tmp_117_reg_3381(0) <= '1';
    tmp_117_reg_3381(2) <= '1';
    tmp_119_reg_3386(1) <= '1';
    tmp_121_reg_3391(2 downto 1) <= "11";
    tmp_123_reg_3396(1 downto 0) <= "11";
    tmp_125_reg_3401(2 downto 0) <= "111";
    phi_mul_cast_reg_3606(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    tmp_33_reg_3630(0) <= '1';
    tmp_34_reg_3635(0) <= '1';
    tmp_37_reg_3650(1 downto 0) <= "11";
    tmp_38_reg_3655(2 downto 0) <= "111";
    tmp_81_cast_reg_3905(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    tmp_21_i_reg_4135(62 downto 0) <= "011111111100000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_22_fu_1542_p2, ap_CS_fsm_state18, tmp_111_fu_1683_p2, ap_CS_fsm_state19, exitcond2_fu_2156_p2, ap_CS_fsm_state46, ap_block_state46_on_subcall_done, exitcond_fu_2911_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_CS_fsm_state44, ap_block_state44_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_22_fu_1542_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (tmp_111_fu_1683_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (exitcond2_fu_2156_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state44 => 
                if (((ap_const_boolean_0 = ap_block_state44_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((ap_const_boolean_0 = ap_block_state46_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_fu_2911_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_fu_2911_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    AllCandidates_h_address0 <= tmp_19_fu_3076_p1(7 - 1 downto 0);

    AllCandidates_h_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            AllCandidates_h_ce0 <= ap_const_logic_1;
        else 
            AllCandidates_h_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    AllCandidates_h_d0 <= winSize_height;

    AllCandidates_h_we0_assign_proc : process(ap_block_pp0_stage0_11001, exitcond_fu_2911_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_12_fu_2933_p2)
    begin
        if (((exitcond_fu_2911_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_12_fu_2933_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            AllCandidates_h_we0 <= ap_const_logic_1;
        else 
            AllCandidates_h_we0 <= ap_const_logic_0;
        end if; 
    end process;

    AllCandidates_w_address0 <= tmp_19_fu_3076_p1(7 - 1 downto 0);

    AllCandidates_w_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            AllCandidates_w_ce0 <= ap_const_logic_1;
        else 
            AllCandidates_w_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    AllCandidates_w_d0 <= winSize_width;

    AllCandidates_w_we0_assign_proc : process(ap_block_pp0_stage0_11001, exitcond_fu_2911_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_12_fu_2933_p2)
    begin
        if (((exitcond_fu_2911_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_12_fu_2933_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            AllCandidates_w_we0 <= ap_const_logic_1;
        else 
            AllCandidates_w_we0 <= ap_const_logic_0;
        end if; 
    end process;

    AllCandidates_x_address0 <= tmp_19_reg_4129_pp0_iter16_reg(7 - 1 downto 0);

    AllCandidates_x_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter17)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            AllCandidates_x_ce0 <= ap_const_logic_1;
        else 
            AllCandidates_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    AllCandidates_x_d0 <= 
        result_V_1_fu_3284_p2 when (p_Result_s_reg_4145(0) = '1') else 
        p_Val2_10_reg_4150;

    AllCandidates_x_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_12_reg_4114_pp0_iter16_reg, ap_enable_reg_pp0_iter17)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (tmp_12_reg_4114_pp0_iter16_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            AllCandidates_x_we0 <= ap_const_logic_1;
        else 
            AllCandidates_x_we0 <= ap_const_logic_0;
        end if; 
    end process;

    AllCandidates_y_address0 <= tmp_19_reg_4129(7 - 1 downto 0);

    AllCandidates_y_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            AllCandidates_y_ce0 <= ap_const_logic_1;
        else 
            AllCandidates_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    AllCandidates_y_d0 <= 
        result_V_3_fu_3093_p2 when (p_Result_1_reg_3353(0) = '1') else 
        p_Val2_12_reg_4123;

    AllCandidates_y_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_12_reg_4114, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_12_reg_4114 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            AllCandidates_y_we0 <= ap_const_logic_1;
        else 
            AllCandidates_y_we0 <= ap_const_logic_0;
        end if; 
    end process;


    IMG1_data_address0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state24, ap_CS_fsm_state22, ap_CS_fsm_state26, ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, tmp_31_cast_fu_2434_p1, tmp_33_cast_fu_2442_p1, tmp_35_cast_fu_2450_p1, tmp_37_cast_fu_2470_p1, tmp_39_cast_fu_2490_p1, tmp_41_cast_fu_2521_p1, tmp_43_cast_fu_2541_p1, tmp_45_cast_fu_2561_p1, tmp_47_cast_fu_2593_p1, tmp_49_cast_fu_2613_p1, tmp_51_cast_fu_2633_p1, tmp_53_cast_fu_2653_p1, tmp_55_cast_fu_2673_p1, tmp_57_cast_fu_2693_p1, tmp_59_cast_fu_2713_p1, tmp_61_cast_fu_2733_p1, tmp_63_cast_fu_2753_p1, tmp_65_cast_fu_2773_p1, tmp_67_cast_fu_2793_p1, tmp_69_cast_fu_2813_p1, tmp_71_cast_fu_2833_p1, tmp_73_cast_fu_2853_p1, tmp_75_cast_fu_2873_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            IMG1_data_address0 <= tmp_75_cast_fu_2873_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            IMG1_data_address0 <= tmp_73_cast_fu_2853_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            IMG1_data_address0 <= tmp_71_cast_fu_2833_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            IMG1_data_address0 <= tmp_69_cast_fu_2813_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            IMG1_data_address0 <= tmp_67_cast_fu_2793_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            IMG1_data_address0 <= tmp_65_cast_fu_2773_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            IMG1_data_address0 <= tmp_63_cast_fu_2753_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            IMG1_data_address0 <= tmp_61_cast_fu_2733_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            IMG1_data_address0 <= tmp_59_cast_fu_2713_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            IMG1_data_address0 <= tmp_57_cast_fu_2693_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            IMG1_data_address0 <= tmp_55_cast_fu_2673_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            IMG1_data_address0 <= tmp_53_cast_fu_2653_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            IMG1_data_address0 <= tmp_51_cast_fu_2633_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            IMG1_data_address0 <= tmp_49_cast_fu_2613_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            IMG1_data_address0 <= tmp_47_cast_fu_2593_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            IMG1_data_address0 <= tmp_45_cast_fu_2561_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            IMG1_data_address0 <= tmp_43_cast_fu_2541_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            IMG1_data_address0 <= tmp_41_cast_fu_2521_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            IMG1_data_address0 <= tmp_39_cast_fu_2490_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            IMG1_data_address0 <= tmp_37_cast_fu_2470_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            IMG1_data_address0 <= tmp_35_cast_fu_2450_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            IMG1_data_address0 <= tmp_33_cast_fu_2442_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            IMG1_data_address0 <= tmp_31_cast_fu_2434_p1(17 - 1 downto 0);
        else 
            IMG1_data_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    IMG1_data_address1_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state24, ap_CS_fsm_state22, ap_CS_fsm_state26, ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, tmp_32_cast_fu_2438_p1, tmp_34_cast_fu_2446_p1, tmp_36_cast_fu_2454_p1, tmp_38_cast_fu_2474_p1, tmp_40_cast_fu_2494_p1, tmp_42_cast_fu_2525_p1, tmp_44_cast_fu_2545_p1, tmp_46_cast_fu_2565_p1, tmp_48_cast_fu_2597_p1, tmp_50_cast_fu_2617_p1, tmp_52_cast_fu_2637_p1, tmp_54_cast_fu_2657_p1, tmp_56_cast_fu_2677_p1, tmp_58_cast_fu_2697_p1, tmp_60_cast_fu_2717_p1, tmp_62_cast_fu_2737_p1, tmp_64_cast_fu_2757_p1, tmp_66_cast_fu_2777_p1, tmp_68_cast_fu_2797_p1, tmp_70_cast_fu_2817_p1, tmp_72_cast_fu_2837_p1, tmp_74_cast_fu_2857_p1, tmp_76_cast_fu_2877_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            IMG1_data_address1 <= tmp_76_cast_fu_2877_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            IMG1_data_address1 <= tmp_74_cast_fu_2857_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            IMG1_data_address1 <= tmp_72_cast_fu_2837_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            IMG1_data_address1 <= tmp_70_cast_fu_2817_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            IMG1_data_address1 <= tmp_68_cast_fu_2797_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            IMG1_data_address1 <= tmp_66_cast_fu_2777_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            IMG1_data_address1 <= tmp_64_cast_fu_2757_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            IMG1_data_address1 <= tmp_62_cast_fu_2737_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            IMG1_data_address1 <= tmp_60_cast_fu_2717_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            IMG1_data_address1 <= tmp_58_cast_fu_2697_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            IMG1_data_address1 <= tmp_56_cast_fu_2677_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            IMG1_data_address1 <= tmp_54_cast_fu_2657_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            IMG1_data_address1 <= tmp_52_cast_fu_2637_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            IMG1_data_address1 <= tmp_50_cast_fu_2617_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            IMG1_data_address1 <= tmp_48_cast_fu_2597_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            IMG1_data_address1 <= tmp_46_cast_fu_2565_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            IMG1_data_address1 <= tmp_44_cast_fu_2545_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            IMG1_data_address1 <= tmp_42_cast_fu_2525_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            IMG1_data_address1 <= tmp_40_cast_fu_2494_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            IMG1_data_address1 <= tmp_38_cast_fu_2474_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            IMG1_data_address1 <= tmp_36_cast_fu_2454_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            IMG1_data_address1 <= tmp_34_cast_fu_2446_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            IMG1_data_address1 <= tmp_32_cast_fu_2438_p1(17 - 1 downto 0);
        else 
            IMG1_data_address1 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    IMG1_data_ce0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state24, ap_CS_fsm_state22, ap_CS_fsm_state26, ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            IMG1_data_ce0 <= ap_const_logic_1;
        else 
            IMG1_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    IMG1_data_ce1_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state24, ap_CS_fsm_state22, ap_CS_fsm_state26, ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            IMG1_data_ce1 <= ap_const_logic_1;
        else 
            IMG1_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    SQSUM1_data_address0_assign_proc : process(ap_CS_fsm_state46, grp_cascadeClassifier_1_fu_1279_SII_address0, grp_integralImages_1_fu_1383_Sqsum_address0, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            SQSUM1_data_address0 <= grp_integralImages_1_fu_1383_Sqsum_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            SQSUM1_data_address0 <= grp_cascadeClassifier_1_fu_1279_SII_address0;
        else 
            SQSUM1_data_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    SQSUM1_data_address1_assign_proc : process(ap_CS_fsm_state46, grp_cascadeClassifier_1_fu_1279_SII_address1, grp_integralImages_1_fu_1383_Sqsum_address1, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            SQSUM1_data_address1 <= grp_integralImages_1_fu_1383_Sqsum_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            SQSUM1_data_address1 <= grp_cascadeClassifier_1_fu_1279_SII_address1;
        else 
            SQSUM1_data_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    SQSUM1_data_ce0_assign_proc : process(ap_CS_fsm_state46, grp_cascadeClassifier_1_fu_1279_SII_ce0, grp_integralImages_1_fu_1383_Sqsum_ce0, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            SQSUM1_data_ce0 <= grp_integralImages_1_fu_1383_Sqsum_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            SQSUM1_data_ce0 <= grp_cascadeClassifier_1_fu_1279_SII_ce0;
        else 
            SQSUM1_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SQSUM1_data_ce1_assign_proc : process(ap_CS_fsm_state46, grp_cascadeClassifier_1_fu_1279_SII_ce1, grp_integralImages_1_fu_1383_Sqsum_ce1, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            SQSUM1_data_ce1 <= grp_integralImages_1_fu_1383_Sqsum_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            SQSUM1_data_ce1 <= grp_cascadeClassifier_1_fu_1279_SII_ce1;
        else 
            SQSUM1_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    SQSUM1_data_we1_assign_proc : process(grp_integralImages_1_fu_1383_Sqsum_we1, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            SQSUM1_data_we1 <= grp_integralImages_1_fu_1383_Sqsum_we1;
        else 
            SQSUM1_data_we1 <= ap_const_logic_0;
        end if; 
    end process;


    SQSUM2_data_address0_assign_proc : process(ap_CS_fsm_state46, grp_cascadeClassifier_2_fu_1331_SII_address0, grp_integralImages_2_fu_1390_Sqsum_address0, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            SQSUM2_data_address0 <= grp_integralImages_2_fu_1390_Sqsum_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            SQSUM2_data_address0 <= grp_cascadeClassifier_2_fu_1331_SII_address0;
        else 
            SQSUM2_data_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    SQSUM2_data_address1_assign_proc : process(ap_CS_fsm_state46, grp_cascadeClassifier_2_fu_1331_SII_address1, grp_integralImages_2_fu_1390_Sqsum_address1, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            SQSUM2_data_address1 <= grp_integralImages_2_fu_1390_Sqsum_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            SQSUM2_data_address1 <= grp_cascadeClassifier_2_fu_1331_SII_address1;
        else 
            SQSUM2_data_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    SQSUM2_data_ce0_assign_proc : process(ap_CS_fsm_state46, grp_cascadeClassifier_2_fu_1331_SII_ce0, grp_integralImages_2_fu_1390_Sqsum_ce0, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            SQSUM2_data_ce0 <= grp_integralImages_2_fu_1390_Sqsum_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            SQSUM2_data_ce0 <= grp_cascadeClassifier_2_fu_1331_SII_ce0;
        else 
            SQSUM2_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SQSUM2_data_ce1_assign_proc : process(ap_CS_fsm_state46, grp_cascadeClassifier_2_fu_1331_SII_ce1, grp_integralImages_2_fu_1390_Sqsum_ce1, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            SQSUM2_data_ce1 <= grp_integralImages_2_fu_1390_Sqsum_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            SQSUM2_data_ce1 <= grp_cascadeClassifier_2_fu_1331_SII_ce1;
        else 
            SQSUM2_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    SQSUM2_data_we1_assign_proc : process(grp_integralImages_2_fu_1390_Sqsum_we1, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            SQSUM2_data_we1 <= grp_integralImages_2_fu_1390_Sqsum_we1;
        else 
            SQSUM2_data_we1 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_address0_assign_proc : process(ap_CS_fsm_state46, grp_cascadeClassifier_1_fu_1279_II_address0, grp_integralImages_1_fu_1383_Sum_address0, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            SUM1_data_address0 <= grp_integralImages_1_fu_1383_Sum_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            SUM1_data_address0 <= grp_cascadeClassifier_1_fu_1279_II_address0;
        else 
            SUM1_data_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    SUM1_data_address1_assign_proc : process(ap_CS_fsm_state46, grp_cascadeClassifier_1_fu_1279_II_address1, grp_integralImages_1_fu_1383_Sum_address1, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            SUM1_data_address1 <= grp_integralImages_1_fu_1383_Sum_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            SUM1_data_address1 <= grp_cascadeClassifier_1_fu_1279_II_address1;
        else 
            SUM1_data_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    SUM1_data_ce0_assign_proc : process(ap_CS_fsm_state46, grp_cascadeClassifier_1_fu_1279_II_ce0, grp_integralImages_1_fu_1383_Sum_ce0, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            SUM1_data_ce0 <= grp_integralImages_1_fu_1383_Sum_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            SUM1_data_ce0 <= grp_cascadeClassifier_1_fu_1279_II_ce0;
        else 
            SUM1_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce1_assign_proc : process(ap_CS_fsm_state46, grp_cascadeClassifier_1_fu_1279_II_ce1, grp_integralImages_1_fu_1383_Sum_ce1, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            SUM1_data_ce1 <= grp_integralImages_1_fu_1383_Sum_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            SUM1_data_ce1 <= grp_cascadeClassifier_1_fu_1279_II_ce1;
        else 
            SUM1_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_we1_assign_proc : process(grp_integralImages_1_fu_1383_Sum_we1, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            SUM1_data_we1 <= grp_integralImages_1_fu_1383_Sum_we1;
        else 
            SUM1_data_we1 <= ap_const_logic_0;
        end if; 
    end process;


    SUM2_data_address0_assign_proc : process(ap_CS_fsm_state46, grp_cascadeClassifier_2_fu_1331_II_address0, grp_integralImages_2_fu_1390_Sum_address0, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            SUM2_data_address0 <= grp_integralImages_2_fu_1390_Sum_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            SUM2_data_address0 <= grp_cascadeClassifier_2_fu_1331_II_address0;
        else 
            SUM2_data_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    SUM2_data_address1_assign_proc : process(ap_CS_fsm_state46, grp_cascadeClassifier_2_fu_1331_II_address1, grp_integralImages_2_fu_1390_Sum_address1, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            SUM2_data_address1 <= grp_integralImages_2_fu_1390_Sum_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            SUM2_data_address1 <= grp_cascadeClassifier_2_fu_1331_II_address1;
        else 
            SUM2_data_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    SUM2_data_ce0_assign_proc : process(ap_CS_fsm_state46, grp_cascadeClassifier_2_fu_1331_II_ce0, grp_integralImages_2_fu_1390_Sum_ce0, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            SUM2_data_ce0 <= grp_integralImages_2_fu_1390_Sum_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            SUM2_data_ce0 <= grp_cascadeClassifier_2_fu_1331_II_ce0;
        else 
            SUM2_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SUM2_data_ce1_assign_proc : process(ap_CS_fsm_state46, grp_cascadeClassifier_2_fu_1331_II_ce1, grp_integralImages_2_fu_1390_Sum_ce1, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            SUM2_data_ce1 <= grp_integralImages_2_fu_1390_Sum_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            SUM2_data_ce1 <= grp_cascadeClassifier_2_fu_1331_II_ce1;
        else 
            SUM2_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    SUM2_data_we1_assign_proc : process(grp_integralImages_2_fu_1390_Sum_we1, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            SUM2_data_we1 <= grp_integralImages_2_fu_1390_Sum_we1;
        else 
            SUM2_data_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(46);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state65 <= ap_CS_fsm(47);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state44_on_subcall_done_assign_proc : process(grp_integralImages_1_fu_1383_ap_done, grp_integralImages_2_fu_1390_ap_done)
    begin
                ap_block_state44_on_subcall_done <= ((grp_integralImages_2_fu_1390_ap_done = ap_const_logic_0) or (grp_integralImages_1_fu_1383_ap_done = ap_const_logic_0));
    end process;


    ap_block_state46_on_subcall_done_assign_proc : process(grp_cascadeClassifier_1_fu_1279_ap_done, grp_cascadeClassifier_2_fu_1331_ap_done)
    begin
                ap_block_state46_on_subcall_done <= ((grp_cascadeClassifier_2_fu_1331_ap_done = ap_const_logic_0) or (grp_cascadeClassifier_1_fu_1279_ap_done = ap_const_logic_0));
    end process;

        ap_block_state47_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state47_assign_proc : process(exitcond_fu_2911_p2)
    begin
        if ((exitcond_fu_2911_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state47 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state47 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_22_fu_1542_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_22_fu_1542_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_22_fu_1542_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_22_fu_1542_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= AllCandidates_size_fu_354;
    exitcond2_fu_2156_p2 <= "1" when (n_reg_1245 = ap_const_lv5_19) else "0";
    exitcond_fu_2911_p2 <= "1" when (i_reg_1268 = ap_const_lv2_2) else "0";
    grp_cascadeClassifier_1_fu_1279_ap_start <= grp_cascadeClassifier_1_fu_1279_ap_start_reg;
    grp_cascadeClassifier_2_fu_1331_ap_start <= grp_cascadeClassifier_2_fu_1331_ap_start_reg;

    grp_fu_1401_p0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_15_fu_2949_p4, p_y_reg_1221, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_1401_p0 <= tmp_15_fu_2949_p4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_1401_p0 <= p_y_reg_1221;
        else 
            grp_fu_1401_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1413_p1_assign_proc : process(tmp_21_i1_reg_3342, tmp_21_i_reg_4135, ap_enable_reg_pp0_iter11, ap_block_pp0_stage0, ap_CS_fsm_state13)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_1413_p1 <= tmp_21_i_reg_4135;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_1413_p1 <= tmp_21_i1_reg_3342;
        else 
            grp_fu_1413_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_integralImages_1_fu_1383_ap_start <= grp_integralImages_1_fu_1383_ap_start_reg;
    grp_integralImages_2_fu_1390_ap_start <= grp_integralImages_2_fu_1390_ap_start_reg;
    i_1_fu_2917_p2 <= std_logic_vector(unsigned(i_reg_1268) + unsigned(ap_const_lv2_1));
    isNeg_1_fu_2996_p3 <= sh_assign_3_fu_2990_p2(11 downto 11);
    isNeg_fu_3204_p3 <= sh_assign_fu_3198_p2(11 downto 11);
    mantissa_V_1_cast_fu_3190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_3180_p4),137));
    mantissa_V_1_fu_2972_p4 <= ((ap_const_lv1_1 & tmp_V_3_fu_2969_p1) & ap_const_lv1_0);
    mantissa_V_3_cast_fu_2982_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_1_fu_2972_p4),137));
    mantissa_V_fu_3180_p4 <= ((ap_const_lv1_1 & tmp_V_1_fu_3176_p1) & ap_const_lv1_0);
    n_1_fu_2162_p2 <= std_logic_vector(unsigned(n_reg_1245) + unsigned(ap_const_lv5_1));
    n_cast4_fu_2152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_1245),32));
    next_mul_fu_2893_p2 <= std_logic_vector(unsigned(ap_const_lv10_19) + unsigned(phi_mul_reg_1256));
    notlhs7_fu_3123_p2 <= "0" when (tmp_25_fu_3109_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_1632_p2 <= "0" when (tmp_4_fu_1618_p4 = ap_const_lv8_FF) else "1";
    notrhs8_fu_3129_p2 <= "1" when (tmp_204_fu_3119_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_1638_p2 <= "1" when (tmp_23_fu_1628_p1 = ap_const_lv23_0) else "0";
    p_Val2_10_fu_3276_p3 <= 
        tmp_104_fu_3262_p1 when (isNeg_fu_3204_p3(0) = '1') else 
        tmp_105_fu_3266_p4;
    p_Val2_12_fu_3068_p3 <= 
        tmp_108_fu_3054_p1 when (isNeg_1_fu_2996_p3(0) = '1') else 
        tmp_109_fu_3058_p4;
    p_Val2_5_fu_1664_p1 <= grp_fu_1413_p2;
    p_Val2_s_fu_3155_p1 <= x_assign_reg_4140;
    p_lshr1_fu_1572_p4 <= p_neg1_fu_1567_p2(31 downto 3);
    p_lshr_fu_1487_p4 <= p_neg_fu_1481_p2(31 downto 2);
    p_neg1_fu_1567_p2 <= std_logic_vector(unsigned(ap_const_lv32_11) - unsigned(sum_col));
    p_neg_fu_1481_p2 <= std_logic_vector(unsigned(ap_const_lv32_15) - unsigned(sum_row));
    p_neg_t1_fu_1582_p2 <= std_logic_vector(unsigned(ap_const_lv29_0) - unsigned(p_lshr1_fu_1572_p4));
    p_neg_t_fu_1497_p2 <= std_logic_vector(unsigned(ap_const_lv30_0) - unsigned(p_lshr_fu_1487_p4));
    p_shl3_cast_fu_2190_p3 <= (tmp_202_fu_2186_p1 & ap_const_lv6_0);
    p_shl_cast_fu_2178_p3 <= (tmp_201_fu_2174_p1 & ap_const_lv8_0);
    phi_mul_cast_fu_2148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_1256),64));
    r_V_1_fu_3248_p2 <= std_logic_vector(shift_left(unsigned(mantissa_V_1_cast_fu_3190_p1),to_integer(unsigned('0' & tmp_i_i_i_i_12_fu_3234_p1(31-1 downto 0)))));
    r_V_2_fu_3034_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_1_fu_2972_p4),to_integer(unsigned('0' & tmp_i_i_i_i1_cast_15_fu_3030_p1(31-1 downto 0)))));
    r_V_3_fu_3040_p2 <= std_logic_vector(shift_left(unsigned(mantissa_V_3_cast_fu_2982_p1),to_integer(unsigned('0' & tmp_i_i_i_i1_14_fu_3026_p1(31-1 downto 0)))));
    r_V_fu_3242_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_3180_p4),to_integer(unsigned('0' & tmp_i_i_i_i_cast_13_fu_3238_p1(31-1 downto 0)))));
    result_V_1_fu_3284_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_10_reg_4150));
    result_V_3_fu_3093_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_12_reg_4123));
    result_load_phi_fu_2927_p3 <= 
        result_11_reg_4100 when (tmp_203_fu_2923_p1(0) = '1') else 
        result_02_reg_4095;
        sh_assign_2_cast_fu_3230_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_3222_p3),32));

    sh_assign_3_fu_2990_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i_i1_cast1_fu_2986_p1));
        sh_assign_5_cast_fu_3022_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_fu_3014_p3),32));

    sh_assign_fu_3198_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i_i_cast2_fu_3194_p1));
    tmp_100_cast_fu_2887_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_100_fu_2881_p2),64));
    tmp_100_fu_2881_p2 <= std_logic_vector(unsigned(ap_const_lv10_17) + unsigned(phi_mul_reg_1256));
    tmp_101_cast_fu_2905_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_101_fu_2899_p2),64));
    tmp_101_fu_2899_p2 <= std_logic_vector(unsigned(ap_const_lv10_18) + unsigned(phi_mul_reg_1256));
    tmp_102_fu_1559_p3 <= tmp_1_op_op_fu_1554_p2(31 downto 31);
    tmp_103_fu_1588_p4 <= tmp_1_op_op_fu_1554_p2(31 downto 3);
    tmp_104_fu_3262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_208_fu_3254_p3),32));
    tmp_105_fu_3266_p4 <= r_V_1_fu_3248_p2(84 downto 53);
    tmp_106_fu_1598_p3 <= 
        p_neg_t1_fu_1582_p2 when (tmp_102_fu_1559_p3(0) = '1') else 
        tmp_103_fu_1588_p4;
    tmp_107_fu_1606_p3 <= 
        ap_const_lv29_0 when (tmp_77_fu_1547_p3(0) = '1') else 
        tmp_106_fu_1598_p3;
    tmp_108_fu_3054_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_211_fu_3046_p3),32));
    tmp_109_fu_3058_p4 <= r_V_3_fu_3040_p2(84 downto 53);
    tmp_10_fu_1513_p3 <= 
        p_neg_t_fu_1497_p2 when (tmp_5_fu_1473_p3(0) = '1') else 
        tmp_7_fu_1503_p4;
    tmp_110_fu_1676_p3 <= (tmp_107_reg_3337 & ap_const_lv3_0);
    tmp_111_fu_1683_p2 <= "1" when (p_x_reg_1233 = tmp_110_reg_3358) else "0";
    tmp_112_fu_1694_p1 <= p_x_reg_1233(18 - 1 downto 0);
    tmp_113_fu_1698_p1 <= tmp_6_fu_1688_p2(18 - 1 downto 0);
    tmp_114_fu_1702_p1 <= p_x_reg_1233(18 - 1 downto 0);
    tmp_115_fu_1706_p2 <= (tmp_114_fu_1702_p1 or ap_const_lv18_1);
    tmp_116_fu_1712_p1 <= p_x_reg_1233(18 - 1 downto 0);
    tmp_117_fu_1716_p2 <= (tmp_116_fu_1712_p1 or ap_const_lv18_5);
    tmp_118_fu_1722_p1 <= p_x_reg_1233(18 - 1 downto 0);
    tmp_119_fu_1726_p2 <= (tmp_118_fu_1722_p1 or ap_const_lv18_2);
    tmp_120_fu_1732_p1 <= p_x_reg_1233(18 - 1 downto 0);
    tmp_121_fu_1736_p2 <= (tmp_120_fu_1732_p1 or ap_const_lv18_6);
    tmp_122_fu_1742_p1 <= p_x_reg_1233(18 - 1 downto 0);
    tmp_123_fu_1746_p2 <= (tmp_122_fu_1742_p1 or ap_const_lv18_3);
    tmp_124_fu_1752_p1 <= p_x_reg_1233(18 - 1 downto 0);
    tmp_125_fu_1756_p2 <= (tmp_124_fu_1752_p1 or ap_const_lv18_7);
    tmp_126_fu_1762_p1 <= tmp_6_fu_1688_p2(18 - 1 downto 0);
    tmp_127_fu_1766_p2 <= std_logic_vector(unsigned(ap_const_lv18_4) + unsigned(tmp_126_fu_1762_p1));
    tmp_128_fu_1772_p1 <= tmp_6_fu_1688_p2(18 - 1 downto 0);
    tmp_129_fu_1776_p2 <= std_logic_vector(unsigned(ap_const_lv18_5) + unsigned(tmp_128_fu_1772_p1));
    tmp_12_fu_2933_p2 <= "1" when (signed(result_load_phi_fu_2927_p3) > signed(ap_const_lv6_0)) else "0";
    tmp_130_fu_1782_p1 <= tmp_6_fu_1688_p2(18 - 1 downto 0);
    tmp_131_fu_1786_p2 <= std_logic_vector(unsigned(ap_const_lv18_6) + unsigned(tmp_130_fu_1782_p1));
    tmp_132_fu_1792_p1 <= tmp_6_fu_1688_p2(18 - 1 downto 0);
    tmp_133_fu_1796_p2 <= std_logic_vector(unsigned(ap_const_lv18_7) + unsigned(tmp_132_fu_1792_p1));
    tmp_134_fu_1808_p1 <= x_fu_1802_p2(18 - 1 downto 0);
    tmp_135_fu_1812_p1 <= tmp_6_fu_1688_p2(18 - 1 downto 0);
    tmp_136_fu_1816_p2 <= std_logic_vector(unsigned(ap_const_lv18_8) + unsigned(tmp_135_fu_1812_p1));
    tmp_137_fu_1822_p1 <= p_x_reg_1233(18 - 1 downto 0);
    tmp_138_fu_1826_p2 <= std_logic_vector(unsigned(ap_const_lv18_9) + unsigned(tmp_137_fu_1822_p1));
    tmp_139_fu_1832_p1 <= tmp_6_fu_1688_p2(18 - 1 downto 0);
    tmp_13_fu_1644_p2 <= (notrhs_fu_1638_p2 or notlhs_fu_1632_p2);
    tmp_140_fu_1836_p2 <= std_logic_vector(unsigned(ap_const_lv18_9) + unsigned(tmp_139_fu_1832_p1));
    tmp_141_fu_1842_p1 <= p_x_reg_1233(18 - 1 downto 0);
    tmp_142_fu_1846_p2 <= std_logic_vector(unsigned(ap_const_lv18_A) + unsigned(tmp_141_fu_1842_p1));
    tmp_143_fu_1852_p1 <= tmp_6_fu_1688_p2(18 - 1 downto 0);
    tmp_144_fu_1856_p2 <= std_logic_vector(unsigned(ap_const_lv18_A) + unsigned(tmp_143_fu_1852_p1));
    tmp_145_fu_1862_p1 <= p_x_reg_1233(18 - 1 downto 0);
    tmp_146_fu_1866_p2 <= std_logic_vector(unsigned(ap_const_lv18_B) + unsigned(tmp_145_fu_1862_p1));
    tmp_147_fu_1872_p1 <= tmp_6_fu_1688_p2(18 - 1 downto 0);
    tmp_148_fu_1876_p2 <= std_logic_vector(unsigned(ap_const_lv18_B) + unsigned(tmp_147_fu_1872_p1));
    tmp_149_fu_1882_p1 <= p_x_reg_1233(18 - 1 downto 0);
    tmp_14_fu_1521_p3 <= 
        ap_const_lv30_0 when (tmp_2_fu_1459_p3(0) = '1') else 
        tmp_10_fu_1513_p3;
    tmp_150_fu_1886_p2 <= std_logic_vector(unsigned(ap_const_lv18_C) + unsigned(tmp_149_fu_1882_p1));
    tmp_151_fu_1892_p1 <= tmp_6_fu_1688_p2(18 - 1 downto 0);
    tmp_152_fu_1896_p2 <= std_logic_vector(unsigned(ap_const_lv18_C) + unsigned(tmp_151_fu_1892_p1));
    tmp_153_fu_1902_p1 <= p_x_reg_1233(18 - 1 downto 0);
    tmp_154_fu_1906_p2 <= std_logic_vector(unsigned(ap_const_lv18_D) + unsigned(tmp_153_fu_1902_p1));
    tmp_155_fu_1912_p1 <= tmp_6_fu_1688_p2(18 - 1 downto 0);
    tmp_156_fu_1916_p2 <= std_logic_vector(unsigned(ap_const_lv18_D) + unsigned(tmp_155_fu_1912_p1));
    tmp_157_fu_1922_p1 <= p_x_reg_1233(18 - 1 downto 0);
    tmp_158_fu_1926_p2 <= std_logic_vector(unsigned(ap_const_lv18_E) + unsigned(tmp_157_fu_1922_p1));
    tmp_159_fu_1932_p1 <= tmp_6_fu_1688_p2(18 - 1 downto 0);
    tmp_15_fu_2949_p4 <= ((tmp_24_fu_2939_p4 & tmp_203_fu_2923_p1) & ap_const_lv2_0);
    tmp_160_fu_1936_p2 <= std_logic_vector(unsigned(ap_const_lv18_E) + unsigned(tmp_159_fu_1932_p1));
    tmp_161_fu_1942_p1 <= p_x_reg_1233(18 - 1 downto 0);
    tmp_162_fu_1946_p2 <= std_logic_vector(unsigned(ap_const_lv18_F) + unsigned(tmp_161_fu_1942_p1));
    tmp_163_fu_1952_p1 <= tmp_6_fu_1688_p2(18 - 1 downto 0);
    tmp_164_fu_1956_p2 <= std_logic_vector(unsigned(ap_const_lv18_F) + unsigned(tmp_163_fu_1952_p1));
    tmp_165_fu_1962_p1 <= p_x_reg_1233(18 - 1 downto 0);
    tmp_166_fu_1966_p2 <= std_logic_vector(unsigned(ap_const_lv18_10) + unsigned(tmp_165_fu_1962_p1));
    tmp_167_fu_1972_p1 <= tmp_6_fu_1688_p2(18 - 1 downto 0);
    tmp_168_fu_1976_p2 <= std_logic_vector(unsigned(ap_const_lv18_10) + unsigned(tmp_167_fu_1972_p1));
    tmp_169_fu_1982_p1 <= p_x_reg_1233(18 - 1 downto 0);
    tmp_170_fu_1986_p2 <= std_logic_vector(unsigned(ap_const_lv18_11) + unsigned(tmp_169_fu_1982_p1));
    tmp_171_fu_1992_p1 <= tmp_6_fu_1688_p2(18 - 1 downto 0);
    tmp_172_fu_1996_p2 <= std_logic_vector(unsigned(ap_const_lv18_11) + unsigned(tmp_171_fu_1992_p1));
    tmp_173_fu_2002_p1 <= p_x_reg_1233(18 - 1 downto 0);
    tmp_174_fu_2006_p2 <= std_logic_vector(unsigned(ap_const_lv18_12) + unsigned(tmp_173_fu_2002_p1));
    tmp_175_fu_2012_p1 <= tmp_6_fu_1688_p2(18 - 1 downto 0);
    tmp_176_fu_2016_p2 <= std_logic_vector(unsigned(ap_const_lv18_12) + unsigned(tmp_175_fu_2012_p1));
    tmp_177_fu_2022_p1 <= p_x_reg_1233(18 - 1 downto 0);
    tmp_178_fu_2026_p2 <= std_logic_vector(unsigned(ap_const_lv18_13) + unsigned(tmp_177_fu_2022_p1));
    tmp_179_fu_2032_p1 <= tmp_6_fu_1688_p2(18 - 1 downto 0);
    tmp_17_fu_1529_p3 <= (tmp_14_fu_1521_p3 & ap_const_lv2_0);
    tmp_180_fu_2036_p2 <= std_logic_vector(unsigned(ap_const_lv18_13) + unsigned(tmp_179_fu_2032_p1));
    tmp_181_fu_2042_p1 <= p_x_reg_1233(18 - 1 downto 0);
    tmp_182_fu_2046_p2 <= std_logic_vector(unsigned(ap_const_lv18_14) + unsigned(tmp_181_fu_2042_p1));
    tmp_183_fu_2052_p1 <= tmp_6_fu_1688_p2(18 - 1 downto 0);
    tmp_184_fu_2056_p2 <= std_logic_vector(unsigned(ap_const_lv18_14) + unsigned(tmp_183_fu_2052_p1));
    tmp_185_fu_2062_p1 <= p_x_reg_1233(18 - 1 downto 0);
    tmp_186_fu_2066_p2 <= std_logic_vector(unsigned(ap_const_lv18_15) + unsigned(tmp_185_fu_2062_p1));
    tmp_187_fu_2072_p1 <= tmp_6_fu_1688_p2(18 - 1 downto 0);
    tmp_188_fu_2076_p2 <= std_logic_vector(unsigned(ap_const_lv18_15) + unsigned(tmp_187_fu_2072_p1));
    tmp_189_fu_2082_p1 <= p_x_reg_1233(18 - 1 downto 0);
    tmp_190_fu_2086_p2 <= std_logic_vector(unsigned(ap_const_lv18_16) + unsigned(tmp_189_fu_2082_p1));
    tmp_191_fu_2092_p1 <= tmp_6_fu_1688_p2(18 - 1 downto 0);
    tmp_192_fu_2096_p2 <= std_logic_vector(unsigned(ap_const_lv18_16) + unsigned(tmp_191_fu_2092_p1));
    tmp_193_fu_2102_p1 <= p_x_reg_1233(18 - 1 downto 0);
    tmp_194_fu_2106_p2 <= std_logic_vector(unsigned(ap_const_lv18_17) + unsigned(tmp_193_fu_2102_p1));
    tmp_195_fu_2112_p1 <= tmp_6_fu_1688_p2(18 - 1 downto 0);
    tmp_196_fu_2116_p2 <= std_logic_vector(unsigned(ap_const_lv18_17) + unsigned(tmp_195_fu_2112_p1));
    tmp_197_fu_2122_p1 <= p_x_reg_1233(18 - 1 downto 0);
    tmp_198_fu_2126_p2 <= std_logic_vector(unsigned(ap_const_lv18_18) + unsigned(tmp_197_fu_2122_p1));
    tmp_199_fu_2132_p1 <= tmp_6_fu_1688_p2(18 - 1 downto 0);
    tmp_19_fu_3076_p0 <= AllCandidates_size_fu_354;
        tmp_19_fu_3076_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_19_fu_3076_p0),64));

    tmp_1_fu_1453_p2 <= std_logic_vector(unsigned(sum_col) + unsigned(ap_const_lv32_FFFFFFE8));
    tmp_1_op_op_fu_1554_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFEF) + signed(sum_col));
    tmp_200_fu_2136_p2 <= std_logic_vector(unsigned(ap_const_lv18_18) + unsigned(tmp_199_fu_2132_p1));
    tmp_201_fu_2174_p1 <= tmp_s_fu_2168_p2(10 - 1 downto 0);
    tmp_202_fu_2186_p1 <= tmp_s_fu_2168_p2(12 - 1 downto 0);
    tmp_203_fu_2923_p1 <= i_reg_1268(1 - 1 downto 0);
    tmp_204_fu_3119_p1 <= value_assign_to_int_fu_3105_p1(23 - 1 downto 0);
    tmp_208_fu_3254_p3 <= r_V_fu_3242_p2(53 downto 53);
    tmp_20_fu_3082_p1 <= AllCandidates_size_fu_354;
    tmp_20_fu_3082_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(tmp_20_fu_3082_p1));
    tmp_211_fu_3046_p3 <= r_V_2_fu_3034_p2(53 downto 53);
    tmp_21_fu_1650_p2 <= (tmp_13_fu_1644_p2 and grp_fu_1408_p2);
    tmp_21_i1_fu_1656_p3 <= 
        ap_const_lv64_3FE0000000000000 when (tmp_21_fu_1650_p2(0) = '1') else 
        ap_const_lv64_BFE0000000000000;
    tmp_21_i_fu_3147_p3 <= 
        ap_const_lv64_3FE0000000000000 when (tmp_29_fu_3141_p2(0) = '1') else 
        ap_const_lv64_BFE0000000000000;
    tmp_22_fu_1542_p2 <= "1" when (p_y_reg_1221 = tmp_17_reg_3329) else "0";
    tmp_23_fu_1628_p1 <= value_assign_1_to_in_fu_1614_p1(23 - 1 downto 0);
    tmp_24_fu_2939_p4 <= p_x_reg_1233(31 downto 3);
    tmp_25_fu_3109_p4 <= value_assign_to_int_fu_3105_p1(30 downto 23);
    tmp_27_fu_3135_p2 <= (notrhs8_fu_3129_p2 or notlhs7_fu_3123_p2);
    tmp_29_fu_3141_p2 <= (tmp_27_fu_3135_p2 and grp_fu_1408_p2);
    tmp_2_fu_1459_p3 <= tmp_fu_1447_p2(31 downto 31);
    tmp_30_fu_2198_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_2178_p3) + unsigned(p_shl3_cast_fu_2190_p3));
        tmp_31_cast_fu_2434_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_31_reg_3620),64));

    tmp_31_fu_2204_p2 <= std_logic_vector(unsigned(tmp_112_reg_3366) + unsigned(tmp_30_fu_2198_p2));
        tmp_32_cast_fu_2438_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_32_reg_3625),64));

    tmp_32_fu_2209_p2 <= std_logic_vector(unsigned(tmp_113_reg_3371) + unsigned(tmp_30_fu_2198_p2));
        tmp_33_cast_fu_2442_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_33_reg_3630),64));

    tmp_33_fu_2214_p2 <= std_logic_vector(unsigned(tmp_115_reg_3376) + unsigned(tmp_30_fu_2198_p2));
        tmp_34_cast_fu_2446_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_34_reg_3635),64));

    tmp_34_fu_2219_p2 <= std_logic_vector(unsigned(tmp_117_reg_3381) + unsigned(tmp_30_fu_2198_p2));
        tmp_35_cast_fu_2450_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_35_reg_3640),64));

    tmp_35_fu_2224_p2 <= std_logic_vector(unsigned(tmp_119_reg_3386) + unsigned(tmp_30_fu_2198_p2));
        tmp_36_cast_fu_2454_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_36_reg_3645),64));

    tmp_36_fu_2229_p2 <= std_logic_vector(unsigned(tmp_121_reg_3391) + unsigned(tmp_30_fu_2198_p2));
        tmp_37_cast_fu_2470_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_37_reg_3650),64));

    tmp_37_fu_2234_p2 <= std_logic_vector(unsigned(tmp_123_reg_3396) + unsigned(tmp_30_fu_2198_p2));
        tmp_38_cast_fu_2474_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_38_reg_3655),64));

    tmp_38_fu_2239_p2 <= std_logic_vector(unsigned(tmp_125_reg_3401) + unsigned(tmp_30_fu_2198_p2));
        tmp_39_cast_fu_2490_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_39_reg_3660),64));

    tmp_39_fu_2244_p2 <= std_logic_vector(unsigned(tmp_127_reg_3406) + unsigned(tmp_30_fu_2198_p2));
        tmp_40_cast_fu_2494_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_40_reg_3665),64));

    tmp_40_fu_2249_p2 <= std_logic_vector(unsigned(tmp_129_reg_3411) + unsigned(tmp_30_fu_2198_p2));
        tmp_41_cast_fu_2521_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_41_reg_3670),64));

    tmp_41_fu_2254_p2 <= std_logic_vector(unsigned(tmp_131_reg_3416) + unsigned(tmp_30_fu_2198_p2));
        tmp_42_cast_fu_2525_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_42_reg_3675),64));

    tmp_42_fu_2259_p2 <= std_logic_vector(unsigned(tmp_133_reg_3421) + unsigned(tmp_30_fu_2198_p2));
        tmp_43_cast_fu_2541_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_43_reg_3680),64));

    tmp_43_fu_2264_p2 <= std_logic_vector(unsigned(tmp_134_reg_3431) + unsigned(tmp_30_fu_2198_p2));
        tmp_44_cast_fu_2545_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_44_reg_3685),64));

    tmp_44_fu_2269_p2 <= std_logic_vector(unsigned(tmp_136_reg_3436) + unsigned(tmp_30_fu_2198_p2));
        tmp_45_cast_fu_2561_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_45_reg_3690),64));

    tmp_45_fu_2274_p2 <= std_logic_vector(unsigned(tmp_138_reg_3441) + unsigned(tmp_30_fu_2198_p2));
        tmp_46_cast_fu_2565_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_46_reg_3695),64));

    tmp_46_fu_2279_p2 <= std_logic_vector(unsigned(tmp_140_reg_3446) + unsigned(tmp_30_fu_2198_p2));
        tmp_47_cast_fu_2593_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_47_reg_3700),64));

    tmp_47_fu_2284_p2 <= std_logic_vector(unsigned(tmp_142_reg_3451) + unsigned(tmp_30_fu_2198_p2));
        tmp_48_cast_fu_2597_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_48_reg_3705),64));

    tmp_48_fu_2289_p2 <= std_logic_vector(unsigned(tmp_144_reg_3456) + unsigned(tmp_30_fu_2198_p2));
        tmp_49_cast_fu_2613_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_49_reg_3710),64));

    tmp_49_fu_2294_p2 <= std_logic_vector(unsigned(tmp_146_reg_3461) + unsigned(tmp_30_fu_2198_p2));
    tmp_4_fu_1618_p4 <= value_assign_1_to_in_fu_1614_p1(30 downto 23);
        tmp_50_cast_fu_2617_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_50_reg_3715),64));

    tmp_50_fu_2299_p2 <= std_logic_vector(unsigned(tmp_148_reg_3466) + unsigned(tmp_30_fu_2198_p2));
        tmp_51_cast_fu_2633_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_51_reg_3720),64));

    tmp_51_fu_2304_p2 <= std_logic_vector(unsigned(tmp_150_reg_3471) + unsigned(tmp_30_fu_2198_p2));
        tmp_52_cast_fu_2637_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_52_reg_3725),64));

    tmp_52_fu_2309_p2 <= std_logic_vector(unsigned(tmp_152_reg_3476) + unsigned(tmp_30_fu_2198_p2));
        tmp_53_cast_fu_2653_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_53_reg_3730),64));

    tmp_53_fu_2314_p2 <= std_logic_vector(unsigned(tmp_154_reg_3481) + unsigned(tmp_30_fu_2198_p2));
        tmp_54_cast_fu_2657_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_54_reg_3735),64));

    tmp_54_fu_2319_p2 <= std_logic_vector(unsigned(tmp_156_reg_3486) + unsigned(tmp_30_fu_2198_p2));
        tmp_55_cast_fu_2673_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_55_reg_3740),64));

    tmp_55_fu_2324_p2 <= std_logic_vector(unsigned(tmp_158_reg_3491) + unsigned(tmp_30_fu_2198_p2));
        tmp_56_cast_fu_2677_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_56_reg_3745),64));

    tmp_56_fu_2329_p2 <= std_logic_vector(unsigned(tmp_160_reg_3496) + unsigned(tmp_30_fu_2198_p2));
        tmp_57_cast_fu_2693_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_57_reg_3750),64));

    tmp_57_fu_2334_p2 <= std_logic_vector(unsigned(tmp_162_reg_3501) + unsigned(tmp_30_fu_2198_p2));
        tmp_58_cast_fu_2697_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_58_reg_3755),64));

    tmp_58_fu_2339_p2 <= std_logic_vector(unsigned(tmp_164_reg_3506) + unsigned(tmp_30_fu_2198_p2));
        tmp_59_cast_fu_2713_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_59_reg_3760),64));

    tmp_59_fu_2344_p2 <= std_logic_vector(unsigned(tmp_166_reg_3511) + unsigned(tmp_30_fu_2198_p2));
    tmp_5_fu_1473_p3 <= tmp_op_op_fu_1467_p2(31 downto 31);
        tmp_60_cast_fu_2717_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_60_reg_3765),64));

    tmp_60_fu_2349_p2 <= std_logic_vector(unsigned(tmp_168_reg_3516) + unsigned(tmp_30_fu_2198_p2));
        tmp_61_cast_fu_2733_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_61_reg_3770),64));

    tmp_61_fu_2354_p2 <= std_logic_vector(unsigned(tmp_170_reg_3521) + unsigned(tmp_30_fu_2198_p2));
        tmp_62_cast_fu_2737_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_62_reg_3775),64));

    tmp_62_fu_2359_p2 <= std_logic_vector(unsigned(tmp_172_reg_3526) + unsigned(tmp_30_fu_2198_p2));
        tmp_63_cast_fu_2753_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_63_reg_3780),64));

    tmp_63_fu_2364_p2 <= std_logic_vector(unsigned(tmp_174_reg_3531) + unsigned(tmp_30_fu_2198_p2));
        tmp_64_cast_fu_2757_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_64_reg_3785),64));

    tmp_64_fu_2369_p2 <= std_logic_vector(unsigned(tmp_176_reg_3536) + unsigned(tmp_30_fu_2198_p2));
        tmp_65_cast_fu_2773_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_65_reg_3790),64));

    tmp_65_fu_2374_p2 <= std_logic_vector(unsigned(tmp_178_reg_3541) + unsigned(tmp_30_fu_2198_p2));
        tmp_66_cast_fu_2777_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_66_reg_3795),64));

    tmp_66_fu_2379_p2 <= std_logic_vector(unsigned(tmp_180_reg_3546) + unsigned(tmp_30_fu_2198_p2));
        tmp_67_cast_fu_2793_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_67_reg_3800),64));

    tmp_67_fu_2384_p2 <= std_logic_vector(unsigned(tmp_182_reg_3551) + unsigned(tmp_30_fu_2198_p2));
        tmp_68_cast_fu_2797_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_68_reg_3805),64));

    tmp_68_fu_2389_p2 <= std_logic_vector(unsigned(tmp_184_reg_3556) + unsigned(tmp_30_fu_2198_p2));
        tmp_69_cast_fu_2813_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_69_reg_3810),64));

    tmp_69_fu_2394_p2 <= std_logic_vector(unsigned(tmp_186_reg_3561) + unsigned(tmp_30_fu_2198_p2));
    tmp_6_fu_1688_p2 <= (p_x_reg_1233 or ap_const_lv32_4);
        tmp_70_cast_fu_2817_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_70_reg_3815),64));

    tmp_70_fu_2399_p2 <= std_logic_vector(unsigned(tmp_188_reg_3566) + unsigned(tmp_30_fu_2198_p2));
        tmp_71_cast_fu_2833_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_71_reg_3820),64));

    tmp_71_fu_2404_p2 <= std_logic_vector(unsigned(tmp_190_reg_3571) + unsigned(tmp_30_fu_2198_p2));
        tmp_72_cast_fu_2837_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_72_reg_3825),64));

    tmp_72_fu_2409_p2 <= std_logic_vector(unsigned(tmp_192_reg_3576) + unsigned(tmp_30_fu_2198_p2));
        tmp_73_cast_fu_2853_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_73_reg_3830),64));

    tmp_73_fu_2414_p2 <= std_logic_vector(unsigned(tmp_194_reg_3581) + unsigned(tmp_30_fu_2198_p2));
        tmp_74_cast_fu_2857_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_74_reg_3835),64));

    tmp_74_fu_2419_p2 <= std_logic_vector(unsigned(tmp_196_reg_3586) + unsigned(tmp_30_fu_2198_p2));
        tmp_75_cast_fu_2873_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_75_reg_3840),64));

    tmp_75_fu_2424_p2 <= std_logic_vector(unsigned(tmp_198_reg_3591) + unsigned(tmp_30_fu_2198_p2));
        tmp_76_cast_fu_2877_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_76_reg_3845),64));

    tmp_76_fu_2429_p2 <= std_logic_vector(unsigned(tmp_200_reg_3596) + unsigned(tmp_30_fu_2198_p2));
    tmp_77_fu_1547_p3 <= tmp_1_reg_3324(31 downto 31);
    tmp_78_cast_fu_2464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_78_fu_2458_p2),64));
    tmp_78_fu_2458_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(phi_mul_reg_1256));
    tmp_79_cast_fu_2484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_79_fu_2478_p2),64));
    tmp_79_fu_2478_p2 <= std_logic_vector(unsigned(ap_const_lv10_2) + unsigned(phi_mul_reg_1256));
    tmp_7_fu_1503_p4 <= tmp_op_op_fu_1467_p2(31 downto 2);
    tmp_80_cast_fu_2504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_80_fu_2498_p2),64));
    tmp_80_fu_2498_p2 <= std_logic_vector(unsigned(ap_const_lv10_3) + unsigned(phi_mul_reg_1256));
    tmp_81_cast_fu_2516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_81_fu_2510_p2),64));
    tmp_81_fu_2510_p2 <= std_logic_vector(unsigned(ap_const_lv10_4) + unsigned(phi_mul_reg_1256));
    tmp_82_cast_fu_2535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_82_fu_2529_p2),64));
    tmp_82_fu_2529_p2 <= std_logic_vector(unsigned(ap_const_lv10_5) + unsigned(phi_mul_reg_1256));
    tmp_83_cast_fu_2555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_83_fu_2549_p2),64));
    tmp_83_fu_2549_p2 <= std_logic_vector(unsigned(ap_const_lv10_6) + unsigned(phi_mul_reg_1256));
    tmp_84_cast_fu_2575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_84_fu_2569_p2),64));
    tmp_84_fu_2569_p2 <= std_logic_vector(unsigned(ap_const_lv10_7) + unsigned(phi_mul_reg_1256));
    tmp_85_cast_fu_2587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_85_fu_2581_p2),64));
    tmp_85_fu_2581_p2 <= std_logic_vector(unsigned(ap_const_lv10_8) + unsigned(phi_mul_reg_1256));
    tmp_86_cast_fu_2607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_86_fu_2601_p2),64));
    tmp_86_fu_2601_p2 <= std_logic_vector(unsigned(ap_const_lv10_9) + unsigned(phi_mul_reg_1256));
    tmp_87_cast_fu_2627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_87_fu_2621_p2),64));
    tmp_87_fu_2621_p2 <= std_logic_vector(unsigned(ap_const_lv10_A) + unsigned(phi_mul_reg_1256));
    tmp_88_cast_fu_2647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_88_fu_2641_p2),64));
    tmp_88_fu_2641_p2 <= std_logic_vector(unsigned(ap_const_lv10_B) + unsigned(phi_mul_reg_1256));
    tmp_89_cast_fu_2667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_89_fu_2661_p2),64));
    tmp_89_fu_2661_p2 <= std_logic_vector(unsigned(ap_const_lv10_C) + unsigned(phi_mul_reg_1256));
    tmp_90_cast_fu_2687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_90_fu_2681_p2),64));
    tmp_90_fu_2681_p2 <= std_logic_vector(unsigned(ap_const_lv10_D) + unsigned(phi_mul_reg_1256));
    tmp_91_cast_fu_2707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_91_fu_2701_p2),64));
    tmp_91_fu_2701_p2 <= std_logic_vector(unsigned(ap_const_lv10_E) + unsigned(phi_mul_reg_1256));
    tmp_92_cast_fu_2727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_92_fu_2721_p2),64));
    tmp_92_fu_2721_p2 <= std_logic_vector(unsigned(ap_const_lv10_F) + unsigned(phi_mul_reg_1256));
    tmp_93_cast_fu_2747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_93_fu_2741_p2),64));
    tmp_93_fu_2741_p2 <= std_logic_vector(unsigned(ap_const_lv10_10) + unsigned(phi_mul_reg_1256));
    tmp_94_cast_fu_2767_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_94_fu_2761_p2),64));
    tmp_94_fu_2761_p2 <= std_logic_vector(unsigned(ap_const_lv10_11) + unsigned(phi_mul_reg_1256));
    tmp_95_cast_fu_2787_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_95_fu_2781_p2),64));
    tmp_95_fu_2781_p2 <= std_logic_vector(unsigned(ap_const_lv10_12) + unsigned(phi_mul_reg_1256));
    tmp_96_cast_fu_2807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_96_fu_2801_p2),64));
    tmp_96_fu_2801_p2 <= std_logic_vector(unsigned(ap_const_lv10_13) + unsigned(phi_mul_reg_1256));
    tmp_97_cast_fu_2827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_97_fu_2821_p2),64));
    tmp_97_fu_2821_p2 <= std_logic_vector(unsigned(ap_const_lv10_14) + unsigned(phi_mul_reg_1256));
    tmp_98_cast_fu_2847_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_98_fu_2841_p2),64));
    tmp_98_fu_2841_p2 <= std_logic_vector(unsigned(ap_const_lv10_15) + unsigned(phi_mul_reg_1256));
    tmp_99_cast_fu_2867_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_99_fu_2861_p2),64));
    tmp_99_fu_2861_p2 <= std_logic_vector(unsigned(ap_const_lv10_16) + unsigned(phi_mul_reg_1256));
    tmp_V_1_fu_3176_p1 <= p_Val2_s_fu_3155_p1(52 - 1 downto 0);
    tmp_V_2_fu_2960_p4 <= p_Val2_5_reg_3347(62 downto 52);
    tmp_V_3_fu_2969_p1 <= p_Val2_5_reg_3347(52 - 1 downto 0);
    tmp_V_fu_3166_p4 <= p_Val2_s_fu_3155_p1(62 downto 52);
    tmp_fu_1447_p2 <= std_logic_vector(unsigned(sum_row) + unsigned(ap_const_lv32_FFFFFFE8));
    tmp_i_i_i_i1_14_fu_3026_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_5_cast_fu_3022_p1),137));
    tmp_i_i_i_i1_cast_15_fu_3030_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_5_cast_fu_3022_p1),54));
        tmp_i_i_i_i1_cast_fu_3010_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_i_i_i1_fu_3004_p2),12));

    tmp_i_i_i_i1_fu_3004_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_V_2_fu_2960_p4));
    tmp_i_i_i_i_12_fu_3234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_2_cast_fu_3230_p1),137));
    tmp_i_i_i_i_cast_13_fu_3238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_2_cast_fu_3230_p1),54));
        tmp_i_i_i_i_cast_fu_3218_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_i_i_i_fu_3212_p2),12));

    tmp_i_i_i_i_fu_3212_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_V_fu_3166_p4));
    tmp_i_i_i_i_i1_cast1_fu_2986_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_2_fu_2960_p4),12));
    tmp_i_i_i_i_i_cast2_fu_3194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_3166_p4),12));
    tmp_op_op_fu_1467_p2 <= std_logic_vector(unsigned(sum_row) + unsigned(ap_const_lv32_FFFFFFEB));
    tmp_s_fu_2168_p2 <= std_logic_vector(unsigned(p_y_reg_1221) + unsigned(n_cast4_fu_2152_p1));
    ush_1_fu_3014_p3 <= 
        tmp_i_i_i_i1_cast_fu_3010_p1 when (isNeg_1_fu_2996_p3(0) = '1') else 
        sh_assign_3_fu_2990_p2;
    ush_fu_3222_p3 <= 
        tmp_i_i_i_i_cast_fu_3218_p1 when (isNeg_fu_3204_p3(0) = '1') else 
        sh_assign_fu_3198_p2;
    value_assign_1_to_in_fu_1614_p1 <= reg_1425;
    value_assign_to_int_fu_3105_p1 <= reg_1425;

    win_data_1_address0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state24, ap_CS_fsm_state22, phi_mul_cast_reg_3606, ap_CS_fsm_state23, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, grp_integralImages_1_fu_1383_Data_address0, ap_CS_fsm_state44, tmp_78_cast_fu_2464_p1, tmp_79_cast_fu_2484_p1, tmp_80_cast_fu_2504_p1, tmp_85_cast_fu_2587_p1, tmp_87_cast_fu_2627_p1, tmp_89_cast_fu_2667_p1, tmp_91_cast_fu_2707_p1, tmp_93_cast_fu_2747_p1, tmp_95_cast_fu_2787_p1, tmp_97_cast_fu_2827_p1, tmp_99_cast_fu_2867_p1, tmp_101_cast_fu_2905_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            win_data_1_address0 <= tmp_101_cast_fu_2905_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            win_data_1_address0 <= tmp_99_cast_fu_2867_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            win_data_1_address0 <= tmp_97_cast_fu_2827_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            win_data_1_address0 <= tmp_95_cast_fu_2787_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            win_data_1_address0 <= tmp_93_cast_fu_2747_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            win_data_1_address0 <= tmp_91_cast_fu_2707_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            win_data_1_address0 <= tmp_89_cast_fu_2667_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            win_data_1_address0 <= tmp_87_cast_fu_2627_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            win_data_1_address0 <= tmp_85_cast_fu_2587_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            win_data_1_address0 <= tmp_80_cast_fu_2504_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            win_data_1_address0 <= tmp_79_cast_fu_2484_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            win_data_1_address0 <= tmp_78_cast_fu_2464_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            win_data_1_address0 <= phi_mul_cast_reg_3606(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            win_data_1_address0 <= grp_integralImages_1_fu_1383_Data_address0;
        else 
            win_data_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    win_data_1_address1_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state26, tmp_81_cast_fu_2516_p1, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, tmp_82_cast_fu_2535_p1, tmp_83_cast_fu_2555_p1, tmp_84_cast_fu_2575_p1, tmp_86_cast_fu_2607_p1, tmp_88_cast_fu_2647_p1, tmp_90_cast_fu_2687_p1, tmp_92_cast_fu_2727_p1, tmp_94_cast_fu_2767_p1, tmp_96_cast_fu_2807_p1, tmp_98_cast_fu_2847_p1, tmp_100_cast_fu_2887_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            win_data_1_address1 <= tmp_100_cast_fu_2887_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            win_data_1_address1 <= tmp_98_cast_fu_2847_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            win_data_1_address1 <= tmp_96_cast_fu_2807_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            win_data_1_address1 <= tmp_94_cast_fu_2767_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            win_data_1_address1 <= tmp_92_cast_fu_2727_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            win_data_1_address1 <= tmp_90_cast_fu_2687_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            win_data_1_address1 <= tmp_88_cast_fu_2647_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            win_data_1_address1 <= tmp_86_cast_fu_2607_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            win_data_1_address1 <= tmp_84_cast_fu_2575_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            win_data_1_address1 <= tmp_83_cast_fu_2555_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            win_data_1_address1 <= tmp_82_cast_fu_2535_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            win_data_1_address1 <= tmp_81_cast_fu_2516_p1(10 - 1 downto 0);
        else 
            win_data_1_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    win_data_1_ce0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state24, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, grp_integralImages_1_fu_1383_Data_ce0, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            win_data_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            win_data_1_ce0 <= grp_integralImages_1_fu_1383_Data_ce0;
        else 
            win_data_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    win_data_1_ce1_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            win_data_1_ce1 <= ap_const_logic_1;
        else 
            win_data_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    win_data_1_d1_assign_proc : process(IMG1_data_q0, reg_1436, ap_CS_fsm_state24, reg_1441, ap_CS_fsm_state26, IMG1_data_load_6_reg_3890, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            win_data_1_d1 <= IMG1_data_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            win_data_1_d1 <= IMG1_data_load_6_reg_3890;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            win_data_1_d1 <= reg_1441;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            win_data_1_d1 <= reg_1436;
        else 
            win_data_1_d1 <= "XXXXXXXX";
        end if; 
    end process;


    win_data_1_we0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state24, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            win_data_1_we0 <= ap_const_logic_1;
        else 
            win_data_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    win_data_1_we1_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            win_data_1_we1 <= ap_const_logic_1;
        else 
            win_data_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    win_data_2_address0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state24, ap_CS_fsm_state22, phi_mul_cast_reg_3606, ap_CS_fsm_state23, tmp_81_cast_reg_3905, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, grp_integralImages_2_fu_1390_Data_address0, ap_CS_fsm_state44, tmp_78_cast_fu_2464_p1, tmp_79_cast_fu_2484_p1, tmp_80_cast_fu_2504_p1, tmp_85_cast_fu_2587_p1, tmp_89_cast_fu_2667_p1, tmp_91_cast_fu_2707_p1, tmp_93_cast_fu_2747_p1, tmp_95_cast_fu_2787_p1, tmp_97_cast_fu_2827_p1, tmp_99_cast_fu_2867_p1, tmp_101_cast_fu_2905_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            win_data_2_address0 <= tmp_101_cast_fu_2905_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            win_data_2_address0 <= tmp_99_cast_fu_2867_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            win_data_2_address0 <= tmp_97_cast_fu_2827_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            win_data_2_address0 <= tmp_95_cast_fu_2787_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            win_data_2_address0 <= tmp_93_cast_fu_2747_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            win_data_2_address0 <= tmp_91_cast_fu_2707_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            win_data_2_address0 <= tmp_89_cast_fu_2667_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            win_data_2_address0 <= tmp_85_cast_fu_2587_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            win_data_2_address0 <= tmp_81_cast_reg_3905(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            win_data_2_address0 <= tmp_80_cast_fu_2504_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            win_data_2_address0 <= tmp_79_cast_fu_2484_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            win_data_2_address0 <= tmp_78_cast_fu_2464_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            win_data_2_address0 <= phi_mul_cast_reg_3606(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            win_data_2_address0 <= grp_integralImages_2_fu_1390_Data_address0;
        else 
            win_data_2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    win_data_2_address1_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, tmp_82_cast_fu_2535_p1, tmp_83_cast_fu_2555_p1, tmp_84_cast_fu_2575_p1, tmp_86_cast_fu_2607_p1, tmp_87_cast_fu_2627_p1, tmp_88_cast_fu_2647_p1, tmp_90_cast_fu_2687_p1, tmp_92_cast_fu_2727_p1, tmp_94_cast_fu_2767_p1, tmp_96_cast_fu_2807_p1, tmp_98_cast_fu_2847_p1, tmp_100_cast_fu_2887_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            win_data_2_address1 <= tmp_100_cast_fu_2887_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            win_data_2_address1 <= tmp_98_cast_fu_2847_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            win_data_2_address1 <= tmp_96_cast_fu_2807_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            win_data_2_address1 <= tmp_94_cast_fu_2767_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            win_data_2_address1 <= tmp_92_cast_fu_2727_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            win_data_2_address1 <= tmp_90_cast_fu_2687_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            win_data_2_address1 <= tmp_88_cast_fu_2647_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            win_data_2_address1 <= tmp_87_cast_fu_2627_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            win_data_2_address1 <= tmp_86_cast_fu_2607_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            win_data_2_address1 <= tmp_84_cast_fu_2575_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            win_data_2_address1 <= tmp_83_cast_fu_2555_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            win_data_2_address1 <= tmp_82_cast_fu_2535_p1(10 - 1 downto 0);
        else 
            win_data_2_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    win_data_2_ce0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state24, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, grp_integralImages_2_fu_1390_Data_ce0, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            win_data_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            win_data_2_ce0 <= grp_integralImages_2_fu_1390_Data_ce0;
        else 
            win_data_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    win_data_2_ce1_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            win_data_2_ce1 <= ap_const_logic_1;
        else 
            win_data_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    win_data_2_d0_assign_proc : process(IMG1_data_q0, IMG1_data_q1, ap_CS_fsm_state21, ap_CS_fsm_state24, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            win_data_2_d0 <= IMG1_data_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            win_data_2_d0 <= IMG1_data_q1;
        else 
            win_data_2_d0 <= "XXXXXXXX";
        end if; 
    end process;


    win_data_2_d1_assign_proc : process(IMG1_data_q0, IMG1_data_q1, reg_1441, ap_CS_fsm_state26, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            win_data_2_d1 <= reg_1441;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            win_data_2_d1 <= IMG1_data_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            win_data_2_d1 <= IMG1_data_q1;
        else 
            win_data_2_d1 <= "XXXXXXXX";
        end if; 
    end process;


    win_data_2_we0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state24, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            win_data_2_we0 <= ap_const_logic_1;
        else 
            win_data_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    win_data_2_we1_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            win_data_2_we1 <= ap_const_logic_1;
        else 
            win_data_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    x_fu_1802_p2 <= std_logic_vector(unsigned(ap_const_lv32_8) + unsigned(p_x_reg_1233));
    y_fu_2142_p2 <= std_logic_vector(unsigned(p_y_reg_1221) + unsigned(ap_const_lv32_4));
end behav;
