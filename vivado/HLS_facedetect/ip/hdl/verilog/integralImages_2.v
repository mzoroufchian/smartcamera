// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module integralImages_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Data_address0,
        Data_ce0,
        Data_q0,
        Sum_address0,
        Sum_ce0,
        Sum_q0,
        Sum_address1,
        Sum_ce1,
        Sum_we1,
        Sum_d1,
        Sqsum_address0,
        Sqsum_ce0,
        Sqsum_q0,
        Sqsum_address1,
        Sqsum_ce1,
        Sqsum_we1,
        Sqsum_d1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] Data_address0;
output   Data_ce0;
input  [7:0] Data_q0;
output  [9:0] Sum_address0;
output   Sum_ce0;
input  [31:0] Sum_q0;
output  [9:0] Sum_address1;
output   Sum_ce1;
output   Sum_we1;
output  [31:0] Sum_d1;
output  [9:0] Sqsum_address0;
output   Sqsum_ce0;
input  [31:0] Sqsum_q0;
output  [9:0] Sqsum_address1;
output   Sqsum_ce1;
output   Sqsum_we1;
output  [31:0] Sqsum_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Data_ce0;
reg Sum_ce0;
reg Sum_ce1;
reg Sum_we1;
reg Sqsum_ce0;
reg Sqsum_ce1;
reg Sqsum_we1;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] indvar_flatten_reg_117;
reg   [4:0] y_reg_128;
reg   [12:0] s_reg_139;
reg   [4:0] x_reg_151;
reg   [20:0] sq_reg_162;
wire   [0:0] exitcond_flatten_fu_174_p2;
reg   [0:0] exitcond_flatten_reg_348;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten_reg_348_pp0_iter1_reg;
reg   [0:0] exitcond_flatten_reg_348_pp0_iter2_reg;
reg   [0:0] exitcond_flatten_reg_348_pp0_iter3_reg;
wire   [9:0] indvar_flatten_next_fu_180_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond6_fu_192_p2;
reg   [0:0] exitcond6_reg_357;
reg   [0:0] exitcond6_reg_357_pp0_iter1_reg;
reg   [0:0] exitcond6_reg_357_pp0_iter2_reg;
wire   [4:0] x_mid2_fu_198_p3;
reg   [4:0] x_mid2_reg_363;
wire   [4:0] tmp_mid2_v_fu_206_p3;
reg   [4:0] tmp_mid2_v_reg_369;
wire   [0:0] tmp_mid2_fu_226_p3;
reg   [0:0] tmp_mid2_reg_376;
reg   [0:0] tmp_mid2_reg_376_pp0_iter1_reg;
reg   [0:0] tmp_mid2_reg_376_pp0_iter2_reg;
wire   [4:0] x_1_fu_234_p2;
wire   [63:0] tmp_112_cast_fu_252_p1;
reg   [63:0] tmp_112_cast_reg_387;
reg   [63:0] tmp_112_cast_reg_387_pp0_iter2_reg;
reg   [63:0] tmp_112_cast_reg_387_pp0_iter3_reg;
wire  signed [63:0] tmp_113_cast_fu_256_p1;
reg  signed [63:0] tmp_113_cast_reg_398;
reg   [7:0] it_reg_413;
wire   [12:0] s_2_fu_271_p2;
reg   [12:0] s_2_reg_418;
reg    ap_enable_reg_pp0_iter2;
reg   [31:0] Sum_load_reg_424;
wire   [20:0] grp_fu_339_p3;
reg   [20:0] sq_2_reg_429;
reg    ap_enable_reg_pp0_iter3;
wire   [31:0] tq_2_fu_312_p3;
reg   [31:0] tq_2_reg_434;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter4;
reg   [4:0] ap_phi_mux_y_phi_fu_132_p4;
wire    ap_block_pp0_stage0;
reg   [12:0] ap_phi_mux_s_phi_fu_143_p4;
reg   [20:0] ap_phi_mux_sq_phi_fu_166_p4;
wire   [4:0] y_1_fu_186_p2;
wire   [0:0] tmp_mid1_fu_214_p2;
wire   [0:0] tmp_1_fu_220_p2;
wire   [9:0] grp_fu_319_p3;
wire  signed [10:0] grp_fu_328_p4;
wire   [12:0] s_mid2_fu_260_p3;
wire   [12:0] tmp_24_cast_fu_267_p1;
wire   [31:0] s_2_cast_fu_287_p1;
wire   [31:0] sq_2_cast_fu_290_p1;
wire   [31:0] t_1_fu_293_p2;
wire   [31:0] tq_1_fu_298_p2;
wire   [4:0] grp_fu_319_p0;
wire   [5:0] grp_fu_319_p1;
wire   [4:0] grp_fu_319_p2;
wire   [4:0] grp_fu_328_p0;
wire  signed [0:0] grp_fu_328_p1;
wire   [5:0] grp_fu_328_p2;
wire   [4:0] grp_fu_328_p3;
wire   [7:0] grp_fu_339_p0;
wire   [15:0] tmp_24_cast1_fu_284_p1;
wire   [7:0] grp_fu_339_p1;
wire   [20:0] grp_fu_339_p2;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] grp_fu_319_p00;
wire   [9:0] grp_fu_319_p20;
wire   [5:0] grp_fu_328_p00;
wire   [10:0] grp_fu_328_p30;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

detectFaces_mac_mdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 10 ))
detectFaces_mac_mdEe_U18(
    .din0(grp_fu_319_p0),
    .din1(grp_fu_319_p1),
    .din2(grp_fu_319_p2),
    .dout(grp_fu_319_p3)
);

detectFaces_ama_aeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 5 ),
    .dout_WIDTH( 11 ))
detectFaces_ama_aeOg_U19(
    .din0(grp_fu_328_p0),
    .din1(grp_fu_328_p1),
    .din2(grp_fu_328_p2),
    .din3(grp_fu_328_p3),
    .dout(grp_fu_328_p4)
);

detectFaces_mac_mfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 21 ),
    .dout_WIDTH( 21 ))
detectFaces_mac_mfYi_U20(
    .din0(grp_fu_339_p0),
    .din1(grp_fu_339_p1),
    .din2(grp_fu_339_p2),
    .dout(grp_fu_339_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_174_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_117 <= indvar_flatten_next_fu_180_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_117 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_348_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        s_reg_139 <= s_2_reg_418;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        s_reg_139 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_348_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        sq_reg_162 <= sq_2_reg_429;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sq_reg_162 <= 21'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_174_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_reg_151 <= x_1_fu_234_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_reg_151 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_348 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        y_reg_128 <= tmp_mid2_v_reg_369;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        y_reg_128 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_mid2_reg_376_pp0_iter1_reg == 1'd0) & (exitcond_flatten_reg_348_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Sum_load_reg_424 <= Sum_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_174_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond6_reg_357 <= exitcond6_fu_192_p2;
        tmp_mid2_reg_376 <= tmp_mid2_fu_226_p3;
        x_mid2_reg_363 <= x_mid2_fu_198_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond6_reg_357_pp0_iter1_reg <= exitcond6_reg_357;
        exitcond_flatten_reg_348 <= exitcond_flatten_fu_174_p2;
        exitcond_flatten_reg_348_pp0_iter1_reg <= exitcond_flatten_reg_348;
        tmp_mid2_reg_376_pp0_iter1_reg <= tmp_mid2_reg_376;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond6_reg_357_pp0_iter2_reg <= exitcond6_reg_357_pp0_iter1_reg;
        exitcond_flatten_reg_348_pp0_iter2_reg <= exitcond_flatten_reg_348_pp0_iter1_reg;
        exitcond_flatten_reg_348_pp0_iter3_reg <= exitcond_flatten_reg_348_pp0_iter2_reg;
        tmp_112_cast_reg_387_pp0_iter2_reg[9 : 0] <= tmp_112_cast_reg_387[9 : 0];
        tmp_112_cast_reg_387_pp0_iter3_reg[9 : 0] <= tmp_112_cast_reg_387_pp0_iter2_reg[9 : 0];
        tmp_mid2_reg_376_pp0_iter2_reg <= tmp_mid2_reg_376_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_348_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        it_reg_413 <= Data_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_348_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        s_2_reg_418 <= s_2_fu_271_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_348_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        sq_2_reg_429 <= grp_fu_339_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_348 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_112_cast_reg_387[9 : 0] <= tmp_112_cast_fu_252_p1[9 : 0];
        tmp_113_cast_reg_398 <= tmp_113_cast_fu_256_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_174_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_mid2_v_reg_369 <= tmp_mid2_v_fu_206_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_348_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tq_2_reg_434 <= tq_2_fu_312_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        Data_ce0 = 1'b1;
    end else begin
        Data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Sqsum_ce0 = 1'b1;
    end else begin
        Sqsum_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        Sqsum_ce1 = 1'b1;
    end else begin
        Sqsum_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_348_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        Sqsum_we1 = 1'b1;
    end else begin
        Sqsum_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        Sum_ce0 = 1'b1;
    end else begin
        Sum_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Sum_ce1 = 1'b1;
    end else begin
        Sum_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_348_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Sum_we1 = 1'b1;
    end else begin
        Sum_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_174_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_348_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_s_phi_fu_143_p4 = s_2_reg_418;
    end else begin
        ap_phi_mux_s_phi_fu_143_p4 = s_reg_139;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_348_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_sq_phi_fu_166_p4 = sq_2_reg_429;
    end else begin
        ap_phi_mux_sq_phi_fu_166_p4 = sq_reg_162;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_348 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_y_phi_fu_132_p4 = tmp_mid2_v_reg_369;
    end else begin
        ap_phi_mux_y_phi_fu_132_p4 = y_reg_128;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten_fu_174_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((exitcond_flatten_fu_174_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Data_address0 = tmp_112_cast_fu_252_p1;

assign Sqsum_address0 = tmp_113_cast_reg_398;

assign Sqsum_address1 = tmp_112_cast_reg_387_pp0_iter3_reg;

assign Sqsum_d1 = tq_2_reg_434;

assign Sum_address0 = tmp_113_cast_fu_256_p1;

assign Sum_address1 = tmp_112_cast_reg_387_pp0_iter2_reg;

assign Sum_d1 = ((tmp_mid2_reg_376_pp0_iter2_reg[0:0] === 1'b1) ? s_2_cast_fu_287_p1 : t_1_fu_293_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond6_fu_192_p2 = ((x_reg_151 == 5'd25) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_174_p2 = ((indvar_flatten_reg_117 == 10'd625) ? 1'b1 : 1'b0);

assign grp_fu_319_p0 = grp_fu_319_p00;

assign grp_fu_319_p00 = tmp_mid2_v_reg_369;

assign grp_fu_319_p1 = 10'd25;

assign grp_fu_319_p2 = grp_fu_319_p20;

assign grp_fu_319_p20 = x_mid2_reg_363;

assign grp_fu_328_p0 = grp_fu_328_p00;

assign grp_fu_328_p00 = tmp_mid2_v_reg_369;

assign grp_fu_328_p1 = 6'd63;

assign grp_fu_328_p2 = 11'd25;

assign grp_fu_328_p3 = grp_fu_328_p30;

assign grp_fu_328_p30 = x_mid2_reg_363;

assign grp_fu_339_p0 = tmp_24_cast1_fu_284_p1;

assign grp_fu_339_p1 = tmp_24_cast1_fu_284_p1;

assign grp_fu_339_p2 = ((exitcond6_reg_357_pp0_iter2_reg[0:0] === 1'b1) ? 21'd0 : ap_phi_mux_sq_phi_fu_166_p4);

assign indvar_flatten_next_fu_180_p2 = (indvar_flatten_reg_117 + 10'd1);

assign s_2_cast_fu_287_p1 = s_2_reg_418;

assign s_2_fu_271_p2 = (s_mid2_fu_260_p3 + tmp_24_cast_fu_267_p1);

assign s_mid2_fu_260_p3 = ((exitcond6_reg_357_pp0_iter1_reg[0:0] === 1'b1) ? 13'd0 : ap_phi_mux_s_phi_fu_143_p4);

assign sq_2_cast_fu_290_p1 = grp_fu_339_p3;

assign t_1_fu_293_p2 = (s_2_cast_fu_287_p1 + Sum_load_reg_424);

assign tmp_112_cast_fu_252_p1 = grp_fu_319_p3;

assign tmp_113_cast_fu_256_p1 = grp_fu_328_p4;

assign tmp_1_fu_220_p2 = ((ap_phi_mux_y_phi_fu_132_p4 == 5'd0) ? 1'b1 : 1'b0);

assign tmp_24_cast1_fu_284_p1 = it_reg_413;

assign tmp_24_cast_fu_267_p1 = Data_q0;

assign tmp_mid1_fu_214_p2 = ((y_1_fu_186_p2 == 5'd0) ? 1'b1 : 1'b0);

assign tmp_mid2_fu_226_p3 = ((exitcond6_fu_192_p2[0:0] === 1'b1) ? tmp_mid1_fu_214_p2 : tmp_1_fu_220_p2);

assign tmp_mid2_v_fu_206_p3 = ((exitcond6_fu_192_p2[0:0] === 1'b1) ? y_1_fu_186_p2 : ap_phi_mux_y_phi_fu_132_p4);

assign tq_1_fu_298_p2 = (sq_2_cast_fu_290_p1 + Sqsum_q0);

assign tq_2_fu_312_p3 = ((tmp_mid2_reg_376_pp0_iter2_reg[0:0] === 1'b1) ? sq_2_cast_fu_290_p1 : tq_1_fu_298_p2);

assign x_1_fu_234_p2 = (x_mid2_fu_198_p3 + 5'd1);

assign x_mid2_fu_198_p3 = ((exitcond6_fu_192_p2[0:0] === 1'b1) ? 5'd0 : x_reg_151);

assign y_1_fu_186_p2 = (ap_phi_mux_y_phi_fu_132_p4 + 5'd1);

always @ (posedge ap_clk) begin
    tmp_112_cast_reg_387[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    tmp_112_cast_reg_387_pp0_iter2_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    tmp_112_cast_reg_387_pp0_iter3_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
end

endmodule //integralImages_2
