// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module imageScaler (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Data_address0,
        Data_ce0,
        Data_q0,
        dest_height,
        dest_width,
        IMG1_data_address0,
        IMG1_data_ce0,
        IMG1_data_we0,
        IMG1_data_d0
);

parameter    ap_ST_fsm_state1 = 33'd1;
parameter    ap_ST_fsm_state2 = 33'd2;
parameter    ap_ST_fsm_state3 = 33'd4;
parameter    ap_ST_fsm_state4 = 33'd8;
parameter    ap_ST_fsm_state5 = 33'd16;
parameter    ap_ST_fsm_state6 = 33'd32;
parameter    ap_ST_fsm_state7 = 33'd64;
parameter    ap_ST_fsm_state8 = 33'd128;
parameter    ap_ST_fsm_state9 = 33'd256;
parameter    ap_ST_fsm_state10 = 33'd512;
parameter    ap_ST_fsm_state11 = 33'd1024;
parameter    ap_ST_fsm_state12 = 33'd2048;
parameter    ap_ST_fsm_state13 = 33'd4096;
parameter    ap_ST_fsm_state14 = 33'd8192;
parameter    ap_ST_fsm_state15 = 33'd16384;
parameter    ap_ST_fsm_state16 = 33'd32768;
parameter    ap_ST_fsm_state17 = 33'd65536;
parameter    ap_ST_fsm_state18 = 33'd131072;
parameter    ap_ST_fsm_state19 = 33'd262144;
parameter    ap_ST_fsm_state20 = 33'd524288;
parameter    ap_ST_fsm_state21 = 33'd1048576;
parameter    ap_ST_fsm_state22 = 33'd2097152;
parameter    ap_ST_fsm_state23 = 33'd4194304;
parameter    ap_ST_fsm_state24 = 33'd8388608;
parameter    ap_ST_fsm_state25 = 33'd16777216;
parameter    ap_ST_fsm_state26 = 33'd33554432;
parameter    ap_ST_fsm_state27 = 33'd67108864;
parameter    ap_ST_fsm_state28 = 33'd134217728;
parameter    ap_ST_fsm_state29 = 33'd268435456;
parameter    ap_ST_fsm_state30 = 33'd536870912;
parameter    ap_ST_fsm_state31 = 33'd1073741824;
parameter    ap_ST_fsm_pp0_stage0 = 33'd2147483648;
parameter    ap_ST_fsm_state36 = 33'd4294967296;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [16:0] Data_address0;
output   Data_ce0;
input  [7:0] Data_q0;
input  [31:0] dest_height;
input  [31:0] dest_width;
output  [16:0] IMG1_data_address0;
output   IMG1_data_ce0;
output   IMG1_data_we0;
output  [7:0] IMG1_data_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Data_ce0;
reg IMG1_data_ce0;
reg IMG1_data_we0;

(* fsm_encoding = "none" *) reg   [32:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [16:0] indvar_flatten_reg_119;
reg   [7:0] i_reg_130;
reg   [8:0] j_reg_141;
wire    ap_CS_fsm_state2;
wire  signed [31:0] x_ratio_fu_164_p2;
reg  signed [31:0] x_ratio_reg_391;
wire    ap_CS_fsm_state31;
wire  signed [31:0] y_ratio_fu_170_p2;
reg  signed [31:0] y_ratio_reg_396;
wire   [0:0] tmp_31_fu_180_p2;
reg   [0:0] tmp_31_reg_401;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state32_pp0_stage0_iter0;
wire    ap_block_state33_pp0_stage0_iter1;
wire    ap_block_state34_pp0_stage0_iter2;
wire    ap_block_state35_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] exitcond_flatten_fu_185_p2;
reg   [0:0] exitcond_flatten_reg_406;
wire   [16:0] indvar_flatten_next_fu_191_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond7_fu_203_p2;
reg   [0:0] exitcond7_reg_415;
wire   [8:0] j_mid2_fu_209_p3;
reg   [8:0] j_mid2_reg_420;
reg   [8:0] j_mid2_reg_420_pp0_iter1_reg;
reg   [8:0] j_mid2_reg_420_pp0_iter2_reg;
wire   [0:0] tmp_34_mid1_fu_221_p2;
reg   [0:0] tmp_34_mid1_reg_426;
wire   [7:0] tmp_36_mid2_v_v_v_v_fu_226_p3;
reg   [7:0] tmp_36_mid2_v_v_v_v_reg_431;
reg   [7:0] tmp_36_mid2_v_v_v_v_reg_431_pp0_iter1_reg;
reg   [7:0] tmp_36_mid2_v_v_v_v_reg_431_pp0_iter2_reg;
wire   [8:0] j_1_fu_234_p2;
reg   [9:0] tmp_278_reg_444;
reg   [11:0] tmp_279_reg_449;
wire   [0:0] or_cond_fu_281_p2;
reg   [0:0] or_cond_reg_454;
reg   [0:0] or_cond_reg_454_pp0_iter2_reg;
reg   [15:0] tmp_280_reg_458;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state32;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg   [7:0] ap_phi_mux_i_phi_fu_134_p4;
wire    ap_block_pp0_stage0;
wire  signed [63:0] tmp_180_cast_fu_331_p1;
wire   [63:0] tmp_181_cast_fu_373_p1;
wire   [26:0] grp_fu_152_p0;
wire   [25:0] grp_fu_158_p0;
wire   [31:0] grp_fu_152_p2;
wire   [31:0] grp_fu_158_p2;
wire   [31:0] i_cast2_fu_176_p1;
wire   [7:0] i_2_fu_197_p2;
wire   [31:0] i_cast2_mid1_fu_217_p1;
wire   [7:0] tmp_36_mid2_v_v_v_fu_248_p1;
wire   [31:0] tmp_36_mid2_v_v_v_fu_248_p2;
wire   [31:0] j_cast1_fu_273_p1;
wire   [0:0] tmp_33_fu_276_p2;
wire   [0:0] tmp_34_mid2_fu_240_p3;
wire   [8:0] tmp_34_fu_287_p0;
wire   [31:0] tmp_34_fu_287_p2;
wire   [17:0] p_shl2_cast_fu_302_p3;
wire   [17:0] p_shl3_cast_fu_309_p3;
wire   [17:0] tmp_143_fu_316_p2;
wire  signed [17:0] tmp_36_cast_fu_322_p1;
wire   [17:0] tmp_147_fu_325_p2;
wire   [15:0] tmp_144_fu_336_p3;
wire   [13:0] tmp_145_fu_347_p3;
wire   [16:0] p_shl_cast_fu_343_p1;
wire   [16:0] p_shl1_cast_fu_354_p1;
wire   [16:0] tmp_146_fu_358_p2;
wire   [16:0] tmp_37_cast_fu_364_p1;
wire   [16:0] tmp_148_fu_367_p2;
reg    grp_fu_152_ap_start;
wire    grp_fu_152_ap_done;
reg    grp_fu_158_ap_start;
wire    grp_fu_158_ap_done;
wire    ap_CS_fsm_state36;
reg   [32:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] tmp_36_mid2_v_v_v_fu_248_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 33'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

detectFaces_sdiv_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 27 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
detectFaces_sdiv_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_152_ap_start),
    .done(grp_fu_152_ap_done),
    .din0(grp_fu_152_p0),
    .din1(dest_width),
    .ce(1'b1),
    .dout(grp_fu_152_p2)
);

detectFaces_sdiv_cud #(
    .ID( 1 ),
    .NUM_STAGE( 30 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
detectFaces_sdiv_cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_158_ap_start),
    .done(grp_fu_158_ap_done),
    .din0(grp_fu_158_p0),
    .din1(dest_height),
    .ce(1'b1),
    .dout(grp_fu_158_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state32) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state31)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state32)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state32);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state31)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten_reg_406 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_130 <= tmp_36_mid2_v_v_v_v_reg_431;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        i_reg_130 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_fu_185_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_119 <= indvar_flatten_next_fu_191_p2;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        indvar_flatten_reg_119 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_fu_185_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_reg_141 <= j_1_fu_234_p2;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        j_reg_141 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_fu_185_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond7_reg_415 <= exitcond7_fu_203_p2;
        j_mid2_reg_420 <= j_mid2_fu_209_p3;
        tmp_34_mid1_reg_426 <= tmp_34_mid1_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten_reg_406 <= exitcond_flatten_fu_185_p2;
        j_mid2_reg_420_pp0_iter1_reg <= j_mid2_reg_420;
        tmp_31_reg_401 <= tmp_31_fu_180_p2;
        tmp_36_mid2_v_v_v_v_reg_431_pp0_iter1_reg <= tmp_36_mid2_v_v_v_v_reg_431;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        j_mid2_reg_420_pp0_iter2_reg <= j_mid2_reg_420_pp0_iter1_reg;
        or_cond_reg_454_pp0_iter2_reg <= or_cond_reg_454;
        tmp_36_mid2_v_v_v_v_reg_431_pp0_iter2_reg <= tmp_36_mid2_v_v_v_v_reg_431_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_406 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        or_cond_reg_454 <= or_cond_fu_281_p2;
        tmp_278_reg_444 <= {{tmp_36_mid2_v_v_v_fu_248_p2[25:16]}};
        tmp_279_reg_449 <= {{tmp_36_mid2_v_v_v_fu_248_p2[27:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (or_cond_fu_281_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_280_reg_458 <= {{tmp_34_fu_287_p2[31:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_fu_185_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_36_mid2_v_v_v_v_reg_431 <= tmp_36_mid2_v_v_v_v_fu_226_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        x_ratio_reg_391 <= x_ratio_fu_164_p2;
        y_ratio_reg_396 <= y_ratio_fu_170_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Data_ce0 = 1'b1;
    end else begin
        Data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        IMG1_data_ce0 = 1'b1;
    end else begin
        IMG1_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (or_cond_reg_454_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        IMG1_data_we0 = 1'b1;
    end else begin
        IMG1_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_185_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state32 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state32 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_406 == 1'd0))) begin
        ap_phi_mux_i_phi_fu_134_p4 = tmp_36_mid2_v_v_v_v_reg_431;
    end else begin
        ap_phi_mux_i_phi_fu_134_p4 = i_reg_130;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_152_ap_start = 1'b1;
    end else begin
        grp_fu_152_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_158_ap_start = 1'b1;
    end else begin
        grp_fu_158_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten_fu_185_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten_fu_185_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Data_address0 = tmp_180_cast_fu_331_p1;

assign IMG1_data_address0 = tmp_181_cast_fu_373_p1;

assign IMG1_data_d0 = Data_q0;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd32];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond7_fu_203_p2 = ((j_reg_141 == 9'd320) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_185_p2 = ((indvar_flatten_reg_119 == 17'd76800) ? 1'b1 : 1'b0);

assign grp_fu_152_p0 = 32'd20971520;

assign grp_fu_158_p0 = 32'd15728640;

assign i_2_fu_197_p2 = (ap_phi_mux_i_phi_fu_134_p4 + 8'd1);

assign i_cast2_fu_176_p1 = ap_phi_mux_i_phi_fu_134_p4;

assign i_cast2_mid1_fu_217_p1 = i_2_fu_197_p2;

assign indvar_flatten_next_fu_191_p2 = (indvar_flatten_reg_119 + 17'd1);

assign j_1_fu_234_p2 = (j_mid2_fu_209_p3 + 9'd1);

assign j_cast1_fu_273_p1 = j_mid2_reg_420;

assign j_mid2_fu_209_p3 = ((exitcond7_fu_203_p2[0:0] === 1'b1) ? 9'd0 : j_reg_141);

assign or_cond_fu_281_p2 = (tmp_34_mid2_fu_240_p3 & tmp_33_fu_276_p2);

assign p_shl1_cast_fu_354_p1 = tmp_145_fu_347_p3;

assign p_shl2_cast_fu_302_p3 = {{tmp_278_reg_444}, {8'd0}};

assign p_shl3_cast_fu_309_p3 = {{tmp_279_reg_449}, {6'd0}};

assign p_shl_cast_fu_343_p1 = tmp_144_fu_336_p3;

assign tmp_143_fu_316_p2 = (p_shl2_cast_fu_302_p3 + p_shl3_cast_fu_309_p3);

assign tmp_144_fu_336_p3 = {{tmp_36_mid2_v_v_v_v_reg_431_pp0_iter2_reg}, {8'd0}};

assign tmp_145_fu_347_p3 = {{tmp_36_mid2_v_v_v_v_reg_431_pp0_iter2_reg}, {6'd0}};

assign tmp_146_fu_358_p2 = (p_shl_cast_fu_343_p1 + p_shl1_cast_fu_354_p1);

assign tmp_147_fu_325_p2 = ($signed(tmp_143_fu_316_p2) + $signed(tmp_36_cast_fu_322_p1));

assign tmp_148_fu_367_p2 = (tmp_146_fu_358_p2 + tmp_37_cast_fu_364_p1);

assign tmp_180_cast_fu_331_p1 = $signed(tmp_147_fu_325_p2);

assign tmp_181_cast_fu_373_p1 = tmp_148_fu_367_p2;

assign tmp_31_fu_180_p2 = (($signed(i_cast2_fu_176_p1) < $signed(dest_height)) ? 1'b1 : 1'b0);

assign tmp_33_fu_276_p2 = (($signed(j_cast1_fu_273_p1) < $signed(dest_width)) ? 1'b1 : 1'b0);

assign tmp_34_fu_287_p0 = j_cast1_fu_273_p1;

assign tmp_34_fu_287_p2 = ($signed({{1'b0}, {tmp_34_fu_287_p0}}) * $signed(x_ratio_reg_391));

assign tmp_34_mid1_fu_221_p2 = (($signed(i_cast2_mid1_fu_217_p1) < $signed(dest_height)) ? 1'b1 : 1'b0);

assign tmp_34_mid2_fu_240_p3 = ((exitcond7_reg_415[0:0] === 1'b1) ? tmp_34_mid1_reg_426 : tmp_31_reg_401);

assign tmp_36_cast_fu_322_p1 = $signed(tmp_280_reg_458);

assign tmp_36_mid2_v_v_v_fu_248_p1 = tmp_36_mid2_v_v_v_fu_248_p10;

assign tmp_36_mid2_v_v_v_fu_248_p10 = tmp_36_mid2_v_v_v_v_reg_431;

assign tmp_36_mid2_v_v_v_fu_248_p2 = ($signed(y_ratio_reg_396) * $signed({{1'b0}, {tmp_36_mid2_v_v_v_fu_248_p1}}));

assign tmp_36_mid2_v_v_v_v_fu_226_p3 = ((exitcond7_fu_203_p2[0:0] === 1'b1) ? i_2_fu_197_p2 : ap_phi_mux_i_phi_fu_134_p4);

assign tmp_37_cast_fu_364_p1 = j_mid2_reg_420_pp0_iter2_reg;

assign x_ratio_fu_164_p2 = (grp_fu_152_p2 + 32'd1);

assign y_ratio_fu_170_p2 = (grp_fu_158_p2 + 32'd1);

endmodule //imageScaler
