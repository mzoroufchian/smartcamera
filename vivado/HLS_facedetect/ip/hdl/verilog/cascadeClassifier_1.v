// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cascadeClassifier_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        II_address0,
        II_ce0,
        II_q0,
        II_address1,
        II_ce1,
        II_q1,
        SII_address0,
        SII_ce0,
        SII_q0,
        SII_address1,
        SII_ce1,
        SII_q1,
        ap_return
);

parameter    ap_ST_fsm_state1 = 37'd1;
parameter    ap_ST_fsm_state2 = 37'd2;
parameter    ap_ST_fsm_state3 = 37'd4;
parameter    ap_ST_fsm_state4 = 37'd8;
parameter    ap_ST_fsm_state5 = 37'd16;
parameter    ap_ST_fsm_state6 = 37'd32;
parameter    ap_ST_fsm_state7 = 37'd64;
parameter    ap_ST_fsm_state8 = 37'd128;
parameter    ap_ST_fsm_state9 = 37'd256;
parameter    ap_ST_fsm_state10 = 37'd512;
parameter    ap_ST_fsm_state11 = 37'd1024;
parameter    ap_ST_fsm_state12 = 37'd2048;
parameter    ap_ST_fsm_state13 = 37'd4096;
parameter    ap_ST_fsm_state14 = 37'd8192;
parameter    ap_ST_fsm_state15 = 37'd16384;
parameter    ap_ST_fsm_state16 = 37'd32768;
parameter    ap_ST_fsm_state17 = 37'd65536;
parameter    ap_ST_fsm_state18 = 37'd131072;
parameter    ap_ST_fsm_state19 = 37'd262144;
parameter    ap_ST_fsm_state20 = 37'd524288;
parameter    ap_ST_fsm_state21 = 37'd1048576;
parameter    ap_ST_fsm_state22 = 37'd2097152;
parameter    ap_ST_fsm_state23 = 37'd4194304;
parameter    ap_ST_fsm_state24 = 37'd8388608;
parameter    ap_ST_fsm_state25 = 37'd16777216;
parameter    ap_ST_fsm_state26 = 37'd33554432;
parameter    ap_ST_fsm_state27 = 37'd67108864;
parameter    ap_ST_fsm_state28 = 37'd134217728;
parameter    ap_ST_fsm_state29 = 37'd268435456;
parameter    ap_ST_fsm_state30 = 37'd536870912;
parameter    ap_ST_fsm_state31 = 37'd1073741824;
parameter    ap_ST_fsm_state32 = 37'd2147483648;
parameter    ap_ST_fsm_state33 = 37'd4294967296;
parameter    ap_ST_fsm_state34 = 37'd8589934592;
parameter    ap_ST_fsm_state35 = 37'd17179869184;
parameter    ap_ST_fsm_state36 = 37'd34359738368;
parameter    ap_ST_fsm_state37 = 37'd68719476736;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] II_address0;
output   II_ce0;
input  [31:0] II_q0;
output  [9:0] II_address1;
output   II_ce1;
input  [31:0] II_q1;
output  [9:0] SII_address0;
output   SII_ce0;
input  [31:0] SII_q0;
output  [9:0] SII_address1;
output   SII_ce1;
input  [31:0] SII_q1;
output  [5:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] II_address0;
reg II_ce0;
reg[9:0] II_address1;
reg II_ce1;
reg[9:0] SII_address0;
reg SII_ce0;
reg[9:0] SII_address1;
reg SII_ce1;
reg[5:0] ap_return;

(* fsm_encoding = "none" *) reg   [36:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] stages_array_1_address0;
reg    stages_array_1_ce0;
wire   [7:0] stages_array_1_q0;
wire   [11:0] rectangles_array0_1_address0;
reg    rectangles_array0_1_ce0;
wire   [4:0] rectangles_array0_1_q0;
wire   [11:0] rectangles_array2_1_address0;
reg    rectangles_array2_1_ce0;
wire   [4:0] rectangles_array2_1_q0;
wire   [11:0] rectangles_array1_1_address0;
reg    rectangles_array1_1_ce0;
wire   [4:0] rectangles_array1_1_q0;
wire   [11:0] rectangles_array3_1_address0;
reg    rectangles_array3_1_ce0;
wire   [4:0] rectangles_array3_1_q0;
wire   [11:0] rectangles_array4_1_address0;
reg    rectangles_array4_1_ce0;
wire   [4:0] rectangles_array4_1_q0;
wire   [11:0] rectangles_array6_1_address0;
reg    rectangles_array6_1_ce0;
wire   [4:0] rectangles_array6_1_q0;
wire   [11:0] rectangles_array5_1_address0;
reg    rectangles_array5_1_ce0;
wire   [4:0] rectangles_array5_1_q0;
wire   [11:0] rectangles_array7_1_address0;
reg    rectangles_array7_1_ce0;
wire   [4:0] rectangles_array7_1_q0;
wire   [11:0] rectangles_array8_1_address0;
reg    rectangles_array8_1_ce0;
wire   [4:0] rectangles_array8_1_q0;
wire   [11:0] rectangles_array10_1_address0;
reg    rectangles_array10_1_ce0;
wire   [3:0] rectangles_array10_1_q0;
wire   [11:0] rectangles_array9_1_address0;
reg    rectangles_array9_1_ce0;
wire   [4:0] rectangles_array9_1_q0;
wire   [11:0] rectangles_array11_1_address0;
reg    rectangles_array11_1_ce0;
wire   [3:0] rectangles_array11_1_q0;
reg   [24:0] coord_V_8;
reg   [24:0] coord_V_9;
reg   [24:0] coord_V_10;
wire   [11:0] tree_thresh_array_address0;
reg    tree_thresh_array_ce0;
wire   [12:0] tree_thresh_array_q0;
wire   [11:0] weights_array0_address0;
reg    weights_array0_ce0;
wire   [12:0] weights_array0_q0;
wire   [11:0] weights_array1_address0;
reg    weights_array1_ce0;
wire   [13:0] weights_array1_q0;
wire   [11:0] weights_array2_address0;
reg    weights_array2_ce0;
wire   [13:0] weights_array2_q0;
wire   [11:0] alpha1_array_address0;
reg    alpha1_array_ce0;
wire   [13:0] alpha1_array_q0;
wire   [11:0] alpha2_array_address0;
reg    alpha2_array_ce0;
wire   [13:0] alpha2_array_q0;
wire   [4:0] stages_thresh_array_1_address0;
reg    stages_thresh_array_1_ce0;
wire   [11:0] stages_thresh_array_1_q0;
wire   [63:0] grp_fu_679_p1;
reg   [63:0] reg_686;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state2;
wire   [31:0] tmp_s_fu_692_p2;
reg   [31:0] tmp_s_reg_1606;
wire   [31:0] tmp_112_fu_698_p2;
reg   [31:0] tmp_112_reg_1611;
wire   [31:0] stddev_fu_709_p2;
reg   [31:0] stddev_reg_1616;
wire    ap_CS_fsm_state3;
wire  signed [31:0] mean_fu_720_p2;
reg  signed [31:0] mean_reg_1622;
wire   [31:0] stddev_3_fu_736_p2;
reg   [31:0] stddev_3_reg_1628;
wire    ap_CS_fsm_state4;
wire   [31:0] tmp_114_fu_742_p2;
reg   [31:0] tmp_114_reg_1634;
wire   [31:0] stddev_4_fu_746_p2;
reg   [31:0] stddev_4_reg_1640;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_115_fu_751_p2;
reg   [0:0] tmp_115_reg_1645;
wire   [15:0] grp_int_sqrt_fu_665_ap_return;
reg   [15:0] stddev_6_reg_1649;
wire    ap_CS_fsm_state6;
wire    grp_int_sqrt_fu_665_ap_ready;
wire    grp_int_sqrt_fu_665_ap_done;
wire   [28:0] stddev_assign_cast_fu_755_p1;
reg   [28:0] stddev_assign_cast_reg_1661;
wire    ap_CS_fsm_state7;
wire   [0:0] tmp_116_fu_764_p2;
reg   [0:0] tmp_116_reg_1666;
wire    ap_CS_fsm_state8;
wire   [4:0] i_5_fu_770_p2;
reg   [4:0] i_5_reg_1670;
wire   [63:0] tmp_117_fu_776_p1;
reg   [63:0] tmp_117_reg_1675;
reg   [7:0] stages_array_1_load_reg_1685;
wire    ap_CS_fsm_state9;
wire   [12:0] haar_counter_2_fu_785_p2;
reg   [12:0] haar_counter_2_reg_1690;
wire   [7:0] j_4_fu_796_p2;
reg   [7:0] j_4_reg_1698;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_119_fu_802_p2;
reg   [0:0] tmp_119_reg_1703;
wire   [0:0] exitcond_fu_791_p2;
wire   [63:0] tmp_120_fu_808_p1;
reg   [63:0] tmp_120_reg_1708;
reg   [4:0] tr0_x_reg_1751;
wire    ap_CS_fsm_state11;
reg   [4:0] tr0_width_reg_1758;
reg   [4:0] tr0_y_reg_1763;
reg   [4:0] tr0_height_reg_1768;
wire   [9:0] tmp_180_fu_820_p2;
reg   [9:0] tmp_180_reg_1773;
wire    ap_CS_fsm_state12;
wire   [5:0] tmp_124_fu_851_p2;
reg   [5:0] tmp_124_reg_1804;
wire   [10:0] grp_fu_1539_p3;
reg   [10:0] tmp_183_reg_1814;
reg   [4:0] tr1_x_reg_1820;
wire    ap_CS_fsm_state13;
reg   [4:0] tr1_width_reg_1827;
reg   [4:0] tr1_y_reg_1832;
reg   [4:0] tr1_height_reg_1837;
wire   [24:0] tmp_321_fu_874_p1;
reg   [24:0] tmp_321_reg_1842;
wire   [24:0] tmp_322_fu_881_p1;
reg   [24:0] tmp_322_reg_1847;
wire   [9:0] tmp_186_fu_909_p2;
reg   [9:0] tmp_186_reg_1862;
wire   [24:0] tmp_323_fu_927_p1;
reg   [24:0] tmp_323_reg_1868;
wire    ap_CS_fsm_state14;
wire   [24:0] tmp_324_fu_931_p1;
reg   [24:0] tmp_324_reg_1873;
wire   [5:0] tmp_134_fu_948_p2;
reg   [5:0] tmp_134_reg_1883;
wire   [10:0] grp_fu_1547_p3;
reg   [10:0] tmp_189_reg_1893;
wire    ap_CS_fsm_state15;
wire   [24:0] tmp_325_fu_971_p1;
reg   [24:0] tmp_325_reg_1919;
wire   [24:0] tmp_326_fu_978_p1;
reg   [24:0] tmp_326_reg_1924;
wire   [31:0] p_stage_sum_1_fu_1002_p3;
reg   [31:0] p_stage_sum_1_reg_1939;
wire    ap_CS_fsm_state16;
reg   [4:0] tr2_x_reg_1944;
wire   [5:0] tr2_y_cast6_fu_1017_p1;
reg   [5:0] tr2_y_cast6_reg_1950;
wire   [5:0] tr2_height_cast5_fu_1021_p1;
reg   [5:0] tr2_height_cast5_reg_1955;
wire   [24:0] tmp_327_fu_1025_p1;
reg   [24:0] tmp_327_reg_1960;
wire   [24:0] tmp_328_fu_1029_p1;
reg   [24:0] tmp_328_reg_1965;
wire   [0:0] or_cond2_fu_1115_p2;
reg   [0:0] or_cond2_reg_1970;
wire   [9:0] tmp_192_fu_1125_p2;
reg   [9:0] tmp_192_reg_1974;
wire   [5:0] tmp_154_fu_1131_p2;
reg   [5:0] tmp_154_reg_1980;
wire    ap_CS_fsm_state17;
wire   [10:0] grp_fu_1555_p3;
reg   [10:0] tmp_195_reg_1996;
wire    ap_CS_fsm_state18;
wire   [24:0] tmp_336_fu_1237_p1;
wire    ap_CS_fsm_state19;
wire   [26:0] ret_V_10_fu_1269_p2;
reg   [26:0] ret_V_10_reg_2022;
wire   [26:0] ret_V_13_fu_1303_p2;
reg   [26:0] ret_V_13_reg_2032;
wire   [12:0] tmp_167_fu_1309_p2;
reg   [12:0] tmp_167_reg_2057;
reg  signed [12:0] tree_thresh_array_lo_reg_2062;
wire    ap_CS_fsm_state20;
reg   [12:0] weights_array0_load_reg_2067;
reg   [13:0] weights_array1_load_reg_2072;
wire   [26:0] ret_V_16_fu_1359_p2;
reg   [26:0] ret_V_16_reg_2077;
reg   [13:0] weights_array2_load_reg_2082;
reg   [13:0] return_value_reg_2087;
reg   [13:0] return_value_4_reg_2092;
wire  signed [28:0] t_fu_1561_p2;
reg  signed [28:0] t_reg_2097;
wire    ap_CS_fsm_state21;
wire   [31:0] sum0_fu_1374_p2;
reg   [31:0] sum0_reg_2102;
wire   [31:0] sum1_fu_1386_p2;
reg   [31:0] sum1_reg_2107;
wire   [31:0] sum2_fu_1398_p2;
reg   [31:0] sum2_reg_2112;
wire   [0:0] tmp_166_fu_1416_p2;
reg   [0:0] tmp_166_reg_2117;
wire    ap_CS_fsm_state22;
reg   [11:0] stages_thresh_array_2_reg_2122;
wire    ap_CS_fsm_state24;
wire  signed [31:0] tmp_179_fu_1441_p1;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state31;
wire   [63:0] grp_fu_670_p2;
reg   [63:0] tmp_149_reg_2137;
wire    grp_int_sqrt_fu_665_ap_start;
wire    grp_int_sqrt_fu_665_ap_idle;
reg   [15:0] ap_phi_mux_stddev_assign_phi_fu_590_p4;
reg   [15:0] stddev_assign_reg_586;
reg   [4:0] i_reg_597;
wire    ap_CS_fsm_state37;
wire   [0:0] tmp_178_fu_1522_p2;
reg   [12:0] haar_counter_reg_609;
reg   [7:0] j_reg_621;
wire    ap_CS_fsm_state23;
reg   [12:0] haar_counter_assign_reg_632;
reg   [24:0] storemerge_reg_643;
wire   [5:0] tmp_161_fu_1532_p2;
reg   [5:0] ap_phi_mux_p_s_phi_fu_658_p4;
reg   [5:0] p_s_reg_654;
reg    grp_int_sqrt_fu_665_ap_start_reg;
wire   [63:0] tmp_221_cast_fu_846_p1;
wire   [63:0] tmp_222_cast_fu_866_p1;
wire  signed [63:0] tmp_224_cast_fu_890_p1;
wire  signed [63:0] tmp_225_cast_fu_900_p1;
wire   [63:0] tmp_227_cast_fu_943_p1;
wire   [63:0] tmp_228_cast_fu_963_p1;
wire  signed [63:0] tmp_230_cast_fu_987_p1;
wire  signed [63:0] tmp_231_cast_fu_997_p1;
wire   [63:0] tmp_233_cast_fu_1163_p1;
wire   [63:0] tmp_234_cast_fu_1176_p1;
wire  signed [63:0] tmp_236_cast_fu_1212_p1;
wire  signed [63:0] tmp_237_cast_fu_1222_p1;
wire   [24:0] tmp_333_fu_1184_p1;
wire   [24:0] tmp_334_fu_1197_p1;
wire   [24:0] tmp_335_fu_1227_p1;
reg   [31:0] stage_sum_fu_136;
wire   [31:0] stage_sum_2_fu_1431_p2;
reg  signed [31:0] grp_fu_679_p0;
wire   [31:0] tmp_111_fu_704_p2;
wire   [31:0] tmp_113_fu_715_p2;
wire   [31:0] tmp_317_fu_726_p2;
wire   [31:0] tmp_318_fu_731_p2;
wire   [12:0] stages_array_1_load_s_fu_781_p1;
wire   [4:0] tmp_180_fu_820_p1;
wire   [9:0] tmp_121_cast_fu_838_p1;
wire   [9:0] tmp_181_fu_841_p2;
wire   [5:0] tr0_x_cast_fu_826_p1;
wire   [5:0] tr0_width_cast_fu_829_p1;
wire   [9:0] tmp_125_cast_fu_857_p1;
wire   [9:0] tmp_182_fu_861_p2;
wire   [10:0] tmp_121_cast7_fu_871_p1;
(* use_dsp48 = "no" *) wire   [10:0] tmp_184_fu_885_p2;
wire   [10:0] tmp_125_cast6_fu_878_p1;
(* use_dsp48 = "no" *) wire   [10:0] tmp_185_fu_895_p2;
wire   [4:0] tmp_186_fu_909_p1;
wire   [9:0] tmp_131_cast_fu_935_p1;
wire   [9:0] tmp_187_fu_938_p2;
wire   [5:0] tr1_x_cast_fu_915_p1;
wire   [5:0] tr1_width_cast_fu_918_p1;
wire   [9:0] tmp_135_cast_fu_954_p1;
wire   [9:0] tmp_188_fu_958_p2;
wire   [10:0] tmp_131_cast5_fu_968_p1;
(* use_dsp48 = "no" *) wire   [10:0] tmp_190_fu_982_p2;
wire   [10:0] tmp_135_cast4_fu_975_p1;
(* use_dsp48 = "no" *) wire   [10:0] tmp_191_fu_992_p2;
wire   [3:0] tmp_329_fu_1033_p1;
wire   [0:0] tmp_330_fu_1043_p3;
wire   [3:0] tmp_142_fu_1037_p2;
wire   [3:0] tmp_331_fu_1059_p1;
wire   [0:0] tmp_332_fu_1069_p3;
wire   [3:0] tmp_168_fu_1063_p2;
wire   [4:0] tmp2_fu_1077_p3;
wire   [4:0] tmp1_fu_1051_p3;
wire   [4:0] tmp_143_fu_1085_p2;
wire   [0:0] tmp_145_fu_1097_p2;
wire   [0:0] tmp_146_fu_1103_p2;
wire   [0:0] tmp3_fu_1109_p2;
wire   [0:0] tmp_144_fu_1091_p2;
wire   [4:0] tmp_192_fu_1125_p1;
wire   [5:0] tr2_width_cast7_fu_1013_p1;
wire   [5:0] tr2_x_cast8_fu_1009_p1;
wire   [9:0] tmp_151_cast_fu_1155_p1;
wire   [9:0] tmp_193_fu_1158_p2;
wire   [9:0] tmp_155_cast_fu_1168_p1;
wire   [9:0] tmp_194_fu_1171_p2;
wire   [10:0] tmp_151_cast3_fu_1181_p1;
(* use_dsp48 = "no" *) wire   [10:0] tmp_196_fu_1207_p2;
wire   [10:0] tmp_155_cast2_fu_1194_p1;
(* use_dsp48 = "no" *) wire   [10:0] tmp_197_fu_1217_p2;
wire   [25:0] lhs_V_fu_1241_p1;
wire   [25:0] rhs_V_fu_1244_p1;
wire   [25:0] ret_V_fu_1247_p2;
wire  signed [26:0] lhs_V_6_fu_1253_p1;
wire   [26:0] rhs_V_6_fu_1257_p1;
wire   [26:0] ret_V_9_fu_1260_p2;
wire   [26:0] rhs_V_10_cast_fu_1266_p1;
wire   [25:0] lhs_V_7_fu_1275_p1;
wire   [25:0] rhs_V_7_fu_1278_p1;
wire   [25:0] ret_V_11_fu_1281_p2;
wire  signed [26:0] lhs_V_8_fu_1287_p1;
wire   [26:0] rhs_V_8_fu_1291_p1;
wire   [26:0] ret_V_12_fu_1294_p2;
wire   [26:0] rhs_V_13_cast_fu_1300_p1;
wire   [25:0] lhs_V_9_fu_1319_p1;
wire   [25:0] rhs_V_9_fu_1327_p1;
wire   [25:0] ret_V_14_fu_1331_p2;
wire  signed [26:0] lhs_V_10_fu_1337_p1;
wire   [26:0] rhs_V_10_fu_1345_p1;
wire   [26:0] ret_V_15_fu_1349_p2;
wire   [26:0] rhs_V_16_cast_fu_1355_p1;
wire  signed [12:0] sum0_fu_1374_p0;
wire  signed [26:0] sum0_fu_1374_p1;
wire   [13:0] sum1_fu_1386_p0;
wire  signed [26:0] sum1_fu_1386_p1;
wire   [13:0] sum2_fu_1398_p0;
wire  signed [26:0] sum2_fu_1398_p1;
wire   [31:0] tmp4_fu_1407_p2;
wire   [31:0] final_sum_fu_1411_p2;
wire  signed [31:0] t_cast_fu_1404_p1;
wire   [13:0] return_value_6_fu_1422_p3;
wire  signed [31:0] s_cast_fu_1427_p1;
wire   [63:0] tmp_147_to_int_fu_1445_p1;
wire   [63:0] tmp_149_to_int_fu_1463_p1;
wire   [10:0] tmp_170_fu_1449_p4;
wire   [51:0] tmp_319_fu_1459_p1;
wire   [0:0] notrhs_fu_1486_p2;
wire   [0:0] notlhs_fu_1480_p2;
wire   [10:0] tmp_172_fu_1466_p4;
wire   [51:0] tmp_320_fu_1476_p1;
wire   [0:0] notrhs2_fu_1504_p2;
wire   [0:0] notlhs1_fu_1498_p2;
wire   [0:0] tmp_174_fu_1492_p2;
wire   [0:0] tmp_175_fu_1510_p2;
wire   [0:0] tmp_176_fu_1516_p2;
wire   [0:0] tmp_177_fu_675_p2;
wire   [5:0] i_cast_le_fu_1528_p1;
wire   [4:0] grp_fu_1539_p0;
wire   [4:0] grp_fu_1539_p1;
wire   [5:0] grp_fu_1539_p2;
wire   [4:0] grp_fu_1547_p0;
wire   [4:0] grp_fu_1547_p1;
wire   [5:0] grp_fu_1547_p2;
wire   [3:0] grp_fu_1555_p0;
wire   [4:0] grp_fu_1555_p1;
wire   [5:0] grp_fu_1555_p2;
wire   [15:0] t_fu_1561_p1;
reg   [5:0] ap_return_preg;
reg   [36:0] ap_NS_fsm;
wire   [5:0] grp_fu_1539_p00;
wire   [5:0] grp_fu_1539_p10;
wire   [5:0] grp_fu_1547_p00;
wire   [5:0] grp_fu_1547_p10;
wire   [31:0] sum1_fu_1386_p00;
wire   [31:0] sum2_fu_1398_p00;
wire   [9:0] tmp_180_fu_820_p10;
wire   [9:0] tmp_186_fu_909_p10;
wire   [9:0] tmp_192_fu_1125_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 37'd1;
#0 coord_V_8 = 25'd0;
#0 coord_V_9 = 25'd0;
#0 coord_V_10 = 25'd0;
#0 grp_int_sqrt_fu_665_ap_start_reg = 1'b0;
#0 ap_return_preg = 6'd0;
end

cascadeClassifierg8j #(
    .DataWidth( 8 ),
    .AddressRange( 25 ),
    .AddressWidth( 5 ))
stages_array_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(stages_array_1_address0),
    .ce0(stages_array_1_ce0),
    .q0(stages_array_1_q0)
);

cascadeClassifierhbi #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array0_1_address0),
    .ce0(rectangles_array0_1_ce0),
    .q0(rectangles_array0_1_q0)
);

cascadeClassifieribs #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array2_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array2_1_address0),
    .ce0(rectangles_array2_1_ce0),
    .q0(rectangles_array2_1_q0)
);

cascadeClassifierjbC #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array1_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array1_1_address0),
    .ce0(rectangles_array1_1_ce0),
    .q0(rectangles_array1_1_q0)
);

cascadeClassifierkbM #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array3_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array3_1_address0),
    .ce0(rectangles_array3_1_ce0),
    .q0(rectangles_array3_1_q0)
);

cascadeClassifierlbW #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array4_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array4_1_address0),
    .ce0(rectangles_array4_1_ce0),
    .q0(rectangles_array4_1_q0)
);

cascadeClassifiermb6 #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array6_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array6_1_address0),
    .ce0(rectangles_array6_1_ce0),
    .q0(rectangles_array6_1_q0)
);

cascadeClassifierncg #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array5_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array5_1_address0),
    .ce0(rectangles_array5_1_ce0),
    .q0(rectangles_array5_1_q0)
);

cascadeClassifierocq #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array7_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array7_1_address0),
    .ce0(rectangles_array7_1_ce0),
    .q0(rectangles_array7_1_q0)
);

cascadeClassifierpcA #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array8_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array8_1_address0),
    .ce0(rectangles_array8_1_ce0),
    .q0(rectangles_array8_1_q0)
);

cascadeClassifierqcK #(
    .DataWidth( 4 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array10_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array10_1_address0),
    .ce0(rectangles_array10_1_ce0),
    .q0(rectangles_array10_1_q0)
);

cascadeClassifierrcU #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array9_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array9_1_address0),
    .ce0(rectangles_array9_1_ce0),
    .q0(rectangles_array9_1_q0)
);

cascadeClassifiersc4 #(
    .DataWidth( 4 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array11_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array11_1_address0),
    .ce0(rectangles_array11_1_ce0),
    .q0(rectangles_array11_1_q0)
);

cascadeClassifiertde #(
    .DataWidth( 13 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
tree_thresh_array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tree_thresh_array_address0),
    .ce0(tree_thresh_array_ce0),
    .q0(tree_thresh_array_q0)
);

cascadeClassifierudo #(
    .DataWidth( 13 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
weights_array0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_array0_address0),
    .ce0(weights_array0_ce0),
    .q0(weights_array0_q0)
);

cascadeClassifiervdy #(
    .DataWidth( 14 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
weights_array1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_array1_address0),
    .ce0(weights_array1_ce0),
    .q0(weights_array1_q0)
);

cascadeClassifierwdI #(
    .DataWidth( 14 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
weights_array2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_array2_address0),
    .ce0(weights_array2_ce0),
    .q0(weights_array2_q0)
);

cascadeClassifierxdS #(
    .DataWidth( 14 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
alpha1_array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(alpha1_array_address0),
    .ce0(alpha1_array_ce0),
    .q0(alpha1_array_q0)
);

cascadeClassifieryd2 #(
    .DataWidth( 14 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
alpha2_array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(alpha2_array_address0),
    .ce0(alpha2_array_ce0),
    .q0(alpha2_array_q0)
);

cascadeClassifierzec #(
    .DataWidth( 12 ),
    .AddressRange( 25 ),
    .AddressWidth( 5 ))
stages_thresh_array_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(stages_thresh_array_1_address0),
    .ce0(stages_thresh_array_1_ce0),
    .q0(stages_thresh_array_1_q0)
);

int_sqrt grp_int_sqrt_fu_665(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_int_sqrt_fu_665_ap_start),
    .ap_done(grp_int_sqrt_fu_665_ap_done),
    .ap_idle(grp_int_sqrt_fu_665_ap_idle),
    .ap_ready(grp_int_sqrt_fu_665_ap_ready),
    .value_r(stddev_4_reg_1640),
    .ap_return(grp_int_sqrt_fu_665_ap_return)
);

detectFaces_dmul_Aem #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
detectFaces_dmul_Aem_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_686),
    .din1(64'd4600877379321698714),
    .ce(1'b1),
    .dout(grp_fu_670_p2)
);

detectFaces_dcmp_Bew #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
detectFaces_dcmp_Bew_U26(
    .din0(reg_686),
    .din1(tmp_149_reg_2137),
    .opcode(5'd4),
    .dout(tmp_177_fu_675_p2)
);

detectFaces_sitodCeG #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
detectFaces_sitodCeG_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_679_p0),
    .ce(1'b1),
    .dout(grp_fu_679_p1)
);

detectFaces_am_adDeQ #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 6 ),
    .dout_WIDTH( 11 ))
detectFaces_am_adDeQ_U28(
    .din0(grp_fu_1539_p0),
    .din1(grp_fu_1539_p1),
    .din2(grp_fu_1539_p2),
    .dout(grp_fu_1539_p3)
);

detectFaces_am_adDeQ #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 6 ),
    .dout_WIDTH( 11 ))
detectFaces_am_adDeQ_U29(
    .din0(grp_fu_1547_p0),
    .din1(grp_fu_1547_p1),
    .din2(grp_fu_1547_p2),
    .dout(grp_fu_1547_p3)
);

detectFaces_am_adEe0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 6 ),
    .dout_WIDTH( 11 ))
detectFaces_am_adEe0_U30(
    .din0(grp_fu_1555_p0),
    .din1(grp_fu_1555_p1),
    .din2(grp_fu_1555_p2),
    .dout(grp_fu_1555_p3)
);

detectFaces_mul_mFfa #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 29 ))
detectFaces_mul_mFfa_U31(
    .din0(tree_thresh_array_lo_reg_2062),
    .din1(t_fu_1561_p1),
    .dout(t_fu_1561_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 6'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state37) & ((tmp_178_fu_1522_p2 == 1'd1) | (tmp_116_reg_1666 == 1'd0)))) begin
            ap_return_preg <= ap_phi_mux_p_s_phi_fu_658_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_int_sqrt_fu_665_ap_start_reg <= 1'b0;
    end else begin
        if (((tmp_115_fu_751_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
            grp_int_sqrt_fu_665_ap_start_reg <= 1'b1;
        end else if ((grp_int_sqrt_fu_665_ap_ready == 1'b1)) begin
            grp_int_sqrt_fu_665_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond2_reg_1970 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        coord_V_10 <= tmp_335_fu_1227_p1;
    end else if (((or_cond2_fu_1115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        coord_V_10 <= 25'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        coord_V_8 <= tmp_333_fu_1184_p1;
    end else if (((or_cond2_fu_1115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        coord_V_8 <= 25'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        coord_V_9 <= tmp_334_fu_1197_p1;
    end else if (((or_cond2_fu_1115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        coord_V_9 <= 25'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        haar_counter_assign_reg_632 <= tmp_167_reg_2057;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        haar_counter_assign_reg_632 <= haar_counter_reg_609;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_178_fu_1522_p2 == 1'd0) & (tmp_116_reg_1666 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
        haar_counter_reg_609 <= haar_counter_2_reg_1690;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        haar_counter_reg_609 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_178_fu_1522_p2 == 1'd0) & (tmp_116_reg_1666 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
        i_reg_597 <= i_5_reg_1670;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_reg_597 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        j_reg_621 <= j_4_reg_1698;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        j_reg_621 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_116_fu_764_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        p_s_reg_654 <= 6'd1;
    end else if (((tmp_178_fu_1522_p2 == 1'd1) & (tmp_116_reg_1666 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
        p_s_reg_654 <= tmp_161_fu_1532_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        stage_sum_fu_136 <= stage_sum_2_fu_1431_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        stage_sum_fu_136 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_115_fu_751_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        stddev_assign_reg_586 <= 16'd1;
    end else if (((tmp_115_reg_1645 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        stddev_assign_reg_586 <= stddev_6_reg_1649;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond2_reg_1970 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        storemerge_reg_643 <= tmp_336_fu_1237_p1;
    end else if (((or_cond2_fu_1115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        storemerge_reg_643 <= 25'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        haar_counter_2_reg_1690 <= haar_counter_2_fu_785_p2;
        stages_array_1_load_reg_1685 <= stages_array_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_5_reg_1670 <= i_5_fu_770_p2;
        tmp_116_reg_1666 <= tmp_116_fu_764_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        j_4_reg_1698 <= j_4_fu_796_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mean_reg_1622 <= mean_fu_720_p2;
        stddev_reg_1616 <= stddev_fu_709_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        or_cond2_reg_1970 <= or_cond2_fu_1115_p2;
        p_stage_sum_1_reg_1939 <= p_stage_sum_1_fu_1002_p3;
        tmp_327_reg_1960 <= tmp_327_fu_1025_p1;
        tmp_328_reg_1965 <= tmp_328_fu_1029_p1;
        tr2_height_cast5_reg_1955[3 : 0] <= tr2_height_cast5_fu_1021_p1[3 : 0];
        tr2_x_reg_1944 <= rectangles_array8_1_q0;
        tr2_y_cast6_reg_1950[4 : 0] <= tr2_y_cast6_fu_1017_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state30))) begin
        reg_686 <= grp_fu_679_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ret_V_10_reg_2022 <= ret_V_10_fu_1269_p2;
        ret_V_13_reg_2032 <= ret_V_13_fu_1303_p2;
        tmp_167_reg_2057 <= tmp_167_fu_1309_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ret_V_16_reg_2077 <= ret_V_16_fu_1359_p2;
        return_value_4_reg_2092 <= alpha2_array_q0;
        return_value_reg_2087 <= alpha1_array_q0;
        tree_thresh_array_lo_reg_2062 <= tree_thresh_array_q0;
        weights_array0_load_reg_2067 <= weights_array0_q0;
        weights_array1_load_reg_2072 <= weights_array1_q0;
        weights_array2_load_reg_2082 <= weights_array2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        stages_thresh_array_2_reg_2122 <= stages_thresh_array_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        stddev_3_reg_1628[31 : 6] <= stddev_3_fu_736_p2[31 : 6];
        tmp_114_reg_1634 <= tmp_114_fu_742_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        stddev_4_reg_1640 <= stddev_4_fu_746_p2;
        tmp_115_reg_1645 <= tmp_115_fu_751_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_int_sqrt_fu_665_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        stddev_6_reg_1649 <= grp_int_sqrt_fu_665_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        stddev_assign_cast_reg_1661[15 : 0] <= stddev_assign_cast_fu_755_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        sum0_reg_2102 <= sum0_fu_1374_p2;
        sum1_reg_2107 <= sum1_fu_1386_p2;
        sum2_reg_2112 <= sum2_fu_1398_p2;
        t_reg_2097 <= t_fu_1561_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_112_reg_1611 <= tmp_112_fu_698_p2;
        tmp_s_reg_1606 <= tmp_s_fu_692_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_116_fu_764_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        tmp_117_reg_1675[4 : 0] <= tmp_117_fu_776_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_791_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        tmp_119_reg_1703 <= tmp_119_fu_802_p2;
        tmp_120_reg_1708[12 : 0] <= tmp_120_fu_808_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_124_reg_1804 <= tmp_124_fu_851_p2;
        tmp_183_reg_1814 <= grp_fu_1539_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_134_reg_1883 <= tmp_134_fu_948_p2;
        tmp_189_reg_1893 <= grp_fu_1547_p3;
        tmp_323_reg_1868 <= tmp_323_fu_927_p1;
        tmp_324_reg_1873 <= tmp_324_fu_931_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        tmp_149_reg_2137 <= grp_fu_670_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond2_fu_1115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        tmp_154_reg_1980 <= tmp_154_fu_1131_p2;
        tmp_192_reg_1974 <= tmp_192_fu_1125_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_166_reg_2117 <= tmp_166_fu_1416_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_180_reg_1773 <= tmp_180_fu_820_p2;
        tr0_height_reg_1768 <= rectangles_array3_1_q0;
        tr0_width_reg_1758 <= rectangles_array2_1_q0;
        tr0_x_reg_1751 <= rectangles_array0_1_q0;
        tr0_y_reg_1763 <= rectangles_array1_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_186_reg_1862 <= tmp_186_fu_909_p2;
        tmp_321_reg_1842 <= tmp_321_fu_874_p1;
        tmp_322_reg_1847 <= tmp_322_fu_881_p1;
        tr1_height_reg_1837 <= rectangles_array7_1_q0;
        tr1_width_reg_1827 <= rectangles_array6_1_q0;
        tr1_x_reg_1820 <= rectangles_array4_1_q0;
        tr1_y_reg_1832 <= rectangles_array5_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_195_reg_1996 <= grp_fu_1555_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_325_reg_1919 <= tmp_325_fu_971_p1;
        tmp_326_reg_1924 <= tmp_326_fu_978_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        II_address0 = tmp_236_cast_fu_1212_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        II_address0 = tmp_233_cast_fu_1163_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        II_address0 = tmp_230_cast_fu_987_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        II_address0 = tmp_227_cast_fu_943_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        II_address0 = tmp_224_cast_fu_890_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        II_address0 = tmp_221_cast_fu_846_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        II_address0 = 64'd600;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        II_address0 = 64'd0;
    end else begin
        II_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        II_address1 = tmp_237_cast_fu_1222_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        II_address1 = tmp_234_cast_fu_1176_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        II_address1 = tmp_231_cast_fu_997_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        II_address1 = tmp_228_cast_fu_963_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        II_address1 = tmp_225_cast_fu_900_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        II_address1 = tmp_222_cast_fu_866_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        II_address1 = 64'd624;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        II_address1 = 64'd24;
    end else begin
        II_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        II_ce0 = 1'b1;
    end else begin
        II_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        II_ce1 = 1'b1;
    end else begin
        II_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        SII_address0 = 64'd600;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        SII_address0 = 64'd0;
    end else begin
        SII_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        SII_address1 = 64'd624;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        SII_address1 = 64'd24;
    end else begin
        SII_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        SII_ce0 = 1'b1;
    end else begin
        SII_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        SII_ce1 = 1'b1;
    end else begin
        SII_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        alpha1_array_ce0 = 1'b1;
    end else begin
        alpha1_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        alpha2_array_ce0 = 1'b1;
    end else begin
        alpha2_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state37) & ((tmp_178_fu_1522_p2 == 1'd1) | (tmp_116_reg_1666 == 1'd0))) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_178_fu_1522_p2 == 1'd1) & (tmp_116_reg_1666 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
        ap_phi_mux_p_s_phi_fu_658_p4 = tmp_161_fu_1532_p2;
    end else begin
        ap_phi_mux_p_s_phi_fu_658_p4 = p_s_reg_654;
    end
end

always @ (*) begin
    if (((tmp_115_reg_1645 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_phi_mux_stddev_assign_phi_fu_590_p4 = stddev_6_reg_1649;
    end else begin
        ap_phi_mux_stddev_assign_phi_fu_590_p4 = stddev_assign_reg_586;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) & ((tmp_178_fu_1522_p2 == 1'd1) | (tmp_116_reg_1666 == 1'd0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) & ((tmp_178_fu_1522_p2 == 1'd1) | (tmp_116_reg_1666 == 1'd0)))) begin
        ap_return = ap_phi_mux_p_s_phi_fu_658_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_679_p0 = stage_sum_fu_136;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_679_p0 = tmp_179_fu_1441_p1;
    end else begin
        grp_fu_679_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        rectangles_array0_1_ce0 = 1'b1;
    end else begin
        rectangles_array0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        rectangles_array10_1_ce0 = 1'b1;
    end else begin
        rectangles_array10_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        rectangles_array11_1_ce0 = 1'b1;
    end else begin
        rectangles_array11_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        rectangles_array1_1_ce0 = 1'b1;
    end else begin
        rectangles_array1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        rectangles_array2_1_ce0 = 1'b1;
    end else begin
        rectangles_array2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        rectangles_array3_1_ce0 = 1'b1;
    end else begin
        rectangles_array3_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        rectangles_array4_1_ce0 = 1'b1;
    end else begin
        rectangles_array4_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        rectangles_array5_1_ce0 = 1'b1;
    end else begin
        rectangles_array5_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        rectangles_array6_1_ce0 = 1'b1;
    end else begin
        rectangles_array6_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        rectangles_array7_1_ce0 = 1'b1;
    end else begin
        rectangles_array7_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        rectangles_array8_1_ce0 = 1'b1;
    end else begin
        rectangles_array8_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        rectangles_array9_1_ce0 = 1'b1;
    end else begin
        rectangles_array9_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        stages_array_1_ce0 = 1'b1;
    end else begin
        stages_array_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        stages_thresh_array_1_ce0 = 1'b1;
    end else begin
        stages_thresh_array_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tree_thresh_array_ce0 = 1'b1;
    end else begin
        tree_thresh_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        weights_array0_ce0 = 1'b1;
    end else begin
        weights_array0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        weights_array1_ce0 = 1'b1;
    end else begin
        weights_array1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        weights_array2_ce0 = 1'b1;
    end else begin
        weights_array2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((tmp_115_fu_751_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((grp_int_sqrt_fu_665_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((tmp_116_fu_764_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((exitcond_fu_791_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((or_cond2_fu_1115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if (((1'b1 == ap_CS_fsm_state37) & ((tmp_178_fu_1522_p2 == 1'd1) | (tmp_116_reg_1666 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign alpha1_array_address0 = tmp_120_reg_1708;

assign alpha2_array_address0 = tmp_120_reg_1708;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond_fu_791_p2 = ((j_reg_621 == stages_array_1_load_reg_1685) ? 1'b1 : 1'b0);

assign final_sum_fu_1411_p2 = (tmp4_fu_1407_p2 + sum1_reg_2107);

assign grp_fu_1539_p0 = grp_fu_1539_p00;

assign grp_fu_1539_p00 = tr0_y_reg_1763;

assign grp_fu_1539_p1 = grp_fu_1539_p10;

assign grp_fu_1539_p10 = tr0_height_reg_1768;

assign grp_fu_1539_p2 = 11'd25;

assign grp_fu_1547_p0 = grp_fu_1547_p00;

assign grp_fu_1547_p00 = tr1_y_reg_1832;

assign grp_fu_1547_p1 = grp_fu_1547_p10;

assign grp_fu_1547_p10 = tr1_height_reg_1837;

assign grp_fu_1547_p2 = 11'd25;

assign grp_fu_1555_p0 = tr2_height_cast5_reg_1955;

assign grp_fu_1555_p1 = tr2_y_cast6_reg_1950;

assign grp_fu_1555_p2 = 11'd25;

assign grp_int_sqrt_fu_665_ap_start = grp_int_sqrt_fu_665_ap_start_reg;

assign haar_counter_2_fu_785_p2 = (stages_array_1_load_s_fu_781_p1 + haar_counter_reg_609);

assign i_5_fu_770_p2 = (i_reg_597 + 5'd1);

assign i_cast_le_fu_1528_p1 = i_reg_597;

assign j_4_fu_796_p2 = (j_reg_621 + 8'd1);

assign lhs_V_10_fu_1337_p1 = $signed(ret_V_14_fu_1331_p2);

assign lhs_V_6_fu_1253_p1 = $signed(ret_V_fu_1247_p2);

assign lhs_V_7_fu_1275_p1 = tmp_325_reg_1919;

assign lhs_V_8_fu_1287_p1 = $signed(ret_V_11_fu_1281_p2);

assign lhs_V_9_fu_1319_p1 = coord_V_8;

assign lhs_V_fu_1241_p1 = tmp_321_reg_1842;

assign mean_fu_720_p2 = (II_q1 + tmp_113_fu_715_p2);

assign notlhs1_fu_1498_p2 = ((tmp_172_fu_1466_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign notlhs_fu_1480_p2 = ((tmp_170_fu_1449_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign notrhs2_fu_1504_p2 = ((tmp_320_fu_1476_p1 == 52'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_1486_p2 = ((tmp_319_fu_1459_p1 == 52'd0) ? 1'b1 : 1'b0);

assign or_cond2_fu_1115_p2 = (tmp_144_fu_1091_p2 | tmp3_fu_1109_p2);

assign p_stage_sum_1_fu_1002_p3 = ((tmp_119_reg_1703[0:0] === 1'b1) ? 32'd0 : stage_sum_fu_136);

assign rectangles_array0_1_address0 = tmp_120_fu_808_p1;

assign rectangles_array10_1_address0 = tmp_120_reg_1708;

assign rectangles_array11_1_address0 = tmp_120_reg_1708;

assign rectangles_array1_1_address0 = tmp_120_fu_808_p1;

assign rectangles_array2_1_address0 = tmp_120_fu_808_p1;

assign rectangles_array3_1_address0 = tmp_120_fu_808_p1;

assign rectangles_array4_1_address0 = tmp_120_reg_1708;

assign rectangles_array5_1_address0 = tmp_120_reg_1708;

assign rectangles_array6_1_address0 = tmp_120_reg_1708;

assign rectangles_array7_1_address0 = tmp_120_reg_1708;

assign rectangles_array8_1_address0 = tmp_120_reg_1708;

assign rectangles_array9_1_address0 = tmp_120_reg_1708;

assign ret_V_10_fu_1269_p2 = (ret_V_9_fu_1260_p2 + rhs_V_10_cast_fu_1266_p1);

assign ret_V_11_fu_1281_p2 = (lhs_V_7_fu_1275_p1 - rhs_V_7_fu_1278_p1);

assign ret_V_12_fu_1294_p2 = ($signed(lhs_V_8_fu_1287_p1) - $signed(rhs_V_8_fu_1291_p1));

assign ret_V_13_fu_1303_p2 = (ret_V_12_fu_1294_p2 + rhs_V_13_cast_fu_1300_p1);

assign ret_V_14_fu_1331_p2 = (lhs_V_9_fu_1319_p1 - rhs_V_9_fu_1327_p1);

assign ret_V_15_fu_1349_p2 = ($signed(lhs_V_10_fu_1337_p1) - $signed(rhs_V_10_fu_1345_p1));

assign ret_V_16_fu_1359_p2 = (ret_V_15_fu_1349_p2 + rhs_V_16_cast_fu_1355_p1);

assign ret_V_9_fu_1260_p2 = ($signed(lhs_V_6_fu_1253_p1) - $signed(rhs_V_6_fu_1257_p1));

assign ret_V_fu_1247_p2 = (lhs_V_fu_1241_p1 - rhs_V_fu_1244_p1);

assign return_value_6_fu_1422_p3 = ((tmp_166_reg_2117[0:0] === 1'b1) ? return_value_reg_2087 : return_value_4_reg_2092);

assign rhs_V_10_cast_fu_1266_p1 = tmp_324_reg_1873;

assign rhs_V_10_fu_1345_p1 = coord_V_10;

assign rhs_V_13_cast_fu_1300_p1 = tmp_328_reg_1965;

assign rhs_V_16_cast_fu_1355_p1 = storemerge_reg_643;

assign rhs_V_6_fu_1257_p1 = tmp_323_reg_1868;

assign rhs_V_7_fu_1278_p1 = tmp_326_reg_1924;

assign rhs_V_8_fu_1291_p1 = tmp_327_reg_1960;

assign rhs_V_9_fu_1327_p1 = coord_V_9;

assign rhs_V_fu_1244_p1 = tmp_322_reg_1847;

assign s_cast_fu_1427_p1 = $signed(return_value_6_fu_1422_p3);

assign stage_sum_2_fu_1431_p2 = ($signed(s_cast_fu_1427_p1) + $signed(p_stage_sum_1_reg_1939));

assign stages_array_1_address0 = tmp_117_fu_776_p1;

assign stages_array_1_load_s_fu_781_p1 = stages_array_1_q0;

assign stages_thresh_array_1_address0 = tmp_117_reg_1675;

assign stddev_3_fu_736_p2 = (tmp_317_fu_726_p2 + tmp_318_fu_731_p2);

assign stddev_4_fu_746_p2 = (stddev_3_reg_1628 - tmp_114_reg_1634);

assign stddev_assign_cast_fu_755_p1 = ap_phi_mux_stddev_assign_phi_fu_590_p4;

assign stddev_fu_709_p2 = (SII_q1 + tmp_111_fu_704_p2);

assign sum0_fu_1374_p0 = weights_array0_load_reg_2067;

assign sum0_fu_1374_p1 = ret_V_10_reg_2022;

assign sum0_fu_1374_p2 = ($signed(sum0_fu_1374_p0) * $signed(sum0_fu_1374_p1));

assign sum1_fu_1386_p0 = sum1_fu_1386_p00;

assign sum1_fu_1386_p00 = weights_array1_load_reg_2072;

assign sum1_fu_1386_p1 = ret_V_13_reg_2032;

assign sum1_fu_1386_p2 = ($signed({{1'b0}, {sum1_fu_1386_p0}}) * $signed(sum1_fu_1386_p1));

assign sum2_fu_1398_p0 = sum2_fu_1398_p00;

assign sum2_fu_1398_p00 = weights_array2_load_reg_2082;

assign sum2_fu_1398_p1 = ret_V_16_reg_2077;

assign sum2_fu_1398_p2 = ($signed({{1'b0}, {sum2_fu_1398_p0}}) * $signed(sum2_fu_1398_p1));

assign t_cast_fu_1404_p1 = t_reg_2097;

assign t_fu_1561_p1 = stddev_assign_cast_reg_1661;

assign tmp1_fu_1051_p3 = {{tmp_330_fu_1043_p3}, {tmp_142_fu_1037_p2}};

assign tmp2_fu_1077_p3 = {{tmp_332_fu_1069_p3}, {tmp_168_fu_1063_p2}};

assign tmp3_fu_1109_p2 = (tmp_146_fu_1103_p2 | tmp_145_fu_1097_p2);

assign tmp4_fu_1407_p2 = (sum0_reg_2102 + sum2_reg_2112);

assign tmp_111_fu_704_p2 = (tmp_s_reg_1606 - SII_q0);

assign tmp_112_fu_698_p2 = (II_q0 - II_q1);

assign tmp_113_fu_715_p2 = (tmp_112_reg_1611 - II_q0);

assign tmp_114_fu_742_p2 = ($signed(mean_reg_1622) * $signed(mean_reg_1622));

assign tmp_115_fu_751_p2 = ((stddev_3_reg_1628 == tmp_114_reg_1634) ? 1'b1 : 1'b0);

assign tmp_116_fu_764_p2 = ((i_reg_597 < 5'd25) ? 1'b1 : 1'b0);

assign tmp_117_fu_776_p1 = i_reg_597;

assign tmp_119_fu_802_p2 = ((j_reg_621 == 8'd0) ? 1'b1 : 1'b0);

assign tmp_120_fu_808_p1 = haar_counter_assign_reg_632;

assign tmp_121_cast7_fu_871_p1 = tr0_x_reg_1751;

assign tmp_121_cast_fu_838_p1 = tr0_x_reg_1751;

assign tmp_124_fu_851_p2 = (tr0_x_cast_fu_826_p1 + tr0_width_cast_fu_829_p1);

assign tmp_125_cast6_fu_878_p1 = tmp_124_reg_1804;

assign tmp_125_cast_fu_857_p1 = tmp_124_fu_851_p2;

assign tmp_131_cast5_fu_968_p1 = tr1_x_reg_1820;

assign tmp_131_cast_fu_935_p1 = tr1_x_reg_1820;

assign tmp_134_fu_948_p2 = (tr1_x_cast_fu_915_p1 + tr1_width_cast_fu_918_p1);

assign tmp_135_cast4_fu_975_p1 = tmp_134_reg_1883;

assign tmp_135_cast_fu_954_p1 = tmp_134_fu_948_p2;

assign tmp_142_fu_1037_p2 = (tmp_329_fu_1033_p1 | rectangles_array10_1_q0);

assign tmp_143_fu_1085_p2 = (tmp2_fu_1077_p3 | tmp1_fu_1051_p3);

assign tmp_144_fu_1091_p2 = ((tmp_143_fu_1085_p2 == 5'd0) ? 1'b1 : 1'b0);

assign tmp_145_fu_1097_p2 = ((rectangles_array10_1_q0 == 4'd0) ? 1'b1 : 1'b0);

assign tmp_146_fu_1103_p2 = ((rectangles_array11_1_q0 == 4'd0) ? 1'b1 : 1'b0);

assign tmp_147_to_int_fu_1445_p1 = reg_686;

assign tmp_149_to_int_fu_1463_p1 = tmp_149_reg_2137;

assign tmp_151_cast3_fu_1181_p1 = tr2_x_reg_1944;

assign tmp_151_cast_fu_1155_p1 = tr2_x_reg_1944;

assign tmp_154_fu_1131_p2 = (tr2_width_cast7_fu_1013_p1 + tr2_x_cast8_fu_1009_p1);

assign tmp_155_cast2_fu_1194_p1 = tmp_154_reg_1980;

assign tmp_155_cast_fu_1168_p1 = tmp_154_reg_1980;

assign tmp_161_fu_1532_p2 = (6'd0 - i_cast_le_fu_1528_p1);

assign tmp_166_fu_1416_p2 = (($signed(final_sum_fu_1411_p2) < $signed(t_cast_fu_1404_p1)) ? 1'b1 : 1'b0);

assign tmp_167_fu_1309_p2 = (haar_counter_assign_reg_632 + 13'd1);

assign tmp_168_fu_1063_p2 = (tmp_331_fu_1059_p1 | rectangles_array11_1_q0);

assign tmp_170_fu_1449_p4 = {{tmp_147_to_int_fu_1445_p1[62:52]}};

assign tmp_172_fu_1466_p4 = {{tmp_149_to_int_fu_1463_p1[62:52]}};

assign tmp_174_fu_1492_p2 = (notrhs_fu_1486_p2 | notlhs_fu_1480_p2);

assign tmp_175_fu_1510_p2 = (notrhs2_fu_1504_p2 | notlhs1_fu_1498_p2);

assign tmp_176_fu_1516_p2 = (tmp_175_fu_1510_p2 & tmp_174_fu_1492_p2);

assign tmp_178_fu_1522_p2 = (tmp_177_fu_675_p2 & tmp_176_fu_1516_p2);

assign tmp_179_fu_1441_p1 = $signed(stages_thresh_array_2_reg_2122);

assign tmp_180_fu_820_p1 = tmp_180_fu_820_p10;

assign tmp_180_fu_820_p10 = rectangles_array1_1_q0;

assign tmp_180_fu_820_p2 = (10'd25 * tmp_180_fu_820_p1);

assign tmp_181_fu_841_p2 = (tmp_180_reg_1773 + tmp_121_cast_fu_838_p1);

assign tmp_182_fu_861_p2 = (tmp_180_reg_1773 + tmp_125_cast_fu_857_p1);

assign tmp_184_fu_885_p2 = (tmp_183_reg_1814 + tmp_121_cast7_fu_871_p1);

assign tmp_185_fu_895_p2 = (tmp_183_reg_1814 + tmp_125_cast6_fu_878_p1);

assign tmp_186_fu_909_p1 = tmp_186_fu_909_p10;

assign tmp_186_fu_909_p10 = rectangles_array5_1_q0;

assign tmp_186_fu_909_p2 = (10'd25 * tmp_186_fu_909_p1);

assign tmp_187_fu_938_p2 = (tmp_186_reg_1862 + tmp_131_cast_fu_935_p1);

assign tmp_188_fu_958_p2 = (tmp_186_reg_1862 + tmp_135_cast_fu_954_p1);

assign tmp_190_fu_982_p2 = (tmp_189_reg_1893 + tmp_131_cast5_fu_968_p1);

assign tmp_191_fu_992_p2 = (tmp_189_reg_1893 + tmp_135_cast4_fu_975_p1);

assign tmp_192_fu_1125_p1 = tmp_192_fu_1125_p10;

assign tmp_192_fu_1125_p10 = rectangles_array9_1_q0;

assign tmp_192_fu_1125_p2 = (10'd25 * tmp_192_fu_1125_p1);

assign tmp_193_fu_1158_p2 = (tmp_192_reg_1974 + tmp_151_cast_fu_1155_p1);

assign tmp_194_fu_1171_p2 = (tmp_192_reg_1974 + tmp_155_cast_fu_1168_p1);

assign tmp_196_fu_1207_p2 = (tmp_195_reg_1996 + tmp_151_cast3_fu_1181_p1);

assign tmp_197_fu_1217_p2 = (tmp_195_reg_1996 + tmp_155_cast2_fu_1194_p1);

assign tmp_221_cast_fu_846_p1 = tmp_181_fu_841_p2;

assign tmp_222_cast_fu_866_p1 = tmp_182_fu_861_p2;

assign tmp_224_cast_fu_890_p1 = $signed(tmp_184_fu_885_p2);

assign tmp_225_cast_fu_900_p1 = $signed(tmp_185_fu_895_p2);

assign tmp_227_cast_fu_943_p1 = tmp_187_fu_938_p2;

assign tmp_228_cast_fu_963_p1 = tmp_188_fu_958_p2;

assign tmp_230_cast_fu_987_p1 = $signed(tmp_190_fu_982_p2);

assign tmp_231_cast_fu_997_p1 = $signed(tmp_191_fu_992_p2);

assign tmp_233_cast_fu_1163_p1 = tmp_193_fu_1158_p2;

assign tmp_234_cast_fu_1176_p1 = tmp_194_fu_1171_p2;

assign tmp_236_cast_fu_1212_p1 = $signed(tmp_196_fu_1207_p2);

assign tmp_237_cast_fu_1222_p1 = $signed(tmp_197_fu_1217_p2);

assign tmp_317_fu_726_p2 = stddev_reg_1616 << 32'd9;

assign tmp_318_fu_731_p2 = stddev_reg_1616 << 32'd6;

assign tmp_319_fu_1459_p1 = tmp_147_to_int_fu_1445_p1[51:0];

assign tmp_320_fu_1476_p1 = tmp_149_to_int_fu_1463_p1[51:0];

assign tmp_321_fu_874_p1 = II_q0[24:0];

assign tmp_322_fu_881_p1 = II_q1[24:0];

assign tmp_323_fu_927_p1 = II_q0[24:0];

assign tmp_324_fu_931_p1 = II_q1[24:0];

assign tmp_325_fu_971_p1 = II_q0[24:0];

assign tmp_326_fu_978_p1 = II_q1[24:0];

assign tmp_327_fu_1025_p1 = II_q0[24:0];

assign tmp_328_fu_1029_p1 = II_q1[24:0];

assign tmp_329_fu_1033_p1 = rectangles_array8_1_q0[3:0];

assign tmp_330_fu_1043_p3 = rectangles_array8_1_q0[32'd4];

assign tmp_331_fu_1059_p1 = rectangles_array9_1_q0[3:0];

assign tmp_332_fu_1069_p3 = rectangles_array9_1_q0[32'd4];

assign tmp_333_fu_1184_p1 = II_q0[24:0];

assign tmp_334_fu_1197_p1 = II_q1[24:0];

assign tmp_335_fu_1227_p1 = II_q0[24:0];

assign tmp_336_fu_1237_p1 = II_q1[24:0];

assign tmp_s_fu_692_p2 = (SII_q0 - SII_q1);

assign tr0_width_cast_fu_829_p1 = tr0_width_reg_1758;

assign tr0_x_cast_fu_826_p1 = tr0_x_reg_1751;

assign tr1_width_cast_fu_918_p1 = tr1_width_reg_1827;

assign tr1_x_cast_fu_915_p1 = tr1_x_reg_1820;

assign tr2_height_cast5_fu_1021_p1 = rectangles_array11_1_q0;

assign tr2_width_cast7_fu_1013_p1 = rectangles_array10_1_q0;

assign tr2_x_cast8_fu_1009_p1 = rectangles_array8_1_q0;

assign tr2_y_cast6_fu_1017_p1 = rectangles_array9_1_q0;

assign tree_thresh_array_address0 = tmp_120_reg_1708;

assign weights_array0_address0 = tmp_120_reg_1708;

assign weights_array1_address0 = tmp_120_reg_1708;

assign weights_array2_address0 = tmp_120_reg_1708;

always @ (posedge ap_clk) begin
    stddev_3_reg_1628[5:0] <= 6'b000000;
    stddev_assign_cast_reg_1661[28:16] <= 13'b0000000000000;
    tmp_117_reg_1675[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    tmp_120_reg_1708[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
    tr2_y_cast6_reg_1950[5] <= 1'b0;
    tr2_height_cast5_reg_1955[5:4] <= 2'b00;
end

endmodule //cascadeClassifier_1
