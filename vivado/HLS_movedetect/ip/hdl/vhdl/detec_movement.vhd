-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity detec_movement is
generic (
    C_S_AXI_DETEC_DATA_ADDR_WIDTH : INTEGER := 10;
    C_S_AXI_DETEC_DATA_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_detec_data_AWVALID : IN STD_LOGIC;
    s_axi_detec_data_AWREADY : OUT STD_LOGIC;
    s_axi_detec_data_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_DETEC_DATA_ADDR_WIDTH-1 downto 0);
    s_axi_detec_data_WVALID : IN STD_LOGIC;
    s_axi_detec_data_WREADY : OUT STD_LOGIC;
    s_axi_detec_data_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DETEC_DATA_DATA_WIDTH-1 downto 0);
    s_axi_detec_data_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DETEC_DATA_DATA_WIDTH/8-1 downto 0);
    s_axi_detec_data_ARVALID : IN STD_LOGIC;
    s_axi_detec_data_ARREADY : OUT STD_LOGIC;
    s_axi_detec_data_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_DETEC_DATA_ADDR_WIDTH-1 downto 0);
    s_axi_detec_data_RVALID : OUT STD_LOGIC;
    s_axi_detec_data_RREADY : IN STD_LOGIC;
    s_axi_detec_data_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DETEC_DATA_DATA_WIDTH-1 downto 0);
    s_axi_detec_data_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_detec_data_BVALID : OUT STD_LOGIC;
    s_axi_detec_data_BREADY : IN STD_LOGIC;
    s_axi_detec_data_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of detec_movement is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "detec_movement,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.807750,HLS_SYN_LAT=282,HLS_SYN_TPT=none,HLS_SYN_MEM=18,HLS_SYN_DSP=0,HLS_SYN_FF=407,HLS_SYN_LUT=699,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_A0 : STD_LOGIC_VECTOR (7 downto 0) := "10100000";
    constant ap_const_lv32_1F3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110011";
    constant ap_const_lv9_13 : STD_LOGIC_VECTOR (8 downto 0) := "000010011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal inData_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal inData_ce0 : STD_LOGIC;
    signal inData_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal motion : STD_LOGIC_VECTOR (7 downto 0);
    signal motion_ap_vld : STD_LOGIC;
    signal position : STD_LOGIC_VECTOR (31 downto 0);
    signal position_ap_vld : STD_LOGIC;
    signal finished : STD_LOGIC_VECTOR (7 downto 0);
    signal finished_ap_vld : STD_LOGIC;
    signal pre_valid : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal counter : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal image_pre_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal image_pre_ce0 : STD_LOGIC;
    signal image_pre_we0 : STD_LOGIC;
    signal image_pre_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal diff : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal counter_load_reg_418 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_423 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_253_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_reg_430 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_cond_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_283_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_reg_435 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_3_fu_295_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_3_reg_443 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal image_pre_addr_1_reg_448 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_181_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_fu_382_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_2_reg_475 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_19_fu_397_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_19_reg_480 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond1_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_reg_143 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_reg_154 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal counter_new_1_reg_165 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_cast_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_cast_fu_408_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_13_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_364_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond4_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_229_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_17_fu_241_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl2_cast_fu_233_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl3_cast_fu_245_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_259_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_6_fu_271_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl_cast_fu_263_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl1_cast_fu_275_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_cast_fu_306_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_20_fu_310_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_cast_fu_326_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_10_cast_fu_330_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_fu_334_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_fu_346_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_10_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_cast_fu_393_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component detec_movement_imbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component detec_movement_detec_data_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        inData_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        inData_ce0 : IN STD_LOGIC;
        inData_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        motion : IN STD_LOGIC_VECTOR (7 downto 0);
        motion_ap_vld : IN STD_LOGIC;
        position : IN STD_LOGIC_VECTOR (31 downto 0);
        position_ap_vld : IN STD_LOGIC;
        finished : IN STD_LOGIC_VECTOR (7 downto 0);
        finished_ap_vld : IN STD_LOGIC );
    end component;



begin
    image_pre_U : component detec_movement_imbkb
    generic map (
        DataWidth => 8,
        AddressRange => 19200,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image_pre_address0,
        ce0 => image_pre_ce0,
        we0 => image_pre_we0,
        d0 => inData_q0,
        q0 => image_pre_q0);

    detec_movement_detec_data_s_axi_U : component detec_movement_detec_data_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_DETEC_DATA_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_DETEC_DATA_DATA_WIDTH)
    port map (
        AWVALID => s_axi_detec_data_AWVALID,
        AWREADY => s_axi_detec_data_AWREADY,
        AWADDR => s_axi_detec_data_AWADDR,
        WVALID => s_axi_detec_data_WVALID,
        WREADY => s_axi_detec_data_WREADY,
        WDATA => s_axi_detec_data_WDATA,
        WSTRB => s_axi_detec_data_WSTRB,
        ARVALID => s_axi_detec_data_ARVALID,
        ARREADY => s_axi_detec_data_ARREADY,
        ARADDR => s_axi_detec_data_ARADDR,
        RVALID => s_axi_detec_data_RVALID,
        RREADY => s_axi_detec_data_RREADY,
        RDATA => s_axi_detec_data_RDATA,
        RRESP => s_axi_detec_data_RRESP,
        BVALID => s_axi_detec_data_BVALID,
        BREADY => s_axi_detec_data_BREADY,
        BRESP => s_axi_detec_data_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        inData_address0 => inData_address0,
        inData_ce0 => inData_ce0,
        inData_q0 => inData_q0,
        motion => motion,
        motion_ap_vld => motion_ap_vld,
        position => position,
        position_ap_vld => position_ap_vld,
        finished => finished,
        finished_ap_vld => finished_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    counter_new_1_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((exitcond1_fu_376_p2 = ap_const_lv1_1) and (grp_fu_186_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and ((tmp_1_reg_423 = ap_const_lv1_0) or ((exitcond_fu_289_p2 = ap_const_lv1_1) and (grp_fu_186_p2 = ap_const_lv1_0)))))) then 
                counter_new_1_reg_165 <= ap_const_lv32_0;
            elsif ((((grp_fu_186_p2 = ap_const_lv1_1) and (exitcond1_fu_376_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((grp_fu_186_p2 = ap_const_lv1_1) and (exitcond_fu_289_p2 = ap_const_lv1_1) and (tmp_1_reg_423 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                counter_new_1_reg_165 <= grp_fu_181_p2;
            end if; 
        end if;
    end process;

    diff_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond4_fu_358_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                diff <= tmp_14_fu_364_p2;
            elsif ((((exitcond1_fu_376_p2 = ap_const_lv1_1) and (grp_fu_186_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (((tmp_13_fu_320_p2 = ap_const_lv1_1) and (tmp_1_reg_423 = ap_const_lv1_0)) or ((tmp_13_fu_320_p2 = ap_const_lv1_1) and (exitcond_fu_289_p2 = ap_const_lv1_1) and (grp_fu_186_p2 = ap_const_lv1_0)))) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (((tmp_1_reg_423 = ap_const_lv1_0) and (tmp_13_fu_320_p2 = ap_const_lv1_0)) or ((exitcond_fu_289_p2 = ap_const_lv1_1) and (tmp_13_fu_320_p2 = ap_const_lv1_0) and (grp_fu_186_p2 = ap_const_lv1_0)))))) then 
                diff <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    j_1_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_217_p2 = ap_const_lv1_1) and (or_cond_fu_223_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_1_reg_143 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_1_reg_143 <= j_3_reg_443;
            end if; 
        end if;
    end process;

    j_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_fu_223_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_154 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_reg_154 <= j_2_reg_475;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                counter <= counter_new_1_reg_165;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                counter_load_reg_418 <= counter;
                tmp_1_reg_423 <= tmp_1_fu_217_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_reg_423 = ap_const_lv1_1) and (exitcond_fu_289_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                image_pre_addr_1_reg_448 <= tmp_20_cast_fu_315_p1(15 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_2_reg_475 <= j_2_fu_382_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_reg_423 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                j_3_reg_443 <= j_3_fu_295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_376_p2 = ap_const_lv1_1) and (grp_fu_186_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                pre_valid <= ap_const_lv1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_fu_223_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    tmp_15_reg_435(15 downto 3) <= tmp_15_fu_283_p2(15 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_217_p2 = ap_const_lv1_1) and (or_cond_fu_223_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    tmp_18_reg_430(15 downto 3) <= tmp_18_fu_253_p2(15 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_376_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_19_reg_480 <= tmp_19_fu_397_p2;
            end if;
        end if;
    end process;
    tmp_18_reg_430(2 downto 0) <= "000";
    tmp_15_reg_435(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_1_reg_423, or_cond_fu_223_p2, ap_CS_fsm_state2, exitcond_fu_289_p2, ap_CS_fsm_state4, exitcond1_fu_376_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((or_cond_fu_223_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((or_cond_fu_223_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((exitcond_fu_289_p2 = ap_const_lv1_1) or (tmp_1_reg_423 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((exitcond1_fu_376_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exitcond1_fu_376_p2 <= "1" when (j_reg_154 = ap_const_lv8_A0) else "0";
    exitcond_fu_289_p2 <= "1" when (j_1_reg_143 = ap_const_lv8_A0) else "0";

    finished_assign_proc : process(tmp_1_reg_423, ap_CS_fsm_state2, exitcond_fu_289_p2, grp_fu_186_p2, tmp_13_fu_320_p2)
    begin
        if (((grp_fu_186_p2 = ap_const_lv1_1) and (exitcond_fu_289_p2 = ap_const_lv1_1) and (tmp_1_reg_423 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            finished <= ap_const_lv8_0;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state2) and (((tmp_13_fu_320_p2 = ap_const_lv1_1) and (tmp_1_reg_423 = ap_const_lv1_0)) or ((tmp_13_fu_320_p2 = ap_const_lv1_1) and (exitcond_fu_289_p2 = ap_const_lv1_1) and (grp_fu_186_p2 = ap_const_lv1_0)))) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (((tmp_1_reg_423 = ap_const_lv1_0) and (tmp_13_fu_320_p2 = ap_const_lv1_0)) or ((exitcond_fu_289_p2 = ap_const_lv1_1) and (tmp_13_fu_320_p2 = ap_const_lv1_0) and (grp_fu_186_p2 = ap_const_lv1_0)))))) then 
            finished <= ap_const_lv8_1;
        else 
            finished <= "XXXXXXXX";
        end if; 
    end process;


    finished_ap_vld_assign_proc : process(tmp_1_reg_423, ap_CS_fsm_state2, exitcond_fu_289_p2, grp_fu_186_p2, tmp_13_fu_320_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (((tmp_13_fu_320_p2 = ap_const_lv1_1) and (tmp_1_reg_423 = ap_const_lv1_0)) or ((tmp_13_fu_320_p2 = ap_const_lv1_1) and (exitcond_fu_289_p2 = ap_const_lv1_1) and (grp_fu_186_p2 = ap_const_lv1_0)))) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (((tmp_1_reg_423 = ap_const_lv1_0) and (tmp_13_fu_320_p2 = ap_const_lv1_0)) or ((exitcond_fu_289_p2 = ap_const_lv1_1) and (tmp_13_fu_320_p2 = ap_const_lv1_0) and (grp_fu_186_p2 = ap_const_lv1_0)))) or ((grp_fu_186_p2 = ap_const_lv1_1) and (exitcond_fu_289_p2 = ap_const_lv1_1) and (tmp_1_reg_423 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            finished_ap_vld <= ap_const_logic_1;
        else 
            finished_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_181_p2 <= std_logic_vector(unsigned(counter_load_reg_418) + unsigned(ap_const_lv32_1));
    grp_fu_186_p2 <= "1" when (signed(grp_fu_181_p2) < signed(ap_const_lv32_78)) else "0";

    image_pre_address0_assign_proc : process(ap_CS_fsm_state2, image_pre_addr_1_reg_448, ap_CS_fsm_state3, ap_CS_fsm_state5, tmp_20_cast_fu_315_p1, tmp_19_cast_fu_408_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            image_pre_address0 <= tmp_19_cast_fu_408_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            image_pre_address0 <= image_pre_addr_1_reg_448;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            image_pre_address0 <= tmp_20_cast_fu_315_p1(15 - 1 downto 0);
        else 
            image_pre_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    image_pre_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            image_pre_ce0 <= ap_const_logic_1;
        else 
            image_pre_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_pre_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            image_pre_we0 <= ap_const_logic_1;
        else 
            image_pre_we0 <= ap_const_logic_0;
        end if; 
    end process;


    inData_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, tmp_7_fu_301_p1, tmp_5_fu_388_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            inData_address0 <= tmp_5_fu_388_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            inData_address0 <= tmp_7_fu_301_p1(8 - 1 downto 0);
        else 
            inData_address0 <= "XXXXXXXX";
        end if; 
    end process;


    inData_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            inData_ce0 <= ap_const_logic_1;
        else 
            inData_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_2_fu_382_p2 <= std_logic_vector(unsigned(j_reg_154) + unsigned(ap_const_lv8_1));
    j_3_fu_295_p2 <= std_logic_vector(unsigned(j_1_reg_143) + unsigned(ap_const_lv8_1));

    motion_assign_proc : process(tmp_1_reg_423, ap_CS_fsm_state2, exitcond_fu_289_p2, ap_CS_fsm_state4, exitcond1_fu_376_p2, grp_fu_186_p2, tmp_13_fu_320_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (((tmp_13_fu_320_p2 = ap_const_lv1_1) and (tmp_1_reg_423 = ap_const_lv1_0)) or ((tmp_13_fu_320_p2 = ap_const_lv1_1) and (exitcond_fu_289_p2 = ap_const_lv1_1) and (grp_fu_186_p2 = ap_const_lv1_0))))) then 
            motion <= ap_const_lv8_1;
        elsif ((((exitcond1_fu_376_p2 = ap_const_lv1_1) and (grp_fu_186_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (((tmp_1_reg_423 = ap_const_lv1_0) and (tmp_13_fu_320_p2 = ap_const_lv1_0)) or ((exitcond_fu_289_p2 = ap_const_lv1_1) and (tmp_13_fu_320_p2 = ap_const_lv1_0) and (grp_fu_186_p2 = ap_const_lv1_0)))) or ((grp_fu_186_p2 = ap_const_lv1_1) and (exitcond_fu_289_p2 = ap_const_lv1_1) and (tmp_1_reg_423 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            motion <= ap_const_lv8_0;
        else 
            motion <= "XXXXXXXX";
        end if; 
    end process;


    motion_ap_vld_assign_proc : process(tmp_1_reg_423, ap_CS_fsm_state2, exitcond_fu_289_p2, ap_CS_fsm_state4, exitcond1_fu_376_p2, grp_fu_186_p2, tmp_13_fu_320_p2)
    begin
        if ((((exitcond1_fu_376_p2 = ap_const_lv1_1) and (grp_fu_186_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (((tmp_13_fu_320_p2 = ap_const_lv1_1) and (tmp_1_reg_423 = ap_const_lv1_0)) or ((tmp_13_fu_320_p2 = ap_const_lv1_1) and (exitcond_fu_289_p2 = ap_const_lv1_1) and (grp_fu_186_p2 = ap_const_lv1_0)))) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (((tmp_1_reg_423 = ap_const_lv1_0) and (tmp_13_fu_320_p2 = ap_const_lv1_0)) or ((exitcond_fu_289_p2 = ap_const_lv1_1) and (tmp_13_fu_320_p2 = ap_const_lv1_0) and (grp_fu_186_p2 = ap_const_lv1_0)))) or ((grp_fu_186_p2 = ap_const_lv1_1) and (exitcond_fu_289_p2 = ap_const_lv1_1) and (tmp_1_reg_423 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            motion_ap_vld <= ap_const_logic_1;
        else 
            motion_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_cond4_fu_358_p2 <= (tmp_12_fu_352_p2 or tmp_10_fu_340_p2);
    or_cond_fu_223_p2 <= (tmp_fu_207_p2 and tmp_1_fu_217_p2);
    p_shl1_cast_fu_275_p3 <= (tmp_6_fu_271_p1 & ap_const_lv3_0);
    p_shl2_cast_fu_233_p3 <= (tmp_16_fu_229_p1 & ap_const_lv7_0);
    p_shl3_cast_fu_245_p3 <= (tmp_17_fu_241_p1 & ap_const_lv3_0);
    p_shl_cast_fu_263_p3 <= (tmp_2_fu_259_p1 & ap_const_lv7_0);

    position_assign_proc : process(diff, tmp_1_reg_423, ap_CS_fsm_state2, exitcond_fu_289_p2, grp_fu_186_p2, tmp_13_fu_320_p2)
    begin
        if (((grp_fu_186_p2 = ap_const_lv1_1) and (exitcond_fu_289_p2 = ap_const_lv1_1) and (tmp_1_reg_423 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            position <= ap_const_lv32_0;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state2) and (((tmp_13_fu_320_p2 = ap_const_lv1_1) and (tmp_1_reg_423 = ap_const_lv1_0)) or ((tmp_13_fu_320_p2 = ap_const_lv1_1) and (exitcond_fu_289_p2 = ap_const_lv1_1) and (grp_fu_186_p2 = ap_const_lv1_0)))) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (((tmp_1_reg_423 = ap_const_lv1_0) and (tmp_13_fu_320_p2 = ap_const_lv1_0)) or ((exitcond_fu_289_p2 = ap_const_lv1_1) and (tmp_13_fu_320_p2 = ap_const_lv1_0) and (grp_fu_186_p2 = ap_const_lv1_0)))))) then 
            position <= diff;
        else 
            position <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    position_ap_vld_assign_proc : process(tmp_1_reg_423, ap_CS_fsm_state2, exitcond_fu_289_p2, grp_fu_186_p2, tmp_13_fu_320_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (((tmp_13_fu_320_p2 = ap_const_lv1_1) and (tmp_1_reg_423 = ap_const_lv1_0)) or ((tmp_13_fu_320_p2 = ap_const_lv1_1) and (exitcond_fu_289_p2 = ap_const_lv1_1) and (grp_fu_186_p2 = ap_const_lv1_0)))) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (((tmp_1_reg_423 = ap_const_lv1_0) and (tmp_13_fu_320_p2 = ap_const_lv1_0)) or ((exitcond_fu_289_p2 = ap_const_lv1_1) and (tmp_13_fu_320_p2 = ap_const_lv1_0) and (grp_fu_186_p2 = ap_const_lv1_0)))) or ((grp_fu_186_p2 = ap_const_lv1_1) and (exitcond_fu_289_p2 = ap_const_lv1_1) and (tmp_1_reg_423 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            position_ap_vld <= ap_const_logic_1;
        else 
            position_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_cast_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inData_q0),9));
    tmp_10_fu_340_p2 <= "1" when (signed(tmp_8_fu_334_p2) > signed(ap_const_lv9_13)) else "0";
    tmp_11_fu_346_p2 <= std_logic_vector(unsigned(tmp_10_cast_fu_330_p1) - unsigned(tmp_8_cast_fu_326_p1));
    tmp_12_fu_352_p2 <= "1" when (signed(tmp_11_fu_346_p2) > signed(ap_const_lv9_13)) else "0";
    tmp_13_fu_320_p2 <= "1" when (signed(diff) > signed(ap_const_lv32_1F3)) else "0";
    tmp_14_fu_364_p2 <= std_logic_vector(unsigned(diff) + unsigned(ap_const_lv32_1));
    tmp_15_fu_283_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_263_p3) - unsigned(p_shl1_cast_fu_275_p3));
    tmp_16_fu_229_p1 <= counter(9 - 1 downto 0);
    tmp_17_fu_241_p1 <= counter(13 - 1 downto 0);
    tmp_18_fu_253_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_233_p3) - unsigned(p_shl3_cast_fu_245_p3));
        tmp_19_cast_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_19_reg_480),64));

    tmp_19_fu_397_p2 <= std_logic_vector(unsigned(tmp_15_reg_435) + unsigned(tmp_5_cast_fu_393_p1));
    tmp_1_fu_217_p2 <= "1" when (signed(counter) < signed(ap_const_lv32_78)) else "0";
        tmp_20_cast_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_20_fu_310_p2),64));

    tmp_20_fu_310_p2 <= std_logic_vector(unsigned(tmp_18_reg_430) + unsigned(tmp_7_cast_fu_306_p1));
    tmp_2_fu_259_p1 <= counter(9 - 1 downto 0);
    tmp_5_cast_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_154),16));
    tmp_5_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_154),64));
    tmp_6_fu_271_p1 <= counter(13 - 1 downto 0);
    tmp_7_cast_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_143),16));
    tmp_7_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_143),64));
    tmp_8_cast_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_pre_q0),9));
    tmp_8_fu_334_p2 <= std_logic_vector(unsigned(tmp_8_cast_fu_326_p1) - unsigned(tmp_10_cast_fu_330_p1));
    tmp_fu_207_p2 <= (pre_valid xor ap_const_lv1_1);
end behav;
