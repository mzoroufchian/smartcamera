// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="detec_movement,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.807750,HLS_SYN_LAT=282,HLS_SYN_TPT=none,HLS_SYN_MEM=18,HLS_SYN_DSP=0,HLS_SYN_FF=407,HLS_SYN_LUT=699,HLS_VERSION=2018_3}" *)

module detec_movement (
        ap_clk,
        ap_rst_n,
        s_axi_detec_data_AWVALID,
        s_axi_detec_data_AWREADY,
        s_axi_detec_data_AWADDR,
        s_axi_detec_data_WVALID,
        s_axi_detec_data_WREADY,
        s_axi_detec_data_WDATA,
        s_axi_detec_data_WSTRB,
        s_axi_detec_data_ARVALID,
        s_axi_detec_data_ARREADY,
        s_axi_detec_data_ARADDR,
        s_axi_detec_data_RVALID,
        s_axi_detec_data_RREADY,
        s_axi_detec_data_RDATA,
        s_axi_detec_data_RRESP,
        s_axi_detec_data_BVALID,
        s_axi_detec_data_BREADY,
        s_axi_detec_data_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;
parameter    C_S_AXI_DETEC_DATA_DATA_WIDTH = 32;
parameter    C_S_AXI_DETEC_DATA_ADDR_WIDTH = 10;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_DETEC_DATA_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_detec_data_AWVALID;
output   s_axi_detec_data_AWREADY;
input  [C_S_AXI_DETEC_DATA_ADDR_WIDTH - 1:0] s_axi_detec_data_AWADDR;
input   s_axi_detec_data_WVALID;
output   s_axi_detec_data_WREADY;
input  [C_S_AXI_DETEC_DATA_DATA_WIDTH - 1:0] s_axi_detec_data_WDATA;
input  [C_S_AXI_DETEC_DATA_WSTRB_WIDTH - 1:0] s_axi_detec_data_WSTRB;
input   s_axi_detec_data_ARVALID;
output   s_axi_detec_data_ARREADY;
input  [C_S_AXI_DETEC_DATA_ADDR_WIDTH - 1:0] s_axi_detec_data_ARADDR;
output   s_axi_detec_data_RVALID;
input   s_axi_detec_data_RREADY;
output  [C_S_AXI_DETEC_DATA_DATA_WIDTH - 1:0] s_axi_detec_data_RDATA;
output  [1:0] s_axi_detec_data_RRESP;
output   s_axi_detec_data_BVALID;
input   s_axi_detec_data_BREADY;
output  [1:0] s_axi_detec_data_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [7:0] inData_address0;
reg    inData_ce0;
wire   [7:0] inData_q0;
reg   [7:0] motion;
reg    motion_ap_vld;
reg   [31:0] position;
reg    position_ap_vld;
reg   [7:0] finished;
reg    finished_ap_vld;
reg   [0:0] pre_valid;
reg   [31:0] counter;
reg   [14:0] image_pre_address0;
reg    image_pre_ce0;
reg    image_pre_we0;
wire   [7:0] image_pre_q0;
reg   [31:0] diff;
reg   [31:0] counter_load_reg_418;
wire   [0:0] tmp_1_fu_217_p2;
reg   [0:0] tmp_1_reg_423;
wire   [15:0] tmp_18_fu_253_p2;
reg   [15:0] tmp_18_reg_430;
wire   [0:0] or_cond_fu_223_p2;
wire   [15:0] tmp_15_fu_283_p2;
reg   [15:0] tmp_15_reg_435;
wire   [7:0] j_3_fu_295_p2;
reg   [7:0] j_3_reg_443;
wire    ap_CS_fsm_state2;
reg   [14:0] image_pre_addr_1_reg_448;
wire   [0:0] exitcond_fu_289_p2;
wire   [31:0] grp_fu_181_p2;
wire   [7:0] j_2_fu_382_p2;
reg   [7:0] j_2_reg_475;
wire    ap_CS_fsm_state4;
wire   [15:0] tmp_19_fu_397_p2;
reg   [15:0] tmp_19_reg_480;
wire   [0:0] exitcond1_fu_376_p2;
reg   [7:0] j_1_reg_143;
wire    ap_CS_fsm_state3;
reg   [7:0] j_reg_154;
wire    ap_CS_fsm_state5;
reg   [31:0] counter_new_1_reg_165;
wire   [0:0] grp_fu_186_p2;
wire  signed [63:0] tmp_20_cast_fu_315_p1;
wire   [63:0] tmp_7_fu_301_p1;
wire   [63:0] tmp_5_fu_388_p1;
wire  signed [63:0] tmp_19_cast_fu_408_p1;
wire    ap_CS_fsm_state6;
wire   [0:0] tmp_13_fu_320_p2;
wire   [31:0] tmp_14_fu_364_p2;
wire   [0:0] or_cond4_fu_358_p2;
wire   [0:0] tmp_fu_207_p2;
wire   [8:0] tmp_16_fu_229_p1;
wire   [12:0] tmp_17_fu_241_p1;
wire   [15:0] p_shl2_cast_fu_233_p3;
wire   [15:0] p_shl3_cast_fu_245_p3;
wire   [8:0] tmp_2_fu_259_p1;
wire   [12:0] tmp_6_fu_271_p1;
wire   [15:0] p_shl_cast_fu_263_p3;
wire   [15:0] p_shl1_cast_fu_275_p3;
wire   [15:0] tmp_7_cast_fu_306_p1;
wire   [15:0] tmp_20_fu_310_p2;
wire   [8:0] tmp_8_cast_fu_326_p1;
wire   [8:0] tmp_10_cast_fu_330_p1;
wire   [8:0] tmp_8_fu_334_p2;
wire   [8:0] tmp_11_fu_346_p2;
wire   [0:0] tmp_10_fu_340_p2;
wire   [0:0] tmp_12_fu_352_p2;
wire   [15:0] tmp_5_cast_fu_393_p1;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 pre_valid = 1'd0;
#0 counter = 32'd0;
#0 diff = 32'd0;
end

detec_movement_imbkb #(
    .DataWidth( 8 ),
    .AddressRange( 19200 ),
    .AddressWidth( 15 ))
image_pre_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(image_pre_address0),
    .ce0(image_pre_ce0),
    .we0(image_pre_we0),
    .d0(inData_q0),
    .q0(image_pre_q0)
);

detec_movement_detec_data_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_DETEC_DATA_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_DETEC_DATA_DATA_WIDTH ))
detec_movement_detec_data_s_axi_U(
    .AWVALID(s_axi_detec_data_AWVALID),
    .AWREADY(s_axi_detec_data_AWREADY),
    .AWADDR(s_axi_detec_data_AWADDR),
    .WVALID(s_axi_detec_data_WVALID),
    .WREADY(s_axi_detec_data_WREADY),
    .WDATA(s_axi_detec_data_WDATA),
    .WSTRB(s_axi_detec_data_WSTRB),
    .ARVALID(s_axi_detec_data_ARVALID),
    .ARREADY(s_axi_detec_data_ARREADY),
    .ARADDR(s_axi_detec_data_ARADDR),
    .RVALID(s_axi_detec_data_RVALID),
    .RREADY(s_axi_detec_data_RREADY),
    .RDATA(s_axi_detec_data_RDATA),
    .RRESP(s_axi_detec_data_RRESP),
    .BVALID(s_axi_detec_data_BVALID),
    .BREADY(s_axi_detec_data_BREADY),
    .BRESP(s_axi_detec_data_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .inData_address0(inData_address0),
    .inData_ce0(inData_ce0),
    .inData_q0(inData_q0),
    .motion(motion),
    .motion_ap_vld(motion_ap_vld),
    .position(position),
    .position_ap_vld(position_ap_vld),
    .finished(finished),
    .finished_ap_vld(finished_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((((exitcond1_fu_376_p2 == 1'd1) & (grp_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_CS_fsm_state2) & ((tmp_1_reg_423 == 1'd0) | ((exitcond_fu_289_p2 == 1'd1) & (grp_fu_186_p2 == 1'd0)))))) begin
        counter_new_1_reg_165 <= 32'd0;
    end else if ((((grp_fu_186_p2 == 1'd1) & (exitcond1_fu_376_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((grp_fu_186_p2 == 1'd1) & (exitcond_fu_289_p2 == 1'd1) & (tmp_1_reg_423 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        counter_new_1_reg_165 <= grp_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond4_fu_358_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        diff <= tmp_14_fu_364_p2;
    end else if ((((exitcond1_fu_376_p2 == 1'd1) & (grp_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_CS_fsm_state2) & (((tmp_13_fu_320_p2 == 1'd1) & (tmp_1_reg_423 == 1'd0)) | ((tmp_13_fu_320_p2 == 1'd1) & (exitcond_fu_289_p2 == 1'd1) & (grp_fu_186_p2 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state2) & (((tmp_1_reg_423 == 1'd0) & (tmp_13_fu_320_p2 == 1'd0)) | ((exitcond_fu_289_p2 == 1'd1) & (tmp_13_fu_320_p2 == 1'd0) & (grp_fu_186_p2 == 1'd0)))))) begin
        diff <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_217_p2 == 1'd1) & (or_cond_fu_223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_1_reg_143 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_143 <= j_3_reg_443;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_fu_223_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_154 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_154 <= j_2_reg_475;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        counter <= counter_new_1_reg_165;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        counter_load_reg_418 <= counter;
        tmp_1_reg_423 <= tmp_1_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_reg_423 == 1'd1) & (exitcond_fu_289_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        image_pre_addr_1_reg_448 <= tmp_20_cast_fu_315_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_2_reg_475 <= j_2_fu_382_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_reg_423 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_3_reg_443 <= j_3_fu_295_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_376_p2 == 1'd1) & (grp_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        pre_valid <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_fu_223_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_15_reg_435[15 : 3] <= tmp_15_fu_283_p2[15 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_217_p2 == 1'd1) & (or_cond_fu_223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_18_reg_430[15 : 3] <= tmp_18_fu_253_p2[15 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_376_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_19_reg_480 <= tmp_19_fu_397_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((grp_fu_186_p2 == 1'd1) & (exitcond_fu_289_p2 == 1'd1) & (tmp_1_reg_423 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        finished = 8'd0;
    end else if ((((1'b1 == ap_CS_fsm_state2) & (((tmp_13_fu_320_p2 == 1'd1) & (tmp_1_reg_423 == 1'd0)) | ((tmp_13_fu_320_p2 == 1'd1) & (exitcond_fu_289_p2 == 1'd1) & (grp_fu_186_p2 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state2) & (((tmp_1_reg_423 == 1'd0) & (tmp_13_fu_320_p2 == 1'd0)) | ((exitcond_fu_289_p2 == 1'd1) & (tmp_13_fu_320_p2 == 1'd0) & (grp_fu_186_p2 == 1'd0)))))) begin
        finished = 8'd1;
    end else begin
        finished = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (((tmp_13_fu_320_p2 == 1'd1) & (tmp_1_reg_423 == 1'd0)) | ((tmp_13_fu_320_p2 == 1'd1) & (exitcond_fu_289_p2 == 1'd1) & (grp_fu_186_p2 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state2) & (((tmp_1_reg_423 == 1'd0) & (tmp_13_fu_320_p2 == 1'd0)) | ((exitcond_fu_289_p2 == 1'd1) & (tmp_13_fu_320_p2 == 1'd0) & (grp_fu_186_p2 == 1'd0)))) | ((grp_fu_186_p2 == 1'd1) & (exitcond_fu_289_p2 == 1'd1) & (tmp_1_reg_423 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        finished_ap_vld = 1'b1;
    end else begin
        finished_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        image_pre_address0 = tmp_19_cast_fu_408_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        image_pre_address0 = image_pre_addr_1_reg_448;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        image_pre_address0 = tmp_20_cast_fu_315_p1;
    end else begin
        image_pre_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        image_pre_ce0 = 1'b1;
    end else begin
        image_pre_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        image_pre_we0 = 1'b1;
    end else begin
        image_pre_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        inData_address0 = tmp_5_fu_388_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        inData_address0 = tmp_7_fu_301_p1;
    end else begin
        inData_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        inData_ce0 = 1'b1;
    end else begin
        inData_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (((tmp_13_fu_320_p2 == 1'd1) & (tmp_1_reg_423 == 1'd0)) | ((tmp_13_fu_320_p2 == 1'd1) & (exitcond_fu_289_p2 == 1'd1) & (grp_fu_186_p2 == 1'd0))))) begin
        motion = 8'd1;
    end else if ((((exitcond1_fu_376_p2 == 1'd1) & (grp_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_CS_fsm_state2) & (((tmp_1_reg_423 == 1'd0) & (tmp_13_fu_320_p2 == 1'd0)) | ((exitcond_fu_289_p2 == 1'd1) & (tmp_13_fu_320_p2 == 1'd0) & (grp_fu_186_p2 == 1'd0)))) | ((grp_fu_186_p2 == 1'd1) & (exitcond_fu_289_p2 == 1'd1) & (tmp_1_reg_423 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        motion = 8'd0;
    end else begin
        motion = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond1_fu_376_p2 == 1'd1) & (grp_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_CS_fsm_state2) & (((tmp_13_fu_320_p2 == 1'd1) & (tmp_1_reg_423 == 1'd0)) | ((tmp_13_fu_320_p2 == 1'd1) & (exitcond_fu_289_p2 == 1'd1) & (grp_fu_186_p2 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state2) & (((tmp_1_reg_423 == 1'd0) & (tmp_13_fu_320_p2 == 1'd0)) | ((exitcond_fu_289_p2 == 1'd1) & (tmp_13_fu_320_p2 == 1'd0) & (grp_fu_186_p2 == 1'd0)))) | ((grp_fu_186_p2 == 1'd1) & (exitcond_fu_289_p2 == 1'd1) & (tmp_1_reg_423 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        motion_ap_vld = 1'b1;
    end else begin
        motion_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_fu_186_p2 == 1'd1) & (exitcond_fu_289_p2 == 1'd1) & (tmp_1_reg_423 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        position = 32'd0;
    end else if ((((1'b1 == ap_CS_fsm_state2) & (((tmp_13_fu_320_p2 == 1'd1) & (tmp_1_reg_423 == 1'd0)) | ((tmp_13_fu_320_p2 == 1'd1) & (exitcond_fu_289_p2 == 1'd1) & (grp_fu_186_p2 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state2) & (((tmp_1_reg_423 == 1'd0) & (tmp_13_fu_320_p2 == 1'd0)) | ((exitcond_fu_289_p2 == 1'd1) & (tmp_13_fu_320_p2 == 1'd0) & (grp_fu_186_p2 == 1'd0)))))) begin
        position = diff;
    end else begin
        position = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (((tmp_13_fu_320_p2 == 1'd1) & (tmp_1_reg_423 == 1'd0)) | ((tmp_13_fu_320_p2 == 1'd1) & (exitcond_fu_289_p2 == 1'd1) & (grp_fu_186_p2 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state2) & (((tmp_1_reg_423 == 1'd0) & (tmp_13_fu_320_p2 == 1'd0)) | ((exitcond_fu_289_p2 == 1'd1) & (tmp_13_fu_320_p2 == 1'd0) & (grp_fu_186_p2 == 1'd0)))) | ((grp_fu_186_p2 == 1'd1) & (exitcond_fu_289_p2 == 1'd1) & (tmp_1_reg_423 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        position_ap_vld = 1'b1;
    end else begin
        position_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((or_cond_fu_223_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if (((or_cond_fu_223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ((exitcond_fu_289_p2 == 1'd1) | (tmp_1_reg_423 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond1_fu_376_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_376_p2 = ((j_reg_154 == 8'd160) ? 1'b1 : 1'b0);

assign exitcond_fu_289_p2 = ((j_1_reg_143 == 8'd160) ? 1'b1 : 1'b0);

assign grp_fu_181_p2 = (counter_load_reg_418 + 32'd1);

assign grp_fu_186_p2 = (($signed(grp_fu_181_p2) < $signed(32'd120)) ? 1'b1 : 1'b0);

assign j_2_fu_382_p2 = (j_reg_154 + 8'd1);

assign j_3_fu_295_p2 = (j_1_reg_143 + 8'd1);

assign or_cond4_fu_358_p2 = (tmp_12_fu_352_p2 | tmp_10_fu_340_p2);

assign or_cond_fu_223_p2 = (tmp_fu_207_p2 & tmp_1_fu_217_p2);

assign p_shl1_cast_fu_275_p3 = {{tmp_6_fu_271_p1}, {3'd0}};

assign p_shl2_cast_fu_233_p3 = {{tmp_16_fu_229_p1}, {7'd0}};

assign p_shl3_cast_fu_245_p3 = {{tmp_17_fu_241_p1}, {3'd0}};

assign p_shl_cast_fu_263_p3 = {{tmp_2_fu_259_p1}, {7'd0}};

assign tmp_10_cast_fu_330_p1 = inData_q0;

assign tmp_10_fu_340_p2 = (($signed(tmp_8_fu_334_p2) > $signed(9'd19)) ? 1'b1 : 1'b0);

assign tmp_11_fu_346_p2 = (tmp_10_cast_fu_330_p1 - tmp_8_cast_fu_326_p1);

assign tmp_12_fu_352_p2 = (($signed(tmp_11_fu_346_p2) > $signed(9'd19)) ? 1'b1 : 1'b0);

assign tmp_13_fu_320_p2 = (($signed(diff) > $signed(32'd499)) ? 1'b1 : 1'b0);

assign tmp_14_fu_364_p2 = (diff + 32'd1);

assign tmp_15_fu_283_p2 = (p_shl_cast_fu_263_p3 - p_shl1_cast_fu_275_p3);

assign tmp_16_fu_229_p1 = counter[8:0];

assign tmp_17_fu_241_p1 = counter[12:0];

assign tmp_18_fu_253_p2 = (p_shl2_cast_fu_233_p3 - p_shl3_cast_fu_245_p3);

assign tmp_19_cast_fu_408_p1 = $signed(tmp_19_reg_480);

assign tmp_19_fu_397_p2 = (tmp_15_reg_435 + tmp_5_cast_fu_393_p1);

assign tmp_1_fu_217_p2 = (($signed(counter) < $signed(32'd120)) ? 1'b1 : 1'b0);

assign tmp_20_cast_fu_315_p1 = $signed(tmp_20_fu_310_p2);

assign tmp_20_fu_310_p2 = (tmp_18_reg_430 + tmp_7_cast_fu_306_p1);

assign tmp_2_fu_259_p1 = counter[8:0];

assign tmp_5_cast_fu_393_p1 = j_reg_154;

assign tmp_5_fu_388_p1 = j_reg_154;

assign tmp_6_fu_271_p1 = counter[12:0];

assign tmp_7_cast_fu_306_p1 = j_1_reg_143;

assign tmp_7_fu_301_p1 = j_1_reg_143;

assign tmp_8_cast_fu_326_p1 = image_pre_q0;

assign tmp_8_fu_334_p2 = (tmp_8_cast_fu_326_p1 - tmp_10_cast_fu_330_p1);

assign tmp_fu_207_p2 = (pre_valid ^ 1'd1);

always @ (posedge ap_clk) begin
    tmp_18_reg_430[2:0] <= 3'b000;
    tmp_15_reg_435[2:0] <= 3'b000;
end

endmodule //detec_movement
